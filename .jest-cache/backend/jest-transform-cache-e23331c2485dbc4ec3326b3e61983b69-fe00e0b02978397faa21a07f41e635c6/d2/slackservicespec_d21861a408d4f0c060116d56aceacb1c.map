{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/notifications/slack.service.spec.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/notifications/slack.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@visapi/core-config';\nimport { SlackService } from './slack.service';\nimport { GrafanaWebhookPayload } from '@visapi/shared-types';\nimport { of } from 'rxjs';\nimport { PinoLogger } from 'nestjs-pino';\n\ndescribe('SlackService', () => {\n  let service: SlackService;\n  let httpService: HttpService;\n  let configService: ConfigService;\n  let logger: PinoLogger;\n\n  const mockHttpService = {\n    post: jest.fn(),\n  };\n\n  const mockConfigService = {\n    slackEnabled: true,\n    slackWebhookUrl: 'https://hooks.slack.com/services/test/webhook',\n    slackDefaultChannel: '#alerts',\n    slackSigningSecret: 'test-secret',\n  };\n\n  const mockLogger = {\n    debug: jest.fn(),\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        SlackService,\n        {\n          provide: HttpService,\n          useValue: mockHttpService,\n        },\n        {\n          provide: ConfigService,\n          useValue: mockConfigService,\n        },\n        {\n          provide: `PinoLogger:${SlackService.name}`,\n          useValue: mockLogger,\n        },\n      ],\n    }).compile();\n\n    service = module.get<SlackService>(SlackService);\n    httpService = module.get<HttpService>(HttpService);\n    configService = module.get<ConfigService>(ConfigService);\n    logger = module.get<PinoLogger>(`PinoLogger:${SlackService.name}`);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('sendGrafanaAlert', () => {\n    const mockPayload: GrafanaWebhookPayload = {\n      dashboardId: 1,\n      evalMatches: [\n        {\n          value: 75.5,\n          metric: 'cpu_usage',\n          tags: { host: 'server-1' },\n        },\n      ],\n      message: 'CPU usage is above threshold',\n      orgId: 1,\n      panelId: 2,\n      ruleId: 3,\n      ruleName: 'High CPU Usage',\n      ruleUrl: 'https://grafana.example.com/d/dashboard/panel',\n      state: 'alerting',\n      tags: { severity: 'high' },\n      title: 'High CPU Usage Alert',\n    };\n\n    it('should send Grafana alert successfully', async () => {\n      mockHttpService.post.mockReturnValue(of({ data: { ok: true } }));\n\n      await service.sendGrafanaAlert(mockPayload);\n\n      expect(mockHttpService.post).toHaveBeenCalledWith(\n        'https://hooks.slack.com/services/test/webhook',\n        expect.objectContaining({\n          channel: '#alerts',\n          username: 'VisAPI Monitoring',\n          icon_emoji: ':chart_with_upwards_trend:',\n          text: expect.stringContaining('ALERTING'),\n          attachments: expect.arrayContaining([\n            expect.objectContaining({\n              color: 'danger',\n              title: 'High CPU Usage',\n              title_link: 'https://grafana.example.com/d/dashboard/panel',\n              text: 'CPU usage is above threshold',\n            }),\n          ]),\n        }),\n        expect.objectContaining({\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          timeout: 10000,\n        })\n      );\n\n      expect(mockLogger.info).toHaveBeenCalledWith(\n        'Slack alert sent successfully',\n        expect.objectContaining({\n          ruleName: 'High CPU Usage',\n          state: 'alerting',\n        })\n      );\n    });\n\n    it('should skip alert when Slack is disabled', async () => {\n      jest.spyOn(configService, 'slackEnabled', 'get').mockReturnValue(false);\n\n      await service.sendGrafanaAlert(mockPayload);\n\n      expect(mockHttpService.post).not.toHaveBeenCalled();\n      expect(mockLogger.debug).toHaveBeenCalledWith(\n        'Slack integration disabled, skipping alert'\n      );\n    });\n\n    it('should handle missing webhook URL', async () => {\n      jest.spyOn(configService, 'slackWebhookUrl', 'get').mockReturnValue('');\n\n      await service.sendGrafanaAlert(mockPayload);\n\n      expect(mockHttpService.post).not.toHaveBeenCalled();\n      expect(mockLogger.error).toHaveBeenCalledWith(\n        'Slack webhook URL not configured'\n      );\n    });\n\n    it('should handle HTTP errors', async () => {\n      const error = new Error('Network error');\n      mockHttpService.post.mockReturnValue(\n        of().pipe(() => {\n          throw error;\n        })\n      );\n\n      await expect(service.sendGrafanaAlert(mockPayload)).rejects.toThrow(\n        'Network error'\n      );\n\n      expect(mockLogger.error).toHaveBeenCalledWith(\n        'Failed to send Slack alert',\n        expect.objectContaining({\n          error: 'Network error',\n          ruleName: 'High CPU Usage',\n          state: 'alerting',\n        })\n      );\n    });\n\n    it('should format resolved alert correctly', async () => {\n      const resolvedPayload: GrafanaWebhookPayload = {\n        ...mockPayload,\n        state: 'ok',\n        message: 'CPU usage is back to normal',\n      };\n\n      mockHttpService.post.mockReturnValue(of({ data: { ok: true } }));\n\n      await service.sendGrafanaAlert(resolvedPayload);\n\n      expect(mockHttpService.post).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.objectContaining({\n          text: expect.stringContaining('OK'),\n          attachments: expect.arrayContaining([\n            expect.objectContaining({\n              color: 'good',\n              pretext: expect.stringContaining('OK Alert'),\n            }),\n          ]),\n        }),\n        expect.any(Object)\n      );\n    });\n  });\n\n  describe('sendCustomAlert', () => {\n    it('should send custom alert successfully', async () => {\n      mockHttpService.post.mockReturnValue(of({ data: { ok: true } }));\n\n      await service.sendCustomAlert('Test message', 'warning', '#test');\n\n      expect(mockHttpService.post).toHaveBeenCalledWith(\n        'https://hooks.slack.com/services/test/webhook',\n        expect.objectContaining({\n          channel: '#test',\n          username: 'VisAPI System',\n          icon_emoji: ':robot_face:',\n          text: ':warning: Test message',\n          attachments: expect.arrayContaining([\n            expect.objectContaining({\n              color: 'warning',\n              text: 'Test message',\n            }),\n          ]),\n        }),\n        expect.objectContaining({\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          timeout: 10000,\n        })\n      );\n\n      expect(mockLogger.info).toHaveBeenCalledWith(\n        'Custom Slack alert sent successfully',\n        expect.objectContaining({\n          severity: 'warning',\n          channel: '#test',\n        })\n      );\n    });\n\n    it('should use default channel when none specified', async () => {\n      mockHttpService.post.mockReturnValue(of({ data: { ok: true } }));\n\n      await service.sendCustomAlert('Test message');\n\n      expect(mockHttpService.post).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.objectContaining({\n          channel: '#alerts',\n        }),\n        expect.any(Object)\n      );\n    });\n  });\n\n  describe('validateWebhookSignature', () => {\n    it('should return true for valid signature', async () => {\n      const payload = '{\"test\": \"data\"}';\n      const timestamp = '1234567890';\n      const crypto = require('crypto');\n      const signature = 'v0=' + crypto\n        .createHmac('sha256', 'test-secret')\n        .update(`v0:${timestamp}:${payload}`)\n        .digest('hex');\n\n      const result = await service.validateWebhookSignature(payload, timestamp, signature);\n\n      expect(result).toBe(true);\n    });\n\n    it('should return false for invalid signature', async () => {\n      const payload = '{\"test\": \"data\"}';\n      const timestamp = '1234567890';\n      const signature = 'v0=invalid_signature';\n\n      const result = await service.validateWebhookSignature(payload, timestamp, signature);\n\n      expect(result).toBe(false);\n    });\n\n    it('should return true when no signing secret is configured', async () => {\n      jest.spyOn(configService, 'slackSigningSecret', 'get').mockReturnValue('');\n\n      const result = await service.validateWebhookSignature('payload', '123', 'sig');\n\n      expect(result).toBe(true);\n      expect(mockLogger.warn).toHaveBeenCalledWith(\n        'Slack signing secret not configured, skipping signature validation'\n      );\n    });\n  });\n});"],"version":3}