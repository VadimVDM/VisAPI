8569b782922cca8040845790085e9ab2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const testing_1 = require("@nestjs/testing");
const axios_1 = require("@nestjs/axios");
const core_config_1 = require("@visapi/core-config");
const slack_service_1 = require("./slack.service");
const rxjs_1 = require("rxjs");
const nestjs_pino_1 = require("nestjs-pino");
describe('SlackService', () => {
    let service;
    let httpService;
    let configService;
    let logger;
    const mockHttpService = {
        post: jest.fn(),
    };
    const mockConfigService = {
        slackEnabled: true,
        slackWebhookUrl: 'https://hooks.slack.com/services/test/webhook',
        slackDefaultChannel: '#alerts',
        slackSigningSecret: 'test-secret',
    };
    const mockLogger = {
        debug: jest.fn(),
        info: jest.fn(),
        error: jest.fn(),
        warn: jest.fn(),
    };
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const module = yield testing_1.Test.createTestingModule({
            providers: [
                slack_service_1.SlackService,
                {
                    provide: axios_1.HttpService,
                    useValue: mockHttpService,
                },
                {
                    provide: core_config_1.ConfigService,
                    useValue: mockConfigService,
                },
                {
                    provide: nestjs_pino_1.PinoLogger,
                    useValue: mockLogger,
                },
            ],
        }).compile();
        service = module.get(slack_service_1.SlackService);
        httpService = module.get(axios_1.HttpService);
        configService = module.get(core_config_1.ConfigService);
        logger = module.get(nestjs_pino_1.PinoLogger);
    }));
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('sendGrafanaAlert', () => {
        const mockPayload = {
            dashboardId: 1,
            evalMatches: [
                {
                    value: 75.5,
                    metric: 'cpu_usage',
                    tags: { host: 'server-1' },
                },
            ],
            message: 'CPU usage is above threshold',
            orgId: 1,
            panelId: 2,
            ruleId: 3,
            ruleName: 'High CPU Usage',
            ruleUrl: 'https://grafana.example.com/d/dashboard/panel',
            state: 'alerting',
            tags: { severity: 'high' },
            title: 'High CPU Usage Alert',
        };
        it('should send Grafana alert successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockHttpService.post.mockReturnValue((0, rxjs_1.of)({ data: { ok: true } }));
            yield service.sendGrafanaAlert(mockPayload);
            expect(mockHttpService.post).toHaveBeenCalledWith('https://hooks.slack.com/services/test/webhook', expect.objectContaining({
                channel: '#alerts',
                username: 'VisAPI Monitoring',
                icon_emoji: ':chart_with_upwards_trend:',
                text: expect.stringContaining('ALERTING'),
                attachments: expect.arrayContaining([
                    expect.objectContaining({
                        color: 'danger',
                        title: 'High CPU Usage',
                        title_link: 'https://grafana.example.com/d/dashboard/panel',
                        text: 'CPU usage is above threshold',
                    }),
                ]),
            }), expect.objectContaining({
                headers: {
                    'Content-Type': 'application/json',
                },
                timeout: 10000,
            }));
            expect(mockLogger.info).toHaveBeenCalledWith('Slack alert sent successfully', expect.objectContaining({
                ruleName: 'High CPU Usage',
                state: 'alerting',
            }));
        }));
        it('should skip alert when Slack is disabled', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            jest.spyOn(configService, 'slackEnabled', 'get').mockReturnValue(false);
            yield service.sendGrafanaAlert(mockPayload);
            expect(mockHttpService.post).not.toHaveBeenCalled();
            expect(mockLogger.debug).toHaveBeenCalledWith('Slack integration disabled, skipping alert');
        }));
        it('should handle missing webhook URL', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            jest.spyOn(configService, 'slackWebhookUrl', 'get').mockReturnValue('');
            yield service.sendGrafanaAlert(mockPayload);
            expect(mockHttpService.post).not.toHaveBeenCalled();
            expect(mockLogger.error).toHaveBeenCalledWith('Slack webhook URL not configured');
        }));
        it('should handle HTTP errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const error = new Error('Network error');
            mockHttpService.post.mockReturnValue((0, rxjs_1.of)().pipe(() => {
                throw error;
            }));
            yield expect(service.sendGrafanaAlert(mockPayload)).rejects.toThrow('Network error');
            expect(mockLogger.error).toHaveBeenCalledWith('Failed to send Slack alert', expect.objectContaining({
                error: 'Network error',
                ruleName: 'High CPU Usage',
                state: 'alerting',
            }));
        }));
        it('should format resolved alert correctly', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const resolvedPayload = Object.assign(Object.assign({}, mockPayload), { state: 'ok', message: 'CPU usage is back to normal' });
            mockHttpService.post.mockReturnValue((0, rxjs_1.of)({ data: { ok: true } }));
            yield service.sendGrafanaAlert(resolvedPayload);
            expect(mockHttpService.post).toHaveBeenCalledWith(expect.any(String), expect.objectContaining({
                text: expect.stringContaining('OK'),
                attachments: expect.arrayContaining([
                    expect.objectContaining({
                        color: 'good',
                        pretext: expect.stringContaining('OK Alert'),
                    }),
                ]),
            }), expect.any(Object));
        }));
    });
    describe('sendCustomAlert', () => {
        it('should send custom alert successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockHttpService.post.mockReturnValue((0, rxjs_1.of)({ data: { ok: true } }));
            yield service.sendCustomAlert('Test message', 'warning', '#test');
            expect(mockHttpService.post).toHaveBeenCalledWith('https://hooks.slack.com/services/test/webhook', expect.objectContaining({
                channel: '#test',
                username: 'VisAPI System',
                icon_emoji: ':robot_face:',
                text: ':warning: Test message',
                attachments: expect.arrayContaining([
                    expect.objectContaining({
                        color: 'warning',
                        text: 'Test message',
                    }),
                ]),
            }), expect.objectContaining({
                headers: {
                    'Content-Type': 'application/json',
                },
                timeout: 10000,
            }));
            expect(mockLogger.info).toHaveBeenCalledWith('Custom Slack alert sent successfully', expect.objectContaining({
                severity: 'warning',
                channel: '#test',
            }));
        }));
        it('should use default channel when none specified', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockHttpService.post.mockReturnValue((0, rxjs_1.of)({ data: { ok: true } }));
            yield service.sendCustomAlert('Test message');
            expect(mockHttpService.post).toHaveBeenCalledWith(expect.any(String), expect.objectContaining({
                channel: '#alerts',
            }), expect.any(Object));
        }));
    });
    describe('validateWebhookSignature', () => {
        it('should return true for valid signature', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const payload = '{"test": "data"}';
            const timestamp = '1234567890';
            const crypto = require('crypto');
            const signature = 'v0=' + crypto
                .createHmac('sha256', 'test-secret')
                .update(`v0:${timestamp}:${payload}`)
                .digest('hex');
            const result = yield service.validateWebhookSignature(payload, timestamp, signature);
            expect(result).toBe(true);
        }));
        it('should return false for invalid signature', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const payload = '{"test": "data"}';
            const timestamp = '1234567890';
            const signature = 'v0=invalid_signature';
            const result = yield service.validateWebhookSignature(payload, timestamp, signature);
            expect(result).toBe(false);
        }));
        it('should return true when no signing secret is configured', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            jest.spyOn(configService, 'slackSigningSecret', 'get').mockReturnValue('');
            const result = yield service.validateWebhookSignature('payload', '123', 'sig');
            expect(result).toBe(true);
            expect(mockLogger.warn).toHaveBeenCalledWith('Slack signing secret not configured, skipping signature validation');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,