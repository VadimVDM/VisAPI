de4003fc779b607ce24906d82bb098ba
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestModule = void 0;
const tslib_1 = require("tslib");
// Mock external services by default
jest.mock('ioredis', () => {
    return jest.fn().mockImplementation(() => ({
        ping: jest.fn().mockResolvedValue('PONG'),
        disconnect: jest.fn().mockResolvedValue(undefined),
        on: jest.fn(),
    }));
});
const testing_1 = require("@nestjs/testing");
const config_1 = require("@nestjs/config");
const core_config_1 = require("@visapi/core-config");
// Set test environment
process.env.NODE_ENV = 'test';
// Reduce console noise during tests
const originalConsoleLog = console.log;
const originalConsoleError = console.error;
beforeAll(() => {
    // Suppress console logs during tests unless DEBUG is set
    if (!process.env.DEBUG_TESTS) {
        console.log = jest.fn();
        console.error = jest.fn();
    }
    // Set shorter timeouts for test environment
    jest.setTimeout(10000);
});
afterAll(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    // Restore console
    console.log = originalConsoleLog;
    console.error = originalConsoleError;
    // Force garbage collection if available
    if (global.gc) {
        global.gc();
    }
}));
// Helper function to create test module
const createTestModule = (providers = [], imports = []) => {
    return testing_1.Test.createTestingModule({
        imports: [
            config_1.ConfigModule.forRoot({
                load: [core_config_1.configuration],
                isGlobal: true,
            }),
            ...imports,
        ],
        providers: [...providers],
    });
};
exports.createTestModule = createTestModule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZhZGltL1Byb2plY3RzL1Zpc0FQSS9hcHBzL2JhY2tlbmQvc3JjL3Rlc3Qtc2V0dXAudHMiLCJtYXBwaW5ncyI6Ijs7OztBQWlDQSxvQ0FBb0M7QUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO0lBQ3hCLE9BQU8sSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDekMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7UUFDekMsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUM7UUFDbEQsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7S0FDZCxDQUFDLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDO0FBeENILDZDQUF1QztBQUN2QywyQ0FBOEM7QUFDOUMscURBQW9EO0FBRXBELHVCQUF1QjtBQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFFOUIsb0NBQW9DO0FBQ3BDLE1BQU0sa0JBQWtCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUN2QyxNQUFNLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFFM0MsU0FBUyxDQUFDLEdBQUcsRUFBRTtJQUNiLHlEQUF5RDtJQUN6RCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM3QixPQUFPLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUN4QixPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsNENBQTRDO0lBQzVDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekIsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsR0FBUyxFQUFFO0lBQ2xCLGtCQUFrQjtJQUNsQixPQUFPLENBQUMsR0FBRyxHQUFHLGtCQUFrQixDQUFDO0lBQ2pDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsb0JBQW9CLENBQUM7SUFFckMsd0NBQXdDO0lBQ3hDLElBQUksTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ2QsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ2QsQ0FBQztBQUNILENBQUMsQ0FBQSxDQUFDLENBQUM7QUFXSCx3Q0FBd0M7QUFDakMsTUFBTSxnQkFBZ0IsR0FBRyxDQUM5QixZQUFtQixFQUFFLEVBQ3JCLFVBQWlCLEVBQUUsRUFDbkIsRUFBRTtJQUNGLE9BQU8sY0FBSSxDQUFDLG1CQUFtQixDQUFDO1FBQzlCLE9BQU8sRUFBRTtZQUNQLHFCQUFZLENBQUMsT0FBTyxDQUFDO2dCQUNuQixJQUFJLEVBQUUsQ0FBQywyQkFBYSxDQUFDO2dCQUNyQixRQUFRLEVBQUUsSUFBSTthQUNmLENBQUM7WUFDRixHQUFHLE9BQU87U0FDWDtRQUNELFNBQVMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDO0tBQzFCLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQWRXLFFBQUEsZ0JBQWdCLG9CQWMzQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvdmFkaW0vUHJvamVjdHMvVmlzQVBJL2FwcHMvYmFja2VuZC9zcmMvdGVzdC1zZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0IH0gZnJvbSAnQG5lc3Rqcy90ZXN0aW5nJztcbmltcG9ydCB7IENvbmZpZ01vZHVsZSB9IGZyb20gJ0BuZXN0anMvY29uZmlnJztcbmltcG9ydCB7IGNvbmZpZ3VyYXRpb24gfSBmcm9tICdAdmlzYXBpL2NvcmUtY29uZmlnJztcblxuLy8gU2V0IHRlc3QgZW52aXJvbm1lbnRcbnByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xuXG4vLyBSZWR1Y2UgY29uc29sZSBub2lzZSBkdXJpbmcgdGVzdHNcbmNvbnN0IG9yaWdpbmFsQ29uc29sZUxvZyA9IGNvbnNvbGUubG9nO1xuY29uc3Qgb3JpZ2luYWxDb25zb2xlRXJyb3IgPSBjb25zb2xlLmVycm9yO1xuXG5iZWZvcmVBbGwoKCkgPT4ge1xuICAvLyBTdXBwcmVzcyBjb25zb2xlIGxvZ3MgZHVyaW5nIHRlc3RzIHVubGVzcyBERUJVRyBpcyBzZXRcbiAgaWYgKCFwcm9jZXNzLmVudi5ERUJVR19URVNUUykge1xuICAgIGNvbnNvbGUubG9nID0gamVzdC5mbigpO1xuICAgIGNvbnNvbGUuZXJyb3IgPSBqZXN0LmZuKCk7XG4gIH1cbiAgXG4gIC8vIFNldCBzaG9ydGVyIHRpbWVvdXRzIGZvciB0ZXN0IGVudmlyb25tZW50XG4gIGplc3Quc2V0VGltZW91dCgxMDAwMCk7XG59KTtcblxuYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAvLyBSZXN0b3JlIGNvbnNvbGVcbiAgY29uc29sZS5sb2cgPSBvcmlnaW5hbENvbnNvbGVMb2c7XG4gIGNvbnNvbGUuZXJyb3IgPSBvcmlnaW5hbENvbnNvbGVFcnJvcjtcbiAgXG4gIC8vIEZvcmNlIGdhcmJhZ2UgY29sbGVjdGlvbiBpZiBhdmFpbGFibGVcbiAgaWYgKGdsb2JhbC5nYykge1xuICAgIGdsb2JhbC5nYygpO1xuICB9XG59KTtcblxuLy8gTW9jayBleHRlcm5hbCBzZXJ2aWNlcyBieSBkZWZhdWx0XG5qZXN0Lm1vY2soJ2lvcmVkaXMnLCAoKSA9PiB7XG4gIHJldHVybiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgcGluZzogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKCdQT05HJyksXG4gICAgZGlzY29ubmVjdDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXG4gICAgb246IGplc3QuZm4oKSxcbiAgfSkpO1xufSk7XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgdGVzdCBtb2R1bGVcbmV4cG9ydCBjb25zdCBjcmVhdGVUZXN0TW9kdWxlID0gKFxuICBwcm92aWRlcnM6IGFueVtdID0gW10sXG4gIGltcG9ydHM6IGFueVtdID0gW11cbikgPT4ge1xuICByZXR1cm4gVGVzdC5jcmVhdGVUZXN0aW5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbXG4gICAgICBDb25maWdNb2R1bGUuZm9yUm9vdCh7XG4gICAgICAgIGxvYWQ6IFtjb25maWd1cmF0aW9uXSxcbiAgICAgICAgaXNHbG9iYWw6IHRydWUsXG4gICAgICB9KSxcbiAgICAgIC4uLmltcG9ydHMsXG4gICAgXSxcbiAgICBwcm92aWRlcnM6IFsuLi5wcm92aWRlcnNdLFxuICB9KTtcbn07XG4iXSwidmVyc2lvbiI6M30=