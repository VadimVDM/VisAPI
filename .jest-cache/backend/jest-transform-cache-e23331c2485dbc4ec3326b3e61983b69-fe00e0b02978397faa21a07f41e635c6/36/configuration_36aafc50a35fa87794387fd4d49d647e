c21d7d46e61ffd8c1d16eaa37f39a9a1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = () => {
    var _a;
    return ({
        node: {
            env: process.env.NODE_ENV || 'development',
        },
        port: parseInt(process.env.PORT, 10) || 3000,
        cors: {
            origin: ((_a = process.env.CORS_ORIGIN) === null || _a === void 0 ? void 0 : _a.split(',')) || ['http://localhost:3001'],
        },
        database: {
            url: process.env.DATABASE_URL,
        },
        redis: {
            url: process.env.REDIS_URL,
        },
        supabase: {
            url: process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL,
            serviceRoleKey: process.env.SUPABASE_SERVICE_ROLE_KEY,
            anonKey: process.env.SUPABASE_ANON_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
        },
        auth: {
            jwtSecret: process.env.JWT_SECRET,
            apiKeyPrefix: process.env.API_KEY_PREFIX || 'visapi_',
            apiKeyExpiryDays: parseInt(process.env.API_KEY_EXPIRY_DAYS, 10) || 90,
        },
        rateLimit: {
            burst: parseInt(process.env.API_RATE_LIMIT_BURST, 10) || 200,
            sustained: parseInt(process.env.API_RATE_LIMIT_SUSTAINED, 10) || 2,
        },
        queue: {
            concurrency: parseInt(process.env.QUEUE_CONCURRENCY, 10) || 10,
            maxRetries: parseInt(process.env.QUEUE_MAX_RETRIES, 10) || 3,
            retryDelay: parseInt(process.env.QUEUE_RETRY_DELAY, 10) || 5000,
        },
        logging: {
            level: process.env.LOG_LEVEL || 'debug',
            format: process.env.LOG_FORMAT || 'json',
        },
        cgb: {
            apiUrl: process.env.CGB_API_URL || 'https://app.chatgptbuilder.io/api',
            apiKey: process.env.CGB_API_KEY || '',
            timeout: parseInt(process.env.CGB_TIMEOUT, 10) || 30000,
            retryAttempts: parseInt(process.env.CGB_RETRY_ATTEMPTS, 10) || 3,
            cacheTimeout: parseInt(process.env.CGB_CACHE_TIMEOUT, 10) || 3600,
        },
        slack: {
            webhookUrl: process.env.SLACK_WEBHOOK_URL || '',
            botToken: process.env.SLACK_BOT_TOKEN || '',
            signingSecret: process.env.SLACK_SIGNING_SECRET || '',
            defaultChannel: process.env.SLACK_DEFAULT_CHANNEL || '#alerts',
            enabled: process.env.SLACK_ENABLED === 'true',
        },
    });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZhZGltL1Byb2plY3RzL1Zpc0FQSS9saWJzL2JhY2tlbmQvY29yZS1jb25maWcvc3JjL2xpYi9jb25maWd1cmF0aW9uLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsa0JBQWUsR0FBRyxFQUFFOztJQUFDLE9BQUEsQ0FBQztRQUNwQixJQUFJLEVBQUU7WUFDSixHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksYUFBYTtTQUMzQztRQUNELElBQUksRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSTtRQUM1QyxJQUFJLEVBQUU7WUFDSixNQUFNLEVBQUUsQ0FBQSxNQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVywwQ0FBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyx1QkFBdUIsQ0FBQztTQUN6RTtRQUNELFFBQVEsRUFBRTtZQUNSLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVk7U0FDOUI7UUFDRCxLQUFLLEVBQUU7WUFDTCxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTO1NBQzNCO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCO1lBQ3JFLGNBQWMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QjtZQUNyRCxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QjtTQUNwRjtRQUNELElBQUksRUFBRTtZQUNKLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVU7WUFDakMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxJQUFJLFNBQVM7WUFDckQsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRTtTQUN0RTtRQUNELFNBQVMsRUFBRTtZQUNULEtBQUssRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLENBQUMsSUFBSSxHQUFHO1lBQzVELFNBQVMsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDO1NBQ25FO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsV0FBVyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUU7WUFDOUQsVUFBVSxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDNUQsVUFBVSxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUk7U0FDaEU7UUFDRCxPQUFPLEVBQUU7WUFDUCxLQUFLLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLElBQUksT0FBTztZQUN2QyxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksTUFBTTtTQUN6QztRQUNELEdBQUcsRUFBRTtZQUNILE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxtQ0FBbUM7WUFDdEUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLEVBQUU7WUFDckMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLO1lBQ3ZELGFBQWEsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDO1lBQ2hFLFlBQVksRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJO1NBQ2xFO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsVUFBVSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLElBQUksRUFBRTtZQUMvQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLElBQUksRUFBRTtZQUMzQyxhQUFhLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsSUFBSSxFQUFFO1lBQ3JELGNBQWMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixJQUFJLFNBQVM7WUFDOUQsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxLQUFLLE1BQU07U0FDOUM7S0FDRixDQUFDLENBQUE7Q0FBQSxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy92YWRpbS9Qcm9qZWN0cy9WaXNBUEkvbGlicy9iYWNrZW5kL2NvcmUtY29uZmlnL3NyYy9saWIvY29uZmlndXJhdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAoKSA9PiAoe1xuICBub2RlOiB7XG4gICAgZW52OiBwcm9jZXNzLmVudi5OT0RFX0VOViB8fCAnZGV2ZWxvcG1lbnQnLFxuICB9LFxuICBwb3J0OiBwYXJzZUludChwcm9jZXNzLmVudi5QT1JULCAxMCkgfHwgMzAwMCxcbiAgY29yczoge1xuICAgIG9yaWdpbjogcHJvY2Vzcy5lbnYuQ09SU19PUklHSU4/LnNwbGl0KCcsJykgfHwgWydodHRwOi8vbG9jYWxob3N0OjMwMDEnXSxcbiAgfSxcbiAgZGF0YWJhc2U6IHtcbiAgICB1cmw6IHByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTCxcbiAgfSxcbiAgcmVkaXM6IHtcbiAgICB1cmw6IHByb2Nlc3MuZW52LlJFRElTX1VSTCxcbiAgfSxcbiAgc3VwYWJhc2U6IHtcbiAgICB1cmw6IHByb2Nlc3MuZW52LlNVUEFCQVNFX1VSTCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwsXG4gICAgc2VydmljZVJvbGVLZXk6IHByb2Nlc3MuZW52LlNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVksXG4gICAgYW5vbktleTogcHJvY2Vzcy5lbnYuU1VQQUJBU0VfQU5PTl9LRVkgfHwgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVksXG4gIH0sXG4gIGF1dGg6IHtcbiAgICBqd3RTZWNyZXQ6IHByb2Nlc3MuZW52LkpXVF9TRUNSRVQsXG4gICAgYXBpS2V5UHJlZml4OiBwcm9jZXNzLmVudi5BUElfS0VZX1BSRUZJWCB8fCAndmlzYXBpXycsXG4gICAgYXBpS2V5RXhwaXJ5RGF5czogcGFyc2VJbnQocHJvY2Vzcy5lbnYuQVBJX0tFWV9FWFBJUllfREFZUywgMTApIHx8IDkwLFxuICB9LFxuICByYXRlTGltaXQ6IHtcbiAgICBidXJzdDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuQVBJX1JBVEVfTElNSVRfQlVSU1QsIDEwKSB8fCAyMDAsXG4gICAgc3VzdGFpbmVkOiBwYXJzZUludChwcm9jZXNzLmVudi5BUElfUkFURV9MSU1JVF9TVVNUQUlORUQsIDEwKSB8fCAyLFxuICB9LFxuICBxdWV1ZToge1xuICAgIGNvbmN1cnJlbmN5OiBwYXJzZUludChwcm9jZXNzLmVudi5RVUVVRV9DT05DVVJSRU5DWSwgMTApIHx8IDEwLFxuICAgIG1heFJldHJpZXM6IHBhcnNlSW50KHByb2Nlc3MuZW52LlFVRVVFX01BWF9SRVRSSUVTLCAxMCkgfHwgMyxcbiAgICByZXRyeURlbGF5OiBwYXJzZUludChwcm9jZXNzLmVudi5RVUVVRV9SRVRSWV9ERUxBWSwgMTApIHx8IDUwMDAsXG4gIH0sXG4gIGxvZ2dpbmc6IHtcbiAgICBsZXZlbDogcHJvY2Vzcy5lbnYuTE9HX0xFVkVMIHx8ICdkZWJ1ZycsXG4gICAgZm9ybWF0OiBwcm9jZXNzLmVudi5MT0dfRk9STUFUIHx8ICdqc29uJyxcbiAgfSxcbiAgY2diOiB7XG4gICAgYXBpVXJsOiBwcm9jZXNzLmVudi5DR0JfQVBJX1VSTCB8fCAnaHR0cHM6Ly9hcHAuY2hhdGdwdGJ1aWxkZXIuaW8vYXBpJyxcbiAgICBhcGlLZXk6IHByb2Nlc3MuZW52LkNHQl9BUElfS0VZIHx8ICcnLFxuICAgIHRpbWVvdXQ6IHBhcnNlSW50KHByb2Nlc3MuZW52LkNHQl9USU1FT1VULCAxMCkgfHwgMzAwMDAsXG4gICAgcmV0cnlBdHRlbXB0czogcGFyc2VJbnQocHJvY2Vzcy5lbnYuQ0dCX1JFVFJZX0FUVEVNUFRTLCAxMCkgfHwgMyxcbiAgICBjYWNoZVRpbWVvdXQ6IHBhcnNlSW50KHByb2Nlc3MuZW52LkNHQl9DQUNIRV9USU1FT1VULCAxMCkgfHwgMzYwMCxcbiAgfSxcbiAgc2xhY2s6IHtcbiAgICB3ZWJob29rVXJsOiBwcm9jZXNzLmVudi5TTEFDS19XRUJIT09LX1VSTCB8fCAnJyxcbiAgICBib3RUb2tlbjogcHJvY2Vzcy5lbnYuU0xBQ0tfQk9UX1RPS0VOIHx8ICcnLFxuICAgIHNpZ25pbmdTZWNyZXQ6IHByb2Nlc3MuZW52LlNMQUNLX1NJR05JTkdfU0VDUkVUIHx8ICcnLFxuICAgIGRlZmF1bHRDaGFubmVsOiBwcm9jZXNzLmVudi5TTEFDS19ERUZBVUxUX0NIQU5ORUwgfHwgJyNhbGVydHMnLFxuICAgIGVuYWJsZWQ6IHByb2Nlc3MuZW52LlNMQUNLX0VOQUJMRUQgPT09ICd0cnVlJyxcbiAgfSxcbn0pO1xuIl0sInZlcnNpb24iOjN9