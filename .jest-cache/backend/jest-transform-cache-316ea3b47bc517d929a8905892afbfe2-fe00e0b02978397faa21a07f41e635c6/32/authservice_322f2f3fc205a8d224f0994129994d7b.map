{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/auth/auth.service.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/auth/auth.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { SupabaseService } from '@visapi/core-supabase';\nimport { ConfigService } from '@visapi/core-config';\nimport { ApiKeyRecord } from '@visapi/shared-types';\nimport * as bcrypt from 'bcrypt';\nimport { randomBytes } from 'crypto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly supabase: SupabaseService,\n    private readonly config: ConfigService\n  ) {}\n\n  async createApiKey(\n    name: string,\n    scopes: string[],\n    createdBy: string\n  ): Promise<{ key: string; apiKey: ApiKeyRecord }> {\n    // Generate prefix and secret\n    const prefix = this.config.apiKeyPrefix || 'vapi_';\n    const secret = randomBytes(32).toString('hex');\n    const fullKey = `${prefix}${secret}`;\n\n    // Hash only the secret part for storage\n    const hashedSecret = await bcrypt.hash(secret, 12);\n\n    // Calculate expiry date\n    const expiresAt = new Date();\n    expiresAt.setDate(\n      expiresAt.getDate() + (this.config.apiKeyExpiryDays || 90)\n    );\n\n    // Store in database\n    const { data, error } = await this.supabase.serviceClient\n      .from('api_keys')\n      .insert({\n        name,\n        prefix,\n        hashed_secret: hashedSecret,\n        scopes,\n        expires_at: expiresAt.toISOString(),\n        created_by: createdBy,\n      })\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to create API key: ${error.message}`);\n    }\n\n    return {\n      key: fullKey,\n      apiKey: data,\n    };\n  }\n\n  async validateApiKey(apiKey: string): Promise<ApiKeyRecord | null> {\n    const { prefix, secret } = this.splitApiKey(apiKey);\n    if (!prefix || !secret) {\n      return null;\n    }\n\n    // Find the API key record by prefix\n    const { data, error } = await this.supabase.serviceClient\n      .from('api_keys')\n      .select('*')\n      .eq('prefix', prefix)\n      .single();\n\n    if (error || !data) {\n      return null;\n    }\n\n    // Check if expired\n    if (data.expires_at && new Date(data.expires_at) < new Date()) {\n      return null;\n    }\n\n    // Use bcrypt.compare to validate the secret\n    const isValid = await bcrypt.compare(secret, data.hashed_secret);\n    if (!isValid) {\n      return null;\n    }\n\n    // Update last_used_at timestamp\n    await this.supabase.serviceClient\n      .from('api_keys')\n      .update({ last_used_at: new Date().toISOString() })\n      .eq('id', data.id);\n\n    return data;\n  }\n\n  async listApiKeys(userId?: string): Promise<ApiKeyRecord[]> {\n    let query = this.supabase.serviceClient\n      .from('api_keys')\n      .select('*')\n      .order('created_at', { ascending: false });\n\n    if (userId) {\n      query = query.eq('created_by', userId);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw new Error(`Failed to list API keys: ${error.message}`);\n    }\n\n    return data || [];\n  }\n\n  async revokeApiKey(keyId: string): Promise<void> {\n    const { error } = await this.supabase.serviceClient\n      .from('api_keys')\n      .delete()\n      .eq('id', keyId);\n\n    if (error) {\n      throw new Error(`Failed to revoke API key: ${error.message}`);\n    }\n  }\n\n  private splitApiKey(apiKey: string): { prefix: string; secret: string } {\n    const prefixPattern = this.config.apiKeyPrefix || 'vapi_';\n\n    if (!apiKey.startsWith(prefixPattern)) {\n      return { prefix: '', secret: '' };\n    }\n\n    const prefix = prefixPattern;\n    const secret = apiKey.slice(prefix.length);\n\n    return { prefix, secret };\n  }\n\n  async checkScopes(\n    apiKey: ApiKeyRecord,\n    requiredScopes: string[]\n  ): Promise<boolean> {\n    if (!requiredScopes.length) {\n      return true;\n    }\n\n    return requiredScopes.every((scope) => apiKey.scopes.includes(scope));\n  }\n}\n"],"version":3}