{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/health/indicators/redis.health.spec.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/health/indicators/redis.health.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { HealthCheckError } from '@nestjs/terminus';\nimport { RedisHealthIndicator } from './redis.health';\nimport { RedisService } from '@visapi/util-redis';\n\ndescribe('RedisHealthIndicator', () => {\n  let indicator: RedisHealthIndicator;\n  let redisService: jest.Mocked<RedisService>;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const mockRedisService = {\n      checkConnection: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        RedisHealthIndicator,\n        {\n          provide: RedisService,\n          useValue: mockRedisService,\n        },\n      ],\n    }).compile();\n\n    indicator = module.get<RedisHealthIndicator>(RedisHealthIndicator);\n    redisService = module.get(RedisService) as jest.Mocked<RedisService>;\n  });\n\n  it('should be defined', () => {\n    expect(indicator).toBeDefined();\n  });\n\n  describe('isHealthy', () => {\n    const healthKey = 'redis';\n\n    it('should return healthy status when Redis connection is successful', async () => {\n      redisService.checkConnection.mockResolvedValue(true);\n\n      const result = await indicator.isHealthy(healthKey);\n\n      expect(result).toEqual({\n        redis: {\n          status: 'up',\n          message: 'Redis is accessible and responsive',\n        },\n      });\n      expect(redisService.checkConnection).toHaveBeenCalledTimes(1);\n    });\n\n    it('should throw HealthCheckError when Redis connection fails', async () => {\n      redisService.checkConnection.mockResolvedValue(false);\n\n      await expect(indicator.isHealthy(healthKey)).rejects.toThrow(\n        HealthCheckError\n      );\n      expect(redisService.checkConnection).toHaveBeenCalledTimes(1);\n    });\n\n    it('should throw HealthCheckError when Redis service throws an error', async () => {\n      const error = new Error('Connection timeout');\n      redisService.checkConnection.mockRejectedValue(error);\n\n      await expect(indicator.isHealthy(healthKey)).rejects.toThrow(\n        HealthCheckError\n      );\n\n      try {\n        await indicator.isHealthy(healthKey);\n      } catch (err) {\n        expect(err).toBeInstanceOf(HealthCheckError);\n        expect(err.message).toBe('Redis connection failed');\n        expect(err.causes).toEqual({\n          redis: {\n            status: 'down',\n            message: 'Unable to connect to Redis',\n            error: 'Connection timeout',\n          },\n        });\n      }\n    });\n\n    it('should include the provided key in the health status', async () => {\n      const customKey = 'redis_cluster';\n      redisService.checkConnection.mockResolvedValue(true);\n\n      const result = await indicator.isHealthy(customKey);\n\n      expect(result).toHaveProperty(customKey);\n      expect(result[customKey]).toEqual({\n        status: 'up',\n        message: 'Redis is accessible and responsive',\n      });\n    });\n\n    it('should handle Redis service timeout gracefully', async () => {\n      redisService.checkConnection.mockResolvedValue(false);\n\n      await expect(indicator.isHealthy(healthKey)).rejects.toThrow(\n        HealthCheckError\n      );\n\n      try {\n        await indicator.isHealthy(healthKey);\n      } catch (err) {\n        expect(err).toBeInstanceOf(HealthCheckError);\n        expect(err.message).toBe('Redis connection failed');\n        expect(err.causes).toEqual({\n          redis: {\n            status: 'down',\n            message: 'Unable to connect to Redis',\n            error: 'Redis connection failed',\n          },\n        });\n      }\n    });\n\n    it('should handle Redis service connection error', async () => {\n      const error = new Error('Redis connection failed');\n      redisService.checkConnection.mockRejectedValue(error);\n\n      await expect(indicator.isHealthy(healthKey)).rejects.toThrow(\n        HealthCheckError\n      );\n\n      try {\n        await indicator.isHealthy(healthKey);\n      } catch (err) {\n        expect(err).toBeInstanceOf(HealthCheckError);\n        expect(err.message).toBe('Redis connection failed');\n        expect(err.causes).toEqual({\n          redis: {\n            status: 'down',\n            message: 'Unable to connect to Redis',\n            error: 'Redis connection failed',\n          },\n        });\n      }\n    });\n  });\n});"],"version":3}