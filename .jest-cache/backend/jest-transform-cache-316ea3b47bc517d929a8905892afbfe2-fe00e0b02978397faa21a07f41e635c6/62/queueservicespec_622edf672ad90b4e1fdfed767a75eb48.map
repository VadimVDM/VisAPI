{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/queue/queue.service.spec.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/queue/queue.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getQueueToken } from '@nestjs/bullmq';\nimport { QueueService } from './queue.service';\nimport { ConfigService } from '@visapi/core-config';\nimport { QUEUE_NAMES } from '@visapi/shared-types';\nimport { Queue, Job } from 'bullmq';\n\ndescribe('QueueService', () => {\n  let service: QueueService;\n  let criticalQueue: jest.Mocked<Queue>;\n  let defaultQueue: jest.Mocked<Queue>;\n  let bulkQueue: jest.Mocked<Queue>;\n\n  const createMockQueue = () => ({\n    add: jest.fn(),\n    getJob: jest.fn(),\n    getJobCounts: jest.fn(),\n    clean: jest.fn(),\n    pause: jest.fn(),\n    resume: jest.fn(),\n    drain: jest.fn(),\n    remove: jest.fn(),\n  });\n\n  beforeEach(async () => {\n    const mockCriticalQueue = createMockQueue();\n    const mockDefaultQueue = createMockQueue();\n    const mockBulkQueue = createMockQueue();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        QueueService,\n        {\n          provide: getQueueToken(QUEUE_NAMES.CRITICAL),\n          useValue: mockCriticalQueue,\n        },\n        {\n          provide: getQueueToken(QUEUE_NAMES.DEFAULT),\n          useValue: mockDefaultQueue,\n        },\n        {\n          provide: getQueueToken(QUEUE_NAMES.BULK),\n          useValue: mockBulkQueue,\n        },\n        {\n          provide: ConfigService,\n          useValue: {\n            queueMaxRetries: 3,\n            queueRetryDelay: 2000,\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<QueueService>(QueueService);\n    criticalQueue = module.get(getQueueToken(QUEUE_NAMES.CRITICAL));\n    defaultQueue = module.get(getQueueToken(QUEUE_NAMES.DEFAULT));\n    bulkQueue = module.get(getQueueToken(QUEUE_NAMES.BULK));\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('addJob', () => {\n    it('should add job to default queue with correct data', async () => {\n      const jobData = {\n        channel: '#general',\n        message: 'Test message',\n        template: 'visa_approved',\n        variables: { name: 'John Doe' },\n      };\n\n      const mockJob = { id: 'job-123' } as Job;\n      defaultQueue.add.mockResolvedValue(mockJob);\n\n      const result = await service.addJob(QUEUE_NAMES.DEFAULT, 'slack.send', jobData);\n\n      expect(result).toBe(mockJob);\n      expect(defaultQueue.add).toHaveBeenCalledWith(\n        'slack.send',\n        jobData,\n        expect.objectContaining({\n          attempts: 3,\n          backoff: {\n            type: 'exponential',\n            delay: 2000,\n          },\n          removeOnComplete: true,\n          removeOnFail: false,\n        })\n      );\n    });\n\n    it('should add job to critical queue when specified', async () => {\n      const jobData = { message: 'Critical notification' };\n      const mockJob = { id: 'job-456' } as Job;\n      criticalQueue.add.mockResolvedValue(mockJob);\n\n      const result = await service.addJob(QUEUE_NAMES.CRITICAL, 'notification.send', jobData);\n\n      expect(result).toBe(mockJob);\n      expect(criticalQueue.add).toHaveBeenCalledWith(\n        'notification.send',\n        jobData,\n        expect.any(Object)\n      );\n    });\n  });\n\n  describe('getJob', () => {\n    it('should get job from specified queue', async () => {\n      const mockJob = { id: 'job-123', data: { test: true } } as Job;\n      defaultQueue.getJob.mockResolvedValue(mockJob);\n\n      const result = await service.getJob(QUEUE_NAMES.DEFAULT, 'job-123');\n\n      expect(result).toBe(mockJob);\n      expect(defaultQueue.getJob).toHaveBeenCalledWith('job-123');\n    });\n\n    it('should return undefined when job not found', async () => {\n      defaultQueue.getJob.mockResolvedValue(undefined);\n\n      const result = await service.getJob(QUEUE_NAMES.DEFAULT, 'non-existent');\n\n      expect(result).toBeUndefined();\n    });\n  });\n\n  // checkHealth method was removed as it's replaced by dedicated health indicators\n\n  describe('getQueueMetrics', () => {\n    it('should return metrics for all queues', async () => {\n      const mockCounts = {\n        waiting: 5,\n        active: 2,\n        completed: 100,\n        failed: 3,\n        delayed: 1,\n      };\n\n      criticalQueue.getJobCounts.mockResolvedValue(mockCounts);\n      defaultQueue.getJobCounts.mockResolvedValue(mockCounts);\n      bulkQueue.getJobCounts.mockResolvedValue(mockCounts);\n\n      const result = await service.getQueueMetrics();\n\n      expect(result).toHaveLength(3);\n      expect(result[0]).toEqual({\n        name: QUEUE_NAMES.CRITICAL,\n        waiting: 5,\n        active: 2,\n        completed: 100,\n        failed: 3,\n        delayed: 1,\n      });\n    });\n\n    it('should return metrics for specific queue when specified', async () => {\n      const mockCounts = {\n        waiting: 5,\n        active: 2,\n        completed: 100,\n        failed: 3,\n        delayed: 1,\n      };\n\n      defaultQueue.getJobCounts.mockResolvedValue(mockCounts);\n\n      const result = await service.getQueueMetrics(QUEUE_NAMES.DEFAULT);\n\n      expect(result).toHaveLength(1);\n      expect(result[0]).toEqual({\n        name: QUEUE_NAMES.DEFAULT,\n        waiting: 5,\n        active: 2,\n        completed: 100,\n        failed: 3,\n        delayed: 1,\n      });\n    });\n  });\n\n  describe('pauseQueue', () => {\n    it('should pause the specified queue', async () => {\n      await service.pauseQueue(QUEUE_NAMES.DEFAULT);\n\n      expect(defaultQueue.pause).toHaveBeenCalled();\n    });\n  });\n\n  describe('resumeQueue', () => {\n    it('should resume the specified queue', async () => {\n      await service.resumeQueue(QUEUE_NAMES.DEFAULT);\n\n      expect(defaultQueue.resume).toHaveBeenCalled();\n    });\n  });\n\n  describe('drainQueue', () => {\n    it('should drain the specified queue', async () => {\n      await service.drainQueue(QUEUE_NAMES.DEFAULT);\n\n      expect(defaultQueue.drain).toHaveBeenCalled();\n    });\n  });\n\n  describe('cleanQueue', () => {\n    it('should clean the specified queue', async () => {\n      const mockResult = ['job-1', 'job-2'];\n      defaultQueue.clean.mockResolvedValue(mockResult);\n\n      const result = await service.cleanQueue(QUEUE_NAMES.DEFAULT, 5000, 10, 'completed');\n\n      expect(result).toBe(mockResult);\n      expect(defaultQueue.clean).toHaveBeenCalledWith(5000, 10, 'completed');\n    });\n  });\n});\n"],"version":3}