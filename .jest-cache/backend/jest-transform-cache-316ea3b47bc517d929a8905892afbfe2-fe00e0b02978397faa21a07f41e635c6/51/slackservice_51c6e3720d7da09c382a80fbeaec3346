f9e6ff0a986b3bd022af012b9a02db9b
"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlackService = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const nestjs_pino_1 = require("nestjs-pino");
const core_config_1 = require("@visapi/core-config");
const axios_1 = require("@nestjs/axios");
const rxjs_1 = require("rxjs");
let SlackService = class SlackService {
    constructor(logger, configService, httpService) {
        this.logger = logger;
        this.configService = configService;
        this.httpService = httpService;
    }
    sendGrafanaAlert(payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.configService.slackEnabled) {
                this.logger.debug('Slack integration disabled, skipping alert');
                return;
            }
            const webhookUrl = this.configService.slackWebhookUrl;
            if (!webhookUrl) {
                this.logger.error('Slack webhook URL not configured');
                return;
            }
            try {
                const slackMessage = this.formatGrafanaAlert(payload);
                this.logger.debug('Sending Slack alert', {
                    ruleName: payload.ruleName,
                    state: payload.state,
                    channel: slackMessage.channel,
                });
                yield (0, rxjs_1.firstValueFrom)(this.httpService.post(webhookUrl, slackMessage, {
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    timeout: 10000,
                }));
                this.logger.info('Slack alert sent successfully', {
                    ruleName: payload.ruleName,
                    state: payload.state,
                });
            }
            catch (error) {
                this.logger.error('Failed to send Slack alert', {
                    error: error.message,
                    ruleName: payload.ruleName,
                    state: payload.state,
                });
                throw error;
            }
        });
    }
    formatGrafanaAlert(payload) {
        const severity = this.getAlertSeverity(payload.state);
        const color = this.getAlertColor(payload.state);
        const emoji = this.getAlertEmoji(payload.state);
        const fields = [
            {
                title: 'Status',
                value: `${emoji} ${payload.state.toUpperCase()}`,
                short: true,
            },
            {
                title: 'Rule',
                value: payload.ruleName,
                short: true,
            },
        ];
        if (payload.dashboardId) {
            fields.push({
                title: 'Dashboard ID',
                value: payload.dashboardId.toString(),
                short: true,
            });
        }
        if (payload.panelId) {
            fields.push({
                title: 'Panel ID',
                value: payload.panelId.toString(),
                short: true,
            });
        }
        // Add evaluation matches if available
        if (payload.evalMatches && payload.evalMatches.length > 0) {
            const metrics = payload.evalMatches
                .map((match) => `${match.metric}: ${match.value}`)
                .join('\n');
            fields.push({
                title: 'Metrics',
                value: metrics,
                short: false,
            });
        }
        // Add tags if available
        if (payload.tags && Object.keys(payload.tags).length > 0) {
            const tags = Object.entries(payload.tags)
                .map(([key, value]) => `${key}: ${value}`)
                .join('\n');
            fields.push({
                title: 'Tags',
                value: tags,
                short: false,
            });
        }
        const attachment = {
            color,
            pretext: `${severity} Alert: ${payload.title}`,
            title: payload.ruleName,
            title_link: payload.ruleUrl,
            text: payload.message,
            fields,
            footer: 'VisAPI Monitoring',
            footer_icon: 'https://grafana.com/static/img/about/grafana_logo_swirl-events.svg',
            ts: Math.floor(Date.now() / 1000),
            mrkdwn_in: ['text', 'pretext'],
        };
        // Add image if available
        if (payload.imageUrl) {
            attachment.image_url = payload.imageUrl;
        }
        const message = {
            channel: this.configService.slackDefaultChannel,
            username: 'VisAPI Monitoring',
            icon_emoji: ':chart_with_upwards_trend:',
            text: this.buildAlertText(payload),
            attachments: [attachment],
        };
        return message;
    }
    buildAlertText(payload) {
        const emoji = this.getAlertEmoji(payload.state);
        let text = `${emoji} *${payload.state.toUpperCase()}*: ${payload.title}`;
        if (payload.state === 'alerting') {
            text += '\n:warning: *Action may be required*';
        }
        else if (payload.state === 'ok') {
            text += '\n:white_check_mark: *Issue resolved*';
        }
        return text;
    }
    getAlertSeverity(state) {
        switch (state) {
            case 'alerting':
                return 'CRITICAL';
            case 'no_data':
                return 'WARNING';
            case 'paused':
                return 'INFO';
            case 'pending':
                return 'INFO';
            case 'ok':
                return 'OK';
            default:
                return 'UNKNOWN';
        }
    }
    getAlertColor(state) {
        switch (state) {
            case 'alerting':
                return 'danger';
            case 'no_data':
                return 'warning';
            case 'paused':
                return '#808080'; // Gray
            case 'pending':
                return '#FFA500'; // Orange
            case 'ok':
                return 'good';
            default:
                return '#808080'; // Gray
        }
    }
    getAlertEmoji(state) {
        switch (state) {
            case 'alerting':
                return ':red_circle:';
            case 'no_data':
                return ':yellow_circle:';
            case 'paused':
                return ':pause_button:';
            case 'pending':
                return ':clock1:';
            case 'ok':
                return ':green_circle:';
            default:
                return ':grey_question:';
        }
    }
    sendCustomAlert(message_1) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (message, severity = 'info', channel) {
            if (!this.configService.slackEnabled) {
                this.logger.debug('Slack integration disabled, skipping custom alert');
                return;
            }
            const webhookUrl = this.configService.slackWebhookUrl;
            if (!webhookUrl) {
                this.logger.error('Slack webhook URL not configured');
                return;
            }
            const color = severity === 'error' ? 'danger' : severity === 'warning' ? 'warning' : 'good';
            const emoji = severity === 'error' ? ':red_circle:' : severity === 'warning' ? ':warning:' : ':information_source:';
            const slackMessage = {
                channel: channel || this.configService.slackDefaultChannel,
                username: 'VisAPI System',
                icon_emoji: ':robot_face:',
                text: `${emoji} ${message}`,
                attachments: [
                    {
                        color,
                        text: message,
                        footer: 'VisAPI System',
                        ts: Math.floor(Date.now() / 1000),
                    },
                ],
            };
            try {
                yield (0, rxjs_1.firstValueFrom)(this.httpService.post(webhookUrl, slackMessage, {
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    timeout: 10000,
                }));
                this.logger.info('Custom Slack alert sent successfully', {
                    severity,
                    channel: channel || this.configService.slackDefaultChannel,
                });
            }
            catch (error) {
                this.logger.error('Failed to send custom Slack alert', {
                    error: error.message,
                    severity,
                    message,
                });
                throw error;
            }
        });
    }
    validateWebhookSignature(payload, timestamp, signature) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const signingSecret = this.configService.slackSigningSecret;
            if (!signingSecret) {
                this.logger.warn('Slack signing secret not configured, skipping signature validation');
                return true; // Allow if no secret configured
            }
            try {
                const crypto = require('crypto');
                const basestring = `v0:${timestamp}:${payload}`;
                const mySignature = 'v0=' + crypto
                    .createHmac('sha256', signingSecret)
                    .update(basestring)
                    .digest('hex');
                // Use timing-safe comparison
                return crypto.timingSafeEqual(Buffer.from(signature, 'utf8'), Buffer.from(mySignature, 'utf8'));
            }
            catch (error) {
                this.logger.error('Failed to validate webhook signature', {
                    error: error.message,
                });
                return false;
            }
        });
    }
};
exports.SlackService = SlackService;
exports.SlackService = SlackService = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__param(0, (0, nestjs_pino_1.InjectPinoLogger)(SlackService.name)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof nestjs_pino_1.PinoLogger !== "undefined" && nestjs_pino_1.PinoLogger) === "function" ? _a : Object, typeof (_b = typeof core_config_1.ConfigService !== "undefined" && core_config_1.ConfigService) === "function" ? _b : Object, typeof (_c = typeof axios_1.HttpService !== "undefined" && axios_1.HttpService) === "function" ? _c : Object])
], SlackService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,