3036ef987996f7851205d74065911564
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const testing_1 = require("@nestjs/testing");
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const api_key_guard_1 = require("./api-key.guard");
const auth_service_1 = require("../auth.service");
const metrics_service_1 = require("../../metrics/metrics.service");
describe('ApiKeyGuard', () => {
    let guard;
    let authService;
    let reflector;
    let metricsService;
    const mockApiKey = {
        id: 'api-key-123',
        name: 'Test API Key',
        hashed_key: '', // Legacy field
        prefix: 'vapi_',
        hashed_secret: 'hashed-secret',
        scopes: ['webhooks:trigger', 'workflows:read'],
        expires_at: new Date(Date.now() + 86400000).toISOString(),
        created_by: 'user-123',
        created_at: new Date().toISOString(),
        last_used_at: null,
        updated_at: new Date().toISOString(),
    };
    const createMockExecutionContext = (headers = {}) => {
        const mockRequest = { headers, apiKey: null };
        return {
            switchToHttp: jest.fn(() => ({
                getRequest: jest.fn(() => mockRequest),
            })),
            getHandler: jest.fn(),
            getClass: jest.fn(),
        };
    };
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const module = yield testing_1.Test.createTestingModule({
            providers: [
                api_key_guard_1.ApiKeyGuard,
                {
                    provide: auth_service_1.AuthService,
                    useValue: {
                        validateApiKey: jest.fn(),
                        checkScopes: jest.fn(),
                    },
                },
                {
                    provide: core_1.Reflector,
                    useValue: {
                        getAllAndOverride: jest.fn(),
                    },
                },
                {
                    provide: metrics_service_1.MetricsService,
                    useValue: {
                        recordApiKeyValidation: jest.fn(),
                    },
                },
            ],
        }).compile();
        guard = module.get(api_key_guard_1.ApiKeyGuard);
        authService = module.get(auth_service_1.AuthService);
        reflector = module.get(core_1.Reflector);
        metricsService = module.get(metrics_service_1.MetricsService);
    }));
    it('should be defined', () => {
        expect(guard).toBeDefined();
    });
    describe('canActivate', () => {
        it('should allow access with valid API key and no required scopes', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const context = createMockExecutionContext({
                'x-api-key': 'vapi_validkey123',
            });
            authService.validateApiKey.mockResolvedValue(mockApiKey);
            reflector.getAllAndOverride.mockReturnValue([]);
            const result = yield guard.canActivate(context);
            expect(result).toBe(true);
            expect(authService.validateApiKey).toHaveBeenCalledWith('vapi_validkey123');
            expect(context.switchToHttp().getRequest().apiKey).toEqual(mockApiKey);
        }));
        it('should throw UnauthorizedException when API key is missing', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const context = createMockExecutionContext({}); // No API key header
            yield expect(guard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
            expect(() => {
                throw new common_1.UnauthorizedException('API key is required');
            }).toThrow('API key is required');
        }));
        it('should throw UnauthorizedException when API key is invalid', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const context = createMockExecutionContext({
                'x-api-key': 'invalid-key',
            });
            authService.validateApiKey.mockResolvedValue(null);
            yield expect(guard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
            expect(() => {
                throw new common_1.UnauthorizedException('Invalid or expired API key');
            }).toThrow('Invalid or expired API key');
        }));
        it('should check required scopes when specified', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const context = createMockExecutionContext({
                'x-api-key': 'vapi_validkey123',
            });
            const requiredScopes = ['admin:write'];
            authService.validateApiKey.mockResolvedValue(mockApiKey);
            authService.checkScopes.mockResolvedValue(true);
            reflector.getAllAndOverride.mockReturnValue(requiredScopes);
            const result = yield guard.canActivate(context);
            expect(result).toBe(true);
            expect(authService.checkScopes).toHaveBeenCalledWith(mockApiKey, requiredScopes);
        }));
        it('should throw UnauthorizedException when scopes are insufficient', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const context = createMockExecutionContext({
                'x-api-key': 'vapi_validkey123',
            });
            const requiredScopes = ['admin:write'];
            authService.validateApiKey.mockResolvedValue(mockApiKey);
            authService.checkScopes.mockResolvedValue(false);
            reflector.getAllAndOverride.mockReturnValue(requiredScopes);
            yield expect(guard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
            expect(authService.checkScopes).toHaveBeenCalledWith(mockApiKey, requiredScopes);
        }));
        it('should extract API key from Authorization header with Bearer token', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const context = createMockExecutionContext({
                authorization: 'Bearer vapi_bearerkey123',
            });
            authService.validateApiKey.mockResolvedValue(mockApiKey);
            reflector.getAllAndOverride.mockReturnValue([]);
            const result = yield guard.canActivate(context);
            expect(result).toBe(true);
            expect(authService.validateApiKey).toHaveBeenCalledWith('vapi_bearerkey123');
        }));
        it('should extract API key from X-API-Key header', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const context = createMockExecutionContext({
                'x-api-key': 'vapi_xapikeyheader123',
            });
            authService.validateApiKey.mockResolvedValue(mockApiKey);
            reflector.getAllAndOverride.mockReturnValue([]);
            const result = yield guard.canActivate(context);
            expect(result).toBe(true);
            expect(authService.validateApiKey).toHaveBeenCalledWith('vapi_xapikeyheader123');
        }));
        it('should handle multiple required scopes', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const context = createMockExecutionContext({
                'x-api-key': 'vapi_validkey123',
            });
            const requiredScopes = ['webhooks:trigger', 'workflows:read'];
            authService.validateApiKey.mockResolvedValue(mockApiKey);
            authService.checkScopes.mockResolvedValue(true);
            reflector.getAllAndOverride.mockReturnValue(requiredScopes);
            const result = yield guard.canActivate(context);
            expect(result).toBe(true);
            expect(authService.checkScopes).toHaveBeenCalledWith(mockApiKey, requiredScopes);
        }));
        it('should attach validated API key to request object', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const context = createMockExecutionContext({
                'x-api-key': 'vapi_validkey123',
            });
            authService.validateApiKey.mockResolvedValue(mockApiKey);
            reflector.getAllAndOverride.mockReturnValue([]);
            yield guard.canActivate(context);
            const request = context.switchToHttp().getRequest();
            expect(request.apiKey).toEqual(mockApiKey);
        }));
        it('should record API key validation metrics for successful validation', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const context = createMockExecutionContext({
                'x-api-key': 'vapi_validkey123',
            });
            authService.validateApiKey.mockResolvedValue(mockApiKey);
            reflector.getAllAndOverride.mockReturnValue([]);
            yield guard.canActivate(context);
            expect(metricsService.recordApiKeyValidation).toHaveBeenCalledWith(expect.any(Number), true);
        }));
        it('should record API key validation metrics for failed validation', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const context = createMockExecutionContext({
                'x-api-key': 'invalid-key',
            });
            authService.validateApiKey.mockResolvedValue(null);
            yield expect(guard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
            expect(metricsService.recordApiKeyValidation).toHaveBeenCalledWith(expect.any(Number), false);
        }));
        it('should record API key validation metrics when missing API key', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const context = createMockExecutionContext({});
            yield expect(guard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
            // Metrics should not be recorded when API key is missing (no validation occurred)
            expect(metricsService.recordApiKeyValidation).not.toHaveBeenCalled();
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,