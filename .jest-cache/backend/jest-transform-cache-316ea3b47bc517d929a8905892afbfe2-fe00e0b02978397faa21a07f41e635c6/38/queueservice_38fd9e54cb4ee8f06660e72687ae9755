709b1e7ade8a99fe59c4bf752b00de4d
"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueueService = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const bullmq_1 = require("@nestjs/bullmq");
const bullmq_2 = require("bullmq");
const shared_types_1 = require("@visapi/shared-types");
const core_config_1 = require("@visapi/core-config");
let QueueService = class QueueService {
    constructor(criticalQueue, defaultQueue, bulkQueue, config) {
        this.criticalQueue = criticalQueue;
        this.defaultQueue = defaultQueue;
        this.bulkQueue = bulkQueue;
        this.config = config;
    }
    getQueue(queueName) {
        switch (queueName) {
            case shared_types_1.QUEUE_NAMES.CRITICAL:
                return this.criticalQueue;
            case shared_types_1.QUEUE_NAMES.BULK:
                return this.bulkQueue;
            case shared_types_1.QUEUE_NAMES.DEFAULT:
            default:
                return this.defaultQueue;
        }
    }
    addJob(queueName, jobName, data, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const queue = this.getQueue(queueName);
            const defaultOptions = {
                attempts: this.config.queueMaxRetries,
                backoff: {
                    type: 'exponential',
                    delay: this.config.queueRetryDelay,
                },
                removeOnComplete: true,
                removeOnFail: false,
            };
            return queue.add(jobName, data, Object.assign(Object.assign(Object.assign({}, defaultOptions), options), { priority: (options === null || options === void 0 ? void 0 : options.priority) || this.getDefaultPriority(queueName) }));
        });
    }
    getJob(queueName, jobId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const queue = this.getQueue(queueName);
            return queue.getJob(jobId);
        });
    }
    getQueueMetrics(queueName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const queues = queueName
                ? [{ name: queueName, queue: this.getQueue(queueName) }]
                : [
                    { name: shared_types_1.QUEUE_NAMES.CRITICAL, queue: this.criticalQueue },
                    { name: shared_types_1.QUEUE_NAMES.DEFAULT, queue: this.defaultQueue },
                    { name: shared_types_1.QUEUE_NAMES.BULK, queue: this.bulkQueue },
                ];
            const metrics = [];
            for (const { name, queue } of queues) {
                const counts = yield queue.getJobCounts();
                metrics.push({
                    name,
                    waiting: counts.waiting || 0,
                    active: counts.active || 0,
                    completed: counts.completed || 0,
                    failed: counts.failed || 0,
                    delayed: counts.delayed || 0,
                });
            }
            return metrics;
        });
    }
    getDefaultPriority(queueName) {
        switch (queueName) {
            case shared_types_1.QUEUE_NAMES.CRITICAL:
                return shared_types_1.QUEUE_PRIORITIES.CRITICAL;
            case shared_types_1.QUEUE_NAMES.BULK:
                return shared_types_1.QUEUE_PRIORITIES.BULK;
            case shared_types_1.QUEUE_NAMES.DEFAULT:
            default:
                return shared_types_1.QUEUE_PRIORITIES.DEFAULT;
        }
    }
    pauseQueue(queueName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const queue = this.getQueue(queueName);
            yield queue.pause();
        });
    }
    resumeQueue(queueName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const queue = this.getQueue(queueName);
            yield queue.resume();
        });
    }
    drainQueue(queueName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const queue = this.getQueue(queueName);
            yield queue.drain();
        });
    }
    cleanQueue(queueName, grace, limit, status) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const queue = this.getQueue(queueName);
            return queue.clean(grace, limit, status);
        });
    }
    addRepeatableJob(queueName, jobName, data, repeatOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const queue = this.getQueue(queueName);
            // Create a unique job ID based on workflow ID to prevent duplicates
            const jobId = data.workflowId ? `cron-${data.workflowId}` : undefined;
            return queue.add(jobName, data, {
                jobId,
                repeat: {
                    pattern: repeatOptions.pattern,
                    tz: repeatOptions.tz || 'UTC',
                },
                attempts: this.config.queueMaxRetries,
                backoff: {
                    type: 'exponential',
                    delay: this.config.queueRetryDelay,
                },
                removeOnComplete: true,
                removeOnFail: false,
                priority: this.getDefaultPriority(queueName),
            });
        });
    }
    removeRepeatableJob(queueName, workflowId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const queue = this.getQueue(queueName);
            const repeatableJobs = yield queue.getRepeatableJobs();
            const jobToRemove = repeatableJobs.find((job) => job.id === `cron-${workflowId}`);
            if (jobToRemove) {
                yield queue.removeRepeatableByKey(jobToRemove.key);
            }
        });
    }
    getRepeatableJobs(queueName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const queue = this.getQueue(queueName);
            return queue.getRepeatableJobs();
        });
    }
};
exports.QueueService = QueueService;
exports.QueueService = QueueService = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__param(0, (0, bullmq_1.InjectQueue)(shared_types_1.QUEUE_NAMES.CRITICAL)),
    tslib_1.__param(1, (0, bullmq_1.InjectQueue)(shared_types_1.QUEUE_NAMES.DEFAULT)),
    tslib_1.__param(2, (0, bullmq_1.InjectQueue)(shared_types_1.QUEUE_NAMES.BULK)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof bullmq_2.Queue !== "undefined" && bullmq_2.Queue) === "function" ? _a : Object, typeof (_b = typeof bullmq_2.Queue !== "undefined" && bullmq_2.Queue) === "function" ? _b : Object, typeof (_c = typeof bullmq_2.Queue !== "undefined" && bullmq_2.Queue) === "function" ? _c : Object, typeof (_d = typeof core_config_1.ConfigService !== "undefined" && core_config_1.ConfigService) === "function" ? _d : Object])
], QueueService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZhZGltL1Byb2plY3RzL1Zpc0FQSS9hcHBzL2JhY2tlbmQvc3JjL3F1ZXVlL3F1ZXVlLnNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBNEM7QUFDNUMsMkNBQTZDO0FBQzdDLG1DQUFvQztBQUNwQyx1REFBcUU7QUFDckUscURBQW9EO0FBWTdDLElBQU0sWUFBWSxHQUFsQixNQUFNLFlBQVk7SUFDdkIsWUFDNkMsYUFBb0IsRUFDckIsWUFBbUIsRUFDdEIsU0FBZ0IsRUFDdEMsTUFBcUI7UUFISyxrQkFBYSxHQUFiLGFBQWEsQ0FBTztRQUNyQixpQkFBWSxHQUFaLFlBQVksQ0FBTztRQUN0QixjQUFTLEdBQVQsU0FBUyxDQUFPO1FBQ3RDLFdBQU0sR0FBTixNQUFNLENBQWU7SUFDckMsQ0FBQztJQUVJLFFBQVEsQ0FBQyxTQUFpQjtRQUNoQyxRQUFRLFNBQVMsRUFBRSxDQUFDO1lBQ2xCLEtBQUssMEJBQVcsQ0FBQyxRQUFRO2dCQUN2QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7WUFDNUIsS0FBSywwQkFBVyxDQUFDLElBQUk7Z0JBQ25CLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUN4QixLQUFLLDBCQUFXLENBQUMsT0FBTyxDQUFDO1lBQ3pCO2dCQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztRQUM3QixDQUFDO0lBQ0gsQ0FBQztJQUVLLE1BQU0sQ0FDVixTQUFpQixFQUNqQixPQUFlLEVBQ2YsSUFBUyxFQUNULE9BTUM7O1lBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUV2QyxNQUFNLGNBQWMsR0FBRztnQkFDckIsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZTtnQkFDckMsT0FBTyxFQUFFO29CQUNQLElBQUksRUFBRSxhQUFhO29CQUNuQixLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlO2lCQUNuQztnQkFDRCxnQkFBZ0IsRUFBRSxJQUFJO2dC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bUJBQW1CLENBQ3ZCLFNBQWlCLEVBQ2pCLFVBQWtCOztZQUVsQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sY0FBYyxHQUFHLE1BQU0sS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFFdkQsTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FDckMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssUUFBUSxVQUFVLEVBQUUsQ0FDekMsQ0FBQztZQUVGLElBQUksV0FBVyxFQUFFLENBQUM7Z0JBQ2hCLE1BQU0sS0FBSyxDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNyRCxDQUFDO1FBQ0gsQ0FBQztLQUFBO0lBRUssaUJBQWlCLENBQUMsU0FBaUI7O1lBQ3ZDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdkMsT0FBTyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUNuQyxDQUFDO0tBQUE7Q0FDRixDQUFBO0FBM0tZLG9DQUFZO3VCQUFaLFlBQVk7SUFEeEIsSUFBQSxtQkFBVSxHQUFFO0lBR1IsbUJBQUEsSUFBQSxvQkFBVyxFQUFDLDBCQUFXLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDakMsbUJBQUEsSUFBQSxvQkFBVyxFQUFDLDBCQUFXLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDaEMsbUJBQUEsSUFBQSxvQkFBVyxFQUFDLDBCQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7aUVBRjRCLGNBQUssb0JBQUwsY0FBSyxvREFDUCxjQUFLLG9CQUFMLGNBQUssb0RBQ1gsY0FBSyxvQkFBTCxjQUFLLG9EQUM5QiwyQkFBYSxvQkFBYiwyQkFBYTtHQUw3QixZQUFZLENBMkt4QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvdmFkaW0vUHJvamVjdHMvVmlzQVBJL2FwcHMvYmFja2VuZC9zcmMvcXVldWUvcXVldWUuc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0UXVldWUgfSBmcm9tICdAbmVzdGpzL2J1bGxtcSc7XG5pbXBvcnQgeyBRdWV1ZSwgSm9iIH0gZnJvbSAnYnVsbG1xJztcbmltcG9ydCB7IFFVRVVFX05BTUVTLCBRVUVVRV9QUklPUklUSUVTIH0gZnJvbSAnQHZpc2FwaS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHsgQ29uZmlnU2VydmljZSB9IGZyb20gJ0B2aXNhcGkvY29yZS1jb25maWcnO1xuXG5pbnRlcmZhY2UgUXVldWVNZXRyaWNzIHtcbiAgbmFtZTogc3RyaW5nO1xuICB3YWl0aW5nOiBudW1iZXI7XG4gIGFjdGl2ZTogbnVtYmVyO1xuICBjb21wbGV0ZWQ6IG51bWJlcjtcbiAgZmFpbGVkOiBudW1iZXI7XG4gIGRlbGF5ZWQ6IG51bWJlcjtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFF1ZXVlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3RRdWV1ZShRVUVVRV9OQU1FUy5DUklUSUNBTCkgcHJpdmF0ZSBjcml0aWNhbFF1ZXVlOiBRdWV1ZSxcbiAgICBASW5qZWN0UXVldWUoUVVFVUVfTkFNRVMuREVGQVVMVCkgcHJpdmF0ZSBkZWZhdWx0UXVldWU6IFF1ZXVlLFxuICAgIEBJbmplY3RRdWV1ZShRVUVVRV9OQU1FUy5CVUxLKSBwcml2YXRlIGJ1bGtRdWV1ZTogUXVldWUsXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb25maWc6IENvbmZpZ1NlcnZpY2VcbiAgKSB7fVxuXG4gIHByaXZhdGUgZ2V0UXVldWUocXVldWVOYW1lOiBzdHJpbmcpOiBRdWV1ZSB7XG4gICAgc3dpdGNoIChxdWV1ZU5hbWUpIHtcbiAgICAgIGNhc2UgUVVFVUVfTkFNRVMuQ1JJVElDQUw6XG4gICAgICAgIHJldHVybiB0aGlzLmNyaXRpY2FsUXVldWU7XG4gICAgICBjYXNlIFFVRVVFX05BTUVTLkJVTEs6XG4gICAgICAgIHJldHVybiB0aGlzLmJ1bGtRdWV1ZTtcbiAgICAgIGNhc2UgUVVFVUVfTkFNRVMuREVGQVVMVDpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRRdWV1ZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBhZGRKb2IoXG4gICAgcXVldWVOYW1lOiBzdHJpbmcsXG4gICAgam9iTmFtZTogc3RyaW5nLFxuICAgIGRhdGE6IGFueSxcbiAgICBvcHRpb25zPzoge1xuICAgICAgZGVsYXk/OiBudW1iZXI7XG4gICAgICBhdHRlbXB0cz86IG51bWJlcjtcbiAgICAgIHByaW9yaXR5PzogbnVtYmVyO1xuICAgICAgcmVtb3ZlT25Db21wbGV0ZT86IGJvb2xlYW47XG4gICAgICByZW1vdmVPbkZhaWw/OiBib29sZWFuO1xuICAgIH1cbiAgKTogUHJvbWlzZTxKb2I+IHtcbiAgICBjb25zdCBxdWV1ZSA9IHRoaXMuZ2V0UXVldWUocXVldWVOYW1lKTtcblxuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgYXR0ZW1wdHM6IHRoaXMuY29uZmlnLnF1ZXVlTWF4UmV0cmllcyxcbiAgICAgIGJhY2tvZmY6IHtcbiAgICAgICAgdHlwZTogJ2V4cG9uZW50aWFsJyxcbiAgICAgICAgZGVsYXk6IHRoaXMuY29uZmlnLnF1ZXVlUmV0cnlEZWxheSxcbiAgICAgIH0sXG4gICAgICByZW1vdmVPbkNvbXBsZXRlOiB0cnVlLFxuICAgICAgcmVtb3ZlT25GYWlsOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHF1ZXVlLmFkZChqb2JOYW1lLCBkYXRhLCB7XG4gICAgICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBwcmlvcml0eTogb3B0aW9ucz8ucHJpb3JpdHkgfHwgdGhpcy5nZXREZWZhdWx0UHJpb3JpdHkocXVldWVOYW1lKSxcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGdldEpvYihxdWV1ZU5hbWU6IHN0cmluZywgam9iSWQ6IHN0cmluZyk6IFByb21pc2U8Sm9iIHwgdW5kZWZpbmVkPiB7XG4gICAgY29uc3QgcXVldWUgPSB0aGlzLmdldFF1ZXVlKHF1ZXVlTmFtZSk7XG4gICAgcmV0dXJuIHF1ZXVlLmdldEpvYihqb2JJZCk7XG4gIH1cblxuICBhc3luYyBnZXRRdWV1ZU1ldHJpY3MocXVldWVOYW1lPzogc3RyaW5nKTogUHJvbWlzZTxRdWV1ZU1ldHJpY3NbXT4ge1xuICAgIGNvbnN0IHF1ZXVlcyA9IHF1ZXVlTmFtZVxuICAgICAgPyBbeyBuYW1lOiBxdWV1ZU5hbWUsIHF1ZXVlOiB0aGlzLmdldFF1ZXVlKHF1ZXVlTmFtZSkgfV1cbiAgICAgIDogW1xuICAgICAgICAgIHsgbmFtZTogUVVFVUVfTkFNRVMuQ1JJVElDQUwsIHF1ZXVlOiB0aGlzLmNyaXRpY2FsUXVldWUgfSxcbiAgICAgICAgICB7IG5hbWU6IFFVRVVFX05BTUVTLkRFRkFVTFQsIHF1ZXVlOiB0aGlzLmRlZmF1bHRRdWV1ZSB9LFxuICAgICAgICAgIHsgbmFtZTogUVVFVUVfTkFNRVMuQlVMSywgcXVldWU6IHRoaXMuYnVsa1F1ZXVlIH0sXG4gICAgICAgIF07XG5cbiAgICBjb25zdCBtZXRyaWNzOiBRdWV1ZU1ldHJpY3NbXSA9IFtdO1xuXG4gICAgZm9yIChjb25zdCB7IG5hbWUsIHF1ZXVlIH0gb2YgcXVldWVzKSB7XG4gICAgICBjb25zdCBjb3VudHMgPSBhd2FpdCBxdWV1ZS5nZXRKb2JDb3VudHMoKTtcbiAgICAgIG1ldHJpY3MucHVzaCh7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHdhaXRpbmc6IGNvdW50cy53YWl0aW5nIHx8IDAsXG4gICAgICAgIGFjdGl2ZTogY291bnRzLmFjdGl2ZSB8fCAwLFxuICAgICAgICBjb21wbGV0ZWQ6IGNvdW50cy5jb21wbGV0ZWQgfHwgMCxcbiAgICAgICAgZmFpbGVkOiBjb3VudHMuZmFpbGVkIHx8IDAsXG4gICAgICAgIGRlbGF5ZWQ6IGNvdW50cy5kZWxheWVkIHx8IDAsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWV0cmljcztcbiAgfVxuXG5cbiAgcHJpdmF0ZSBnZXREZWZhdWx0UHJpb3JpdHkocXVldWVOYW1lOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIHN3aXRjaCAocXVldWVOYW1lKSB7XG4gICAgICBjYXNlIFFVRVVFX05BTUVTLkNSSVRJQ0FMOlxuICAgICAgICByZXR1cm4gUVVFVUVfUFJJT1JJVElFUy5DUklUSUNBTDtcbiAgICAgIGNhc2UgUVVFVUVfTkFNRVMuQlVMSzpcbiAgICAgICAgcmV0dXJuIFFVRVVFX1BSSU9SSVRJRVMuQlVMSztcbiAgICAgIGNhc2UgUVVFVUVfTkFNRVMuREVGQVVMVDpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBRVUVVRV9QUklPUklUSUVTLkRFRkFVTFQ7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcGF1c2VRdWV1ZShxdWV1ZU5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHF1ZXVlID0gdGhpcy5nZXRRdWV1ZShxdWV1ZU5hbWUpO1xuICAgIGF3YWl0IHF1ZXVlLnBhdXNlKCk7XG4gIH1cblxuICBhc3luYyByZXN1bWVRdWV1ZShxdWV1ZU5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHF1ZXVlID0gdGhpcy5nZXRRdWV1ZShxdWV1ZU5hbWUpO1xuICAgIGF3YWl0IHF1ZXVlLnJlc3VtZSgpO1xuICB9XG5cbiAgYXN5bmMgZHJhaW5RdWV1ZShxdWV1ZU5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHF1ZXVlID0gdGhpcy5nZXRRdWV1ZShxdWV1ZU5hbWUpO1xuICAgIGF3YWl0IHF1ZXVlLmRyYWluKCk7XG4gIH1cblxuICBhc3luYyBjbGVhblF1ZXVlKFxuICAgIHF1ZXVlTmFtZTogc3RyaW5nLFxuICAgIGdyYWNlOiBudW1iZXIsXG4gICAgbGltaXQ6IG51bWJlcixcbiAgICBzdGF0dXM6ICdjb21wbGV0ZWQnIHwgJ3dhaXQnIHwgJ2FjdGl2ZScgfCAnZGVsYXllZCcgfCAnZmFpbGVkJ1xuICApOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgY29uc3QgcXVldWUgPSB0aGlzLmdldFF1ZXVlKHF1ZXVlTmFtZSk7XG4gICAgcmV0dXJuIHF1ZXVlLmNsZWFuKGdyYWNlLCBsaW1pdCwgc3RhdHVzKTtcbiAgfVxuXG4gIGFzeW5jIGFkZFJlcGVhdGFibGVKb2IoXG4gICAgcXVldWVOYW1lOiBzdHJpbmcsXG4gICAgam9iTmFtZTogc3RyaW5nLFxuICAgIGRhdGE6IGFueSxcbiAgICByZXBlYXRPcHRpb25zOiB7XG4gICAgICBwYXR0ZXJuOiBzdHJpbmc7IC8vIENyb24gZXhwcmVzc2lvblxuICAgICAgdHo/OiBzdHJpbmc7IC8vIFRpbWV6b25lXG4gICAgfVxuICApOiBQcm9taXNlPEpvYj4ge1xuICAgIGNvbnN0IHF1ZXVlID0gdGhpcy5nZXRRdWV1ZShxdWV1ZU5hbWUpO1xuXG4gICAgLy8gQ3JlYXRlIGEgdW5pcXVlIGpvYiBJRCBiYXNlZCBvbiB3b3JrZmxvdyBJRCB0byBwcmV2ZW50IGR1cGxpY2F0ZXNcbiAgICBjb25zdCBqb2JJZCA9IGRhdGEud29ya2Zsb3dJZCA/IGBjcm9uLSR7ZGF0YS53b3JrZmxvd0lkfWAgOiB1bmRlZmluZWQ7XG5cbiAgICByZXR1cm4gcXVldWUuYWRkKGpvYk5hbWUsIGRhdGEsIHtcbiAgICAgIGpvYklkLFxuICAgICAgcmVwZWF0OiB7XG4gICAgICAgIHBhdHRlcm46IHJlcGVhdE9wdGlvbnMucGF0dGVybixcbiAgICAgICAgdHo6IHJlcGVhdE9wdGlvbnMudHogfHwgJ1VUQycsXG4gICAgICB9LFxuICAgICAgYXR0ZW1wdHM6IHRoaXMuY29uZmlnLnF1ZXVlTWF4UmV0cmllcyxcbiAgICAgIGJhY2tvZmY6IHtcbiAgICAgICAgdHlwZTogJ2V4cG9uZW50aWFsJyxcbiAgICAgICAgZGVsYXk6IHRoaXMuY29uZmlnLnF1ZXVlUmV0cnlEZWxheSxcbiAgICAgIH0sXG4gICAgICByZW1vdmVPbkNvbXBsZXRlOiB0cnVlLFxuICAgICAgcmVtb3ZlT25GYWlsOiBmYWxzZSxcbiAgICAgIHByaW9yaXR5OiB0aGlzLmdldERlZmF1bHRQcmlvcml0eShxdWV1ZU5hbWUpLFxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgcmVtb3ZlUmVwZWF0YWJsZUpvYihcbiAgICBxdWV1ZU5hbWU6IHN0cmluZyxcbiAgICB3b3JrZmxvd0lkOiBzdHJpbmdcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgcXVldWUgPSB0aGlzLmdldFF1ZXVlKHF1ZXVlTmFtZSk7XG4gICAgY29uc3QgcmVwZWF0YWJsZUpvYnMgPSBhd2FpdCBxdWV1ZS5nZXRSZXBlYXRhYmxlSm9icygpO1xuICAgIFxuICAgIGNvbnN0IGpvYlRvUmVtb3ZlID0gcmVwZWF0YWJsZUpvYnMuZmluZChcbiAgICAgIChqb2IpID0+IGpvYi5pZCA9PT0gYGNyb24tJHt3b3JrZmxvd0lkfWBcbiAgICApO1xuXG4gICAgaWYgKGpvYlRvUmVtb3ZlKSB7XG4gICAgICBhd2FpdCBxdWV1ZS5yZW1vdmVSZXBlYXRhYmxlQnlLZXkoam9iVG9SZW1vdmUua2V5KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRSZXBlYXRhYmxlSm9icyhxdWV1ZU5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55W10+IHtcbiAgICBjb25zdCBxdWV1ZSA9IHRoaXMuZ2V0UXVldWUocXVldWVOYW1lKTtcbiAgICByZXR1cm4gcXVldWUuZ2V0UmVwZWF0YWJsZUpvYnMoKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9