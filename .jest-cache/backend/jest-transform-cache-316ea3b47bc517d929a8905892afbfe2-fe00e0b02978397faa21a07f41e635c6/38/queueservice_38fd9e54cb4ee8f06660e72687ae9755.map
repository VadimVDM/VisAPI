{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/queue/queue.service.ts","mappings":";;;;;AAAA,2CAA4C;AAC5C,2CAA6C;AAC7C,mCAAoC;AACpC,uDAAqE;AACrE,qDAAoD;AAY7C,IAAM,YAAY,GAAlB,MAAM,YAAY;IACvB,YAC6C,aAAoB,EACrB,YAAmB,EACtB,SAAgB,EACtC,MAAqB;QAHK,kBAAa,GAAb,aAAa,CAAO;QACrB,iBAAY,GAAZ,YAAY,CAAO;QACtB,cAAS,GAAT,SAAS,CAAO;QACtC,WAAM,GAAN,MAAM,CAAe;IACrC,CAAC;IAEI,QAAQ,CAAC,SAAiB;QAChC,QAAQ,SAAS,EAAE,CAAC;YAClB,KAAK,0BAAW,CAAC,QAAQ;gBACvB,OAAO,IAAI,CAAC,aAAa,CAAC;YAC5B,KAAK,0BAAW,CAAC,IAAI;gBACnB,OAAO,IAAI,CAAC,SAAS,CAAC;YACxB,KAAK,0BAAW,CAAC,OAAO,CAAC;YACzB;gBACE,OAAO,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;IACH,CAAC;IAEK,MAAM,CACV,SAAiB,EACjB,OAAe,EACf,IAAS,EACT,OAMC;;YAED,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAEvC,MAAM,cAAc,GAAG;gBACrB,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe;gBACrC,OAAO,EAAE;oBACP,IAAI,EAAE,aAAa;oBACnB,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe;iBACnC;gBACD,gBAAgB,EAAE,IAAI;gBACtB,YAAY,EAAE,KAAK;aACpB,CAAC;YAEF,OAAO,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,gDACzB,cAAc,GACd,OAAO,KACV,QAAQ,EAAE,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,KAAI,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,IACjE,CAAC;QACL,CAAC;KAAA;IAEK,MAAM,CAAC,SAAiB,EAAE,KAAa;;YAC3C,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACvC,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;KAAA;IAEK,eAAe,CAAC,SAAkB;;YACtC,MAAM,MAAM,GAAG,SAAS;gBACtB,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;gBACxD,CAAC,CAAC;oBACE,EAAE,IAAI,EAAE,0BAAW,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,aAAa,EAAE;oBACzD,EAAE,IAAI,EAAE,0BAAW,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,YAAY,EAAE;oBACvD,EAAE,IAAI,EAAE,0BAAW,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,EAAE;iBAClD,CAAC;YAEN,MAAM,OAAO,GAAmB,EAAE,CAAC;YAEnC,KAAK,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,MAAM,EAAE,CAAC;gBACrC,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,YAAY,EAAE,CAAC;gBAC1C,OAAO,CAAC,IAAI,CAAC;oBACX,IAAI;oBACJ,OAAO,EAAE,MAAM,CAAC,OAAO,IAAI,CAAC;oBAC5B,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,CAAC;oBAC1B,SAAS,EAAE,MAAM,CAAC,SAAS,IAAI,CAAC;oBAChC,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,CAAC;oBAC1B,OAAO,EAAE,MAAM,CAAC,OAAO,IAAI,CAAC;iBAC7B,CAAC,CAAC;YACL,CAAC;YAED,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;IAGO,kBAAkB,CAAC,SAAiB;QAC1C,QAAQ,SAAS,EAAE,CAAC;YAClB,KAAK,0BAAW,CAAC,QAAQ;gBACvB,OAAO,+BAAgB,CAAC,QAAQ,CAAC;YACnC,KAAK,0BAAW,CAAC,IAAI;gBACnB,OAAO,+BAAgB,CAAC,IAAI,CAAC;YAC/B,KAAK,0BAAW,CAAC,OAAO,CAAC;YACzB;gBACE,OAAO,+BAAgB,CAAC,OAAO,CAAC;QACpC,CAAC;IACH,CAAC;IAEK,UAAU,CAAC,SAAiB;;YAChC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACvC,MAAM,KAAK,CAAC,KAAK,EAAE,CAAC;QACtB,CAAC;KAAA;IAEK,WAAW,CAAC,SAAiB;;YACjC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACvC,MAAM,KAAK,CAAC,MAAM,EAAE,CAAC;QACvB,CAAC;KAAA;IAEK,UAAU,CAAC,SAAiB;;YAChC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACvC,MAAM,KAAK,CAAC,KAAK,EAAE,CAAC;QACtB,CAAC;KAAA;IAEK,UAAU,CACd,SAAiB,EACjB,KAAa,EACb,KAAa,EACb,MAA8D;;YAE9D,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACvC,OAAO,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAC3C,CAAC;KAAA;IAEK,gBAAgB,CACpB,SAAiB,EACjB,OAAe,EACf,IAAS,EACT,aAGC;;YAED,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAEvC,oEAAoE;YACpE,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;YAEtE,OAAO,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE;gBAC9B,KAAK;gBACL,MAAM,EAAE;oBACN,OAAO,EAAE,aAAa,CAAC,OAAO;oBAC9B,EAAE,EAAE,aAAa,CAAC,EAAE,IAAI,KAAK;iBAC9B;gBACD,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe;gBACrC,OAAO,EAAE;oBACP,IAAI,EAAE,aAAa;oBACnB,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe;iBACnC;gBACD,gBAAgB,EAAE,IAAI;gBACtB,YAAY,EAAE,KAAK;gBACnB,QAAQ,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC;aAC7C,CAAC,CAAC;QACL,CAAC;KAAA;IAEK,mBAAmB,CACvB,SAAiB,EACjB,UAAkB;;YAElB,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACvC,MAAM,cAAc,GAAG,MAAM,KAAK,CAAC,iBAAiB,EAAE,CAAC;YAEvD,MAAM,WAAW,GAAG,cAAc,CAAC,IAAI,CACrC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,QAAQ,UAAU,EAAE,CACzC,CAAC;YAEF,IAAI,WAAW,EAAE,CAAC;gBAChB,MAAM,KAAK,CAAC,qBAAqB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACrD,CAAC;QACH,CAAC;KAAA;IAEK,iBAAiB,CAAC,SAAiB;;YACvC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACvC,OAAO,KAAK,CAAC,iBAAiB,EAAE,CAAC;QACnC,CAAC;KAAA;CACF,CAAA;AA3KY,oCAAY;uBAAZ,YAAY;IADxB,IAAA,mBAAU,GAAE;IAGR,mBAAA,IAAA,oBAAW,EAAC,0BAAW,CAAC,QAAQ,CAAC,CAAA;IACjC,mBAAA,IAAA,oBAAW,EAAC,0BAAW,CAAC,OAAO,CAAC,CAAA;IAChC,mBAAA,IAAA,oBAAW,EAAC,0BAAW,CAAC,IAAI,CAAC,CAAA;iEAF4B,cAAK,oBAAL,cAAK,oDACP,cAAK,oBAAL,cAAK,oDACX,cAAK,oBAAL,cAAK,oDAC9B,2BAAa,oBAAb,2BAAa;GAL7B,YAAY,CA2KxB","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/queue/queue.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectQueue } from '@nestjs/bullmq';\nimport { Queue, Job } from 'bullmq';\nimport { QUEUE_NAMES, QUEUE_PRIORITIES } from '@visapi/shared-types';\nimport { ConfigService } from '@visapi/core-config';\n\ninterface QueueMetrics {\n  name: string;\n  waiting: number;\n  active: number;\n  completed: number;\n  failed: number;\n  delayed: number;\n}\n\n@Injectable()\nexport class QueueService {\n  constructor(\n    @InjectQueue(QUEUE_NAMES.CRITICAL) private criticalQueue: Queue,\n    @InjectQueue(QUEUE_NAMES.DEFAULT) private defaultQueue: Queue,\n    @InjectQueue(QUEUE_NAMES.BULK) private bulkQueue: Queue,\n    private readonly config: ConfigService\n  ) {}\n\n  private getQueue(queueName: string): Queue {\n    switch (queueName) {\n      case QUEUE_NAMES.CRITICAL:\n        return this.criticalQueue;\n      case QUEUE_NAMES.BULK:\n        return this.bulkQueue;\n      case QUEUE_NAMES.DEFAULT:\n      default:\n        return this.defaultQueue;\n    }\n  }\n\n  async addJob(\n    queueName: string,\n    jobName: string,\n    data: any,\n    options?: {\n      delay?: number;\n      attempts?: number;\n      priority?: number;\n      removeOnComplete?: boolean;\n      removeOnFail?: boolean;\n    }\n  ): Promise<Job> {\n    const queue = this.getQueue(queueName);\n\n    const defaultOptions = {\n      attempts: this.config.queueMaxRetries,\n      backoff: {\n        type: 'exponential',\n        delay: this.config.queueRetryDelay,\n      },\n      removeOnComplete: true,\n      removeOnFail: false,\n    };\n\n    return queue.add(jobName, data, {\n      ...defaultOptions,\n      ...options,\n      priority: options?.priority || this.getDefaultPriority(queueName),\n    });\n  }\n\n  async getJob(queueName: string, jobId: string): Promise<Job | undefined> {\n    const queue = this.getQueue(queueName);\n    return queue.getJob(jobId);\n  }\n\n  async getQueueMetrics(queueName?: string): Promise<QueueMetrics[]> {\n    const queues = queueName\n      ? [{ name: queueName, queue: this.getQueue(queueName) }]\n      : [\n          { name: QUEUE_NAMES.CRITICAL, queue: this.criticalQueue },\n          { name: QUEUE_NAMES.DEFAULT, queue: this.defaultQueue },\n          { name: QUEUE_NAMES.BULK, queue: this.bulkQueue },\n        ];\n\n    const metrics: QueueMetrics[] = [];\n\n    for (const { name, queue } of queues) {\n      const counts = await queue.getJobCounts();\n      metrics.push({\n        name,\n        waiting: counts.waiting || 0,\n        active: counts.active || 0,\n        completed: counts.completed || 0,\n        failed: counts.failed || 0,\n        delayed: counts.delayed || 0,\n      });\n    }\n\n    return metrics;\n  }\n\n\n  private getDefaultPriority(queueName: string): number {\n    switch (queueName) {\n      case QUEUE_NAMES.CRITICAL:\n        return QUEUE_PRIORITIES.CRITICAL;\n      case QUEUE_NAMES.BULK:\n        return QUEUE_PRIORITIES.BULK;\n      case QUEUE_NAMES.DEFAULT:\n      default:\n        return QUEUE_PRIORITIES.DEFAULT;\n    }\n  }\n\n  async pauseQueue(queueName: string): Promise<void> {\n    const queue = this.getQueue(queueName);\n    await queue.pause();\n  }\n\n  async resumeQueue(queueName: string): Promise<void> {\n    const queue = this.getQueue(queueName);\n    await queue.resume();\n  }\n\n  async drainQueue(queueName: string): Promise<void> {\n    const queue = this.getQueue(queueName);\n    await queue.drain();\n  }\n\n  async cleanQueue(\n    queueName: string,\n    grace: number,\n    limit: number,\n    status: 'completed' | 'wait' | 'active' | 'delayed' | 'failed'\n  ): Promise<string[]> {\n    const queue = this.getQueue(queueName);\n    return queue.clean(grace, limit, status);\n  }\n\n  async addRepeatableJob(\n    queueName: string,\n    jobName: string,\n    data: any,\n    repeatOptions: {\n      pattern: string; // Cron expression\n      tz?: string; // Timezone\n    }\n  ): Promise<Job> {\n    const queue = this.getQueue(queueName);\n\n    // Create a unique job ID based on workflow ID to prevent duplicates\n    const jobId = data.workflowId ? `cron-${data.workflowId}` : undefined;\n\n    return queue.add(jobName, data, {\n      jobId,\n      repeat: {\n        pattern: repeatOptions.pattern,\n        tz: repeatOptions.tz || 'UTC',\n      },\n      attempts: this.config.queueMaxRetries,\n      backoff: {\n        type: 'exponential',\n        delay: this.config.queueRetryDelay,\n      },\n      removeOnComplete: true,\n      removeOnFail: false,\n      priority: this.getDefaultPriority(queueName),\n    });\n  }\n\n  async removeRepeatableJob(\n    queueName: string,\n    workflowId: string\n  ): Promise<void> {\n    const queue = this.getQueue(queueName);\n    const repeatableJobs = await queue.getRepeatableJobs();\n    \n    const jobToRemove = repeatableJobs.find(\n      (job) => job.id === `cron-${workflowId}`\n    );\n\n    if (jobToRemove) {\n      await queue.removeRepeatableByKey(jobToRemove.key);\n    }\n  }\n\n  async getRepeatableJobs(queueName: string): Promise<any[]> {\n    const queue = this.getQueue(queueName);\n    return queue.getRepeatableJobs();\n  }\n}\n"],"version":3}