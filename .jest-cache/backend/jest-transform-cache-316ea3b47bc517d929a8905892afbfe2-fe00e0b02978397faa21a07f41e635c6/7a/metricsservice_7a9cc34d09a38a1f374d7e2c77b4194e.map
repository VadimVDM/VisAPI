{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/metrics/metrics.service.ts","mappings":";;;;;AAAA,2CAA4C;AAC5C,mEAA2D;AAC3D,6CAAwD;AAGjD,IAAM,cAAc,GAApB,MAAM,cAAc;IACzB,YAES,mBAAsC,EAGtC,iBAAkC,EAGlC,qBAAoC,EAGpC,iBAAoC,EAGpC,YAA6B,EAG7B,eAA8B,EAG9B,qBAAsC,EAGtC,yBAA4C,EAG5C,wBAA2C,EAG3C,oBAAqC,EAGrC,yBAA0C;QA9B1C,wBAAmB,GAAnB,mBAAmB,CAAmB;QAGtC,sBAAiB,GAAjB,iBAAiB,CAAiB;QAGlC,0BAAqB,GAArB,qBAAqB,CAAe;QAGpC,sBAAiB,GAAjB,iBAAiB,CAAmB;QAGpC,iBAAY,GAAZ,YAAY,CAAiB;QAG7B,oBAAe,GAAf,eAAe,CAAe;QAG9B,0BAAqB,GAArB,qBAAqB,CAAiB;QAGtC,8BAAyB,GAAzB,yBAAyB,CAAmB;QAG5C,6BAAwB,GAAxB,wBAAwB,CAAmB;QAG3C,yBAAoB,GAApB,oBAAoB,CAAiB;QAGrC,8BAAyB,GAAzB,yBAAyB,CAAiB;IAChD,CAAC;IAEJ,iBAAiB,CACf,MAAc,EACd,KAAa,EACb,UAAkB,EAClB,QAAgB;QAEhB,MAAM,MAAM,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,CAAC;QAErE,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,qBAAqB;QAChF,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAED,0BAA0B;QACxB,IAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC;IACnC,CAAC;IAED,0BAA0B;QACxB,IAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC;IACnC,CAAC;IAED,kBAAkB,CAChB,OAAe,EACf,KAAa,EACb,OAAgB,EAChB,QAAgB;QAEhB,MAAM,MAAM,GAAG,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;QAEzE,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,GAAG,IAAI,CAAC,CAAC;QAExD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QACtD,CAAC;IACH,CAAC;IAED,aAAa,CAAC,KAAa,EAAE,QAAgB,EAAE,KAAa;QAC1D,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;IACvD,CAAC;IAED,yBAAyB,CAAC,MAA6B;QACrD,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IAC7C,CAAC;IAED,uBAAuB,CACrB,UAAkB,EAClB,QAAgB,EAChB,OAAgB;QAEhB,IAAI,CAAC,yBAAyB,CAAC,OAAO,CACpC,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,EACxD,QAAQ,GAAG,IAAI,CAChB,CAAC;IACJ,CAAC;IAED,sBAAsB,CAAC,QAAgB,EAAE,KAAc;QACrD,IAAI,CAAC,wBAAwB,CAAC,OAAO,CACnC,EAAE,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,EAC3B,QAAQ,GAAG,IAAI,CAChB,CAAC;IACJ,CAAC;IAED,oBAAoB,CAAC,SAAiB,EAAE,OAAgB;QACtD,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAE1E,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;CACF,CAAA;AAxGY,wCAAc;yBAAd,cAAc;IAD1B,IAAA,mBAAU,GAAE;IAGR,mBAAA,IAAA,gCAAY,EAAC,+BAA+B,CAAC,CAAA;IAG7C,mBAAA,IAAA,gCAAY,EAAC,qBAAqB,CAAC,CAAA;IAGnC,mBAAA,IAAA,gCAAY,EAAC,yBAAyB,CAAC,CAAA;IAGvC,mBAAA,IAAA,gCAAY,EAAC,qBAAqB,CAAC,CAAA;IAGnC,mBAAA,IAAA,gCAAY,EAAC,gBAAgB,CAAC,CAAA;IAG9B,mBAAA,IAAA,gCAAY,EAAC,mBAAmB,CAAC,CAAA;IAGjC,mBAAA,IAAA,gCAAY,EAAC,yBAAyB,CAAC,CAAA;IAGvC,mBAAA,IAAA,gCAAY,EAAC,qCAAqC,CAAC,CAAA;IAGnD,mBAAA,IAAA,gCAAY,EAAC,qCAAqC,CAAC,CAAA;IAGnD,mBAAA,IAAA,gCAAY,EAAC,wBAAwB,CAAC,CAAA;IAGtC,oBAAA,IAAA,gCAAY,EAAC,8BAA8B,CAAC,CAAA;iEA7BjB,uBAAS,oBAAT,uBAAS,oDAGX,qBAAO,oBAAP,qBAAO,oDAGH,mBAAK,oBAAL,mBAAK,oDAGT,uBAAS,oBAAT,uBAAS,oDAGd,qBAAO,oBAAP,qBAAO,oDAGJ,mBAAK,oBAAL,mBAAK,oDAGC,qBAAO,oBAAP,qBAAO,oDAGH,uBAAS,oBAAT,uBAAS,oDAGV,uBAAS,oBAAT,uBAAS,oDAGb,qBAAO,oBAAP,qBAAO,oDAGF,qBAAO,oBAAP,qBAAO;GAjChC,cAAc,CAwG1B","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/metrics/metrics.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectMetric } from '@willsoto/nestjs-prometheus';\nimport { Counter, Histogram, Gauge } from 'prom-client';\n\n@Injectable()\nexport class MetricsService {\n  constructor(\n    @InjectMetric('http_request_duration_seconds')\n    public httpRequestDuration: Histogram<string>,\n\n    @InjectMetric('http_requests_total')\n    public httpRequestsTotal: Counter<string>,\n\n    @InjectMetric('http_active_connections')\n    public httpActiveConnections: Gauge<string>,\n\n    @InjectMetric('job_latency_seconds')\n    public jobLatencySeconds: Histogram<string>,\n\n    @InjectMetric('job_fail_total')\n    public jobFailTotal: Counter<string>,\n\n    @InjectMetric('queue_depth_total')\n    public queueDepthTotal: Gauge<string>,\n\n    @InjectMetric('webhook_processed_total')\n    public webhookProcessedTotal: Counter<string>,\n\n    @InjectMetric('workflow_execution_duration_seconds')\n    public workflowExecutionDuration: Histogram<string>,\n\n    @InjectMetric('api_key_validation_duration_seconds')\n    public apiKeyValidationDuration: Histogram<string>,\n\n    @InjectMetric('redis_operations_total')\n    public redisOperationsTotal: Counter<string>,\n\n    @InjectMetric('redis_operation_errors_total')\n    public redisOperationErrorsTotal: Counter<string>\n  ) {}\n\n  recordHttpRequest(\n    method: string,\n    route: string,\n    statusCode: number,\n    duration: number\n  ): void {\n    const labels = { method, route, status_code: statusCode.toString() };\n\n    this.httpRequestDuration.observe(labels, duration / 1000); // Convert to seconds\n    this.httpRequestsTotal.inc(labels);\n  }\n\n  incrementActiveConnections(): void {\n    this.httpActiveConnections.inc();\n  }\n\n  decrementActiveConnections(): void {\n    this.httpActiveConnections.dec();\n  }\n\n  recordJobExecution(\n    jobName: string,\n    queue: string,\n    success: boolean,\n    duration: number\n  ): void {\n    const labels = { job_name: jobName, queue, success: success.toString() };\n\n    this.jobLatencySeconds.observe(labels, duration / 1000);\n\n    if (!success) {\n      this.jobFailTotal.inc({ job_name: jobName, queue });\n    }\n  }\n\n  setQueueDepth(queue: string, priority: string, depth: number): void {\n    this.queueDepthTotal.set({ queue, priority }, depth);\n  }\n\n  incrementWebhookProcessed(status: 'success' | 'failure'): void {\n    this.webhookProcessedTotal.inc({ status });\n  }\n\n  recordWorkflowExecution(\n    workflowId: string,\n    duration: number,\n    success: boolean\n  ): void {\n    this.workflowExecutionDuration.observe(\n      { workflow_id: workflowId, success: success.toString() },\n      duration / 1000\n    );\n  }\n\n  recordApiKeyValidation(duration: number, valid: boolean): void {\n    this.apiKeyValidationDuration.observe(\n      { valid: valid.toString() },\n      duration / 1000\n    );\n  }\n\n  recordRedisOperation(operation: string, success: boolean): void {\n    this.redisOperationsTotal.inc({ operation, success: success.toString() });\n\n    if (!success) {\n      this.redisOperationErrorsTotal.inc({ operation });\n    }\n  }\n}\n"],"version":3}