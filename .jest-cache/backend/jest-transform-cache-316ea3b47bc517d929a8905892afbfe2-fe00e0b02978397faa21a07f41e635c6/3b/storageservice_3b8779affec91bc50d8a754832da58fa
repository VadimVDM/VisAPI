3ee8802a7a81ce7ded7745c929ccb410
"use strict";
var StorageService_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageService = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const supabase_service_1 = require("./supabase.service");
const nestjs_pino_1 = require("nestjs-pino");
let StorageService = StorageService_1 = class StorageService {
    constructor(supabase, logger) {
        this.supabase = supabase;
        this.logger = logger;
        this.BUCKET_NAME = 'receipts';
        this.SIGNED_URL_EXPIRY = 24 * 60 * 60; // 24 hours in seconds
        this.logger.setContext(StorageService_1.name);
    }
    /**
     * Upload a file to Supabase storage
     */
    uploadFile(path_1, buffer_1) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (path, buffer, options = {}) {
            const { contentType = 'application/pdf', cacheControl = '3600', upsert = true } = options;
            try {
                // Upload file to storage
                const { data, error } = yield this.supabase.serviceClient.storage
                    .from(this.BUCKET_NAME)
                    .upload(path, buffer, {
                    contentType,
                    cacheControl,
                    upsert,
                });
                if (error) {
                    this.logger.error({ error, path }, 'Failed to upload file to storage');
                    throw error;
                }
                // Get public URL
                const publicUrl = this.getPublicUrl(path);
                // Generate signed URL for temporary access
                const signedUrl = yield this.createSignedUrl(path);
                this.logger.info({ path, publicUrl }, 'File uploaded successfully');
                return {
                    path: data.path,
                    publicUrl,
                    signedUrl,
                };
            }
            catch (error) {
                this.logger.error({ error, path }, 'Error uploading file');
                throw error;
            }
        });
    }
    /**
     * Delete a file from storage
     */
    deleteFile(path) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const { error } = yield this.supabase.serviceClient.storage
                    .from(this.BUCKET_NAME)
                    .remove([path]);
                if (error) {
                    this.logger.error({ error, path }, 'Failed to delete file from storage');
                    throw error;
                }
                this.logger.info({ path }, 'File deleted successfully');
            }
            catch (error) {
                this.logger.error({ error, path }, 'Error deleting file');
                throw error;
            }
        });
    }
    /**
     * Create a signed URL for temporary access
     */
    createSignedUrl(path_1) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (path, expiresIn = this.SIGNED_URL_EXPIRY) {
            try {
                const { data, error } = yield this.supabase.serviceClient.storage
                    .from(this.BUCKET_NAME)
                    .createSignedUrl(path, expiresIn);
                if (error) {
                    this.logger.error({ error, path }, 'Failed to create signed URL');
                    throw error;
                }
                return data.signedUrl;
            }
            catch (error) {
                this.logger.error({ error, path }, 'Error creating signed URL');
                throw error;
            }
        });
    }
    /**
     * Get the public URL for a file
     */
    getPublicUrl(path) {
        const { data } = this.supabase.client.storage
            .from(this.BUCKET_NAME)
            .getPublicUrl(path);
        return data.publicUrl;
    }
    /**
     * Check if a file exists in storage
     */
    fileExists(path) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const { data, error } = yield this.supabase.serviceClient.storage
                    .from(this.BUCKET_NAME)
                    .list(path.substring(0, path.lastIndexOf('/')), {
                    search: path.substring(path.lastIndexOf('/') + 1),
                });
                if (error) {
                    this.logger.error({ error, path }, 'Failed to check if file exists');
                    return false;
                }
                return data.length > 0;
            }
            catch (error) {
                this.logger.error({ error, path }, 'Error checking file existence');
                return false;
            }
        });
    }
    /**
     * List files in a directory
     */
    listFiles(prefix_1) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (prefix, limit = 100, offset = 0) {
            try {
                const { data, error } = yield this.supabase.serviceClient.storage
                    .from(this.BUCKET_NAME)
                    .list(prefix, {
                    limit,
                    offset,
                });
                if (error) {
                    this.logger.error({ error, prefix }, 'Failed to list files');
                    throw error;
                }
                return data.map(file => `${prefix}/${file.name}`);
            }
            catch (error) {
                this.logger.error({ error, prefix }, 'Error listing files');
                throw error;
            }
        });
    }
};
exports.StorageService = StorageService;
exports.StorageService = StorageService = StorageService_1 = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof supabase_service_1.SupabaseService !== "undefined" && supabase_service_1.SupabaseService) === "function" ? _a : Object, typeof (_b = typeof nestjs_pino_1.PinoLogger !== "undefined" && nestjs_pino_1.PinoLogger) === "function" ? _b : Object])
], StorageService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,