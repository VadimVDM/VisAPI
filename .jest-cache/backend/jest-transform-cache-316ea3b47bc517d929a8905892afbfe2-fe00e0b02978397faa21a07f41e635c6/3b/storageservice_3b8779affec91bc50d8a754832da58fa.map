{"file":"/Users/vadim/Projects/VisAPI/libs/backend/core-supabase/src/lib/storage.service.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/libs/backend/core-supabase/src/lib/storage.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { SupabaseService } from './supabase.service';\nimport { PinoLogger } from 'nestjs-pino';\n\nexport interface StorageUploadOptions {\n  contentType?: string;\n  cacheControl?: string;\n  upsert?: boolean;\n}\n\nexport interface StorageFile {\n  path: string;\n  publicUrl: string;\n  signedUrl?: string;\n}\n\n@Injectable()\nexport class StorageService {\n  private readonly BUCKET_NAME = 'receipts';\n  private readonly SIGNED_URL_EXPIRY = 24 * 60 * 60; // 24 hours in seconds\n\n  constructor(\n    private readonly supabase: SupabaseService,\n    private readonly logger: PinoLogger\n  ) {\n    this.logger.setContext(StorageService.name);\n  }\n\n  /**\n   * Upload a file to Supabase storage\n   */\n  async uploadFile(\n    path: string,\n    buffer: Buffer,\n    options: StorageUploadOptions = {}\n  ): Promise<StorageFile> {\n    const { contentType = 'application/pdf', cacheControl = '3600', upsert = true } = options;\n\n    try {\n      // Upload file to storage\n      const { data, error } = await this.supabase.serviceClient.storage\n        .from(this.BUCKET_NAME)\n        .upload(path, buffer, {\n          contentType,\n          cacheControl,\n          upsert,\n        });\n\n      if (error) {\n        this.logger.error({ error, path }, 'Failed to upload file to storage');\n        throw error;\n      }\n\n      // Get public URL\n      const publicUrl = this.getPublicUrl(path);\n\n      // Generate signed URL for temporary access\n      const signedUrl = await this.createSignedUrl(path);\n\n      this.logger.info({ path, publicUrl }, 'File uploaded successfully');\n\n      return {\n        path: data.path,\n        publicUrl,\n        signedUrl,\n      };\n    } catch (error) {\n      this.logger.error({ error, path }, 'Error uploading file');\n      throw error;\n    }\n  }\n\n  /**\n   * Delete a file from storage\n   */\n  async deleteFile(path: string): Promise<void> {\n    try {\n      const { error } = await this.supabase.serviceClient.storage\n        .from(this.BUCKET_NAME)\n        .remove([path]);\n\n      if (error) {\n        this.logger.error({ error, path }, 'Failed to delete file from storage');\n        throw error;\n      }\n\n      this.logger.info({ path }, 'File deleted successfully');\n    } catch (error) {\n      this.logger.error({ error, path }, 'Error deleting file');\n      throw error;\n    }\n  }\n\n  /**\n   * Create a signed URL for temporary access\n   */\n  async createSignedUrl(path: string, expiresIn = this.SIGNED_URL_EXPIRY): Promise<string> {\n    try {\n      const { data, error } = await this.supabase.serviceClient.storage\n        .from(this.BUCKET_NAME)\n        .createSignedUrl(path, expiresIn);\n\n      if (error) {\n        this.logger.error({ error, path }, 'Failed to create signed URL');\n        throw error;\n      }\n\n      return data.signedUrl;\n    } catch (error) {\n      this.logger.error({ error, path }, 'Error creating signed URL');\n      throw error;\n    }\n  }\n\n  /**\n   * Get the public URL for a file\n   */\n  getPublicUrl(path: string): string {\n    const { data } = this.supabase.client.storage\n      .from(this.BUCKET_NAME)\n      .getPublicUrl(path);\n\n    return data.publicUrl;\n  }\n\n  /**\n   * Check if a file exists in storage\n   */\n  async fileExists(path: string): Promise<boolean> {\n    try {\n      const { data, error } = await this.supabase.serviceClient.storage\n        .from(this.BUCKET_NAME)\n        .list(path.substring(0, path.lastIndexOf('/')), {\n          search: path.substring(path.lastIndexOf('/') + 1),\n        });\n\n      if (error) {\n        this.logger.error({ error, path }, 'Failed to check if file exists');\n        return false;\n      }\n\n      return data.length > 0;\n    } catch (error) {\n      this.logger.error({ error, path }, 'Error checking file existence');\n      return false;\n    }\n  }\n\n  /**\n   * List files in a directory\n   */\n  async listFiles(prefix: string, limit = 100, offset = 0): Promise<string[]> {\n    try {\n      const { data, error } = await this.supabase.serviceClient.storage\n        .from(this.BUCKET_NAME)\n        .list(prefix, {\n          limit,\n          offset,\n        });\n\n      if (error) {\n        this.logger.error({ error, prefix }, 'Failed to list files');\n        throw error;\n      }\n\n      return data.map(file => `${prefix}/${file.name}`);\n    } catch (error) {\n      this.logger.error({ error, prefix }, 'Error listing files');\n      throw error;\n    }\n  }\n}"],"version":3}