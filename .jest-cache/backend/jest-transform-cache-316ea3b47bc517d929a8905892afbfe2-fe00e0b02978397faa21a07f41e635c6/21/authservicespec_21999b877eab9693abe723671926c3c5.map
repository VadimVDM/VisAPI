{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/auth/auth.service.spec.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/auth/auth.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { AuthService } from './auth.service';\nimport { SupabaseService } from '@visapi/core-supabase';\nimport { ApiKeyRecord } from '@visapi/shared-types';\nimport { ConfigService } from '@visapi/core-config';\nimport { PinoLogger } from 'nestjs-pino';\nimport * as bcrypt from 'bcrypt';\n\n// Mock bcrypt module properly\njest.mock('bcrypt', () => ({\n  compare: jest.fn(),\n  hash: jest.fn(),\n}));\n\n// Get the mocked functions after the module is mocked\nconst mockedBcrypt = jest.mocked(bcrypt);\n\ndescribe('AuthService', () => {\n  let service: AuthService;\n  let supabaseService: jest.Mocked<SupabaseService>;\n  let configService: jest.Mocked<ConfigService>;\n  let logger: jest.Mocked<PinoLogger>;\n\n  // Mock factory for Supabase client to reduce boilerplate\n  const createMockSupabaseClient = () => ({\n    from: jest.fn().mockReturnValue({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          single: jest.fn(),\n        }),\n        order: jest.fn().mockReturnValue({\n          data: [],\n          error: null,\n        }),\n      }),\n      insert: jest.fn().mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          single: jest.fn(),\n        }),\n      }),\n      update: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          data: null,\n          error: null,\n        }),\n      }),\n      delete: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          data: null,\n          error: null,\n        }),\n      }),\n    }),\n  });\n\n  const mockSupabaseClient = createMockSupabaseClient();\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        AuthService,\n        {\n          provide: SupabaseService,\n          useValue: {\n            serviceClient: mockSupabaseClient,\n          },\n        },\n        {\n          provide: ConfigService,\n          useValue: {\n            jwtSecret: 'test-secret',\n            apiKeyPrefix: 'vapi_',\n            apiKeyExpiryDays: 90,\n          },\n        },\n        {\n          provide: PinoLogger,\n          useValue: {\n            setContext: jest.fn(),\n            info: jest.fn(),\n            warn: jest.fn(),\n            error: jest.fn(),\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<AuthService>(AuthService);\n    supabaseService = module.get(SupabaseService);\n    configService = module.get(ConfigService);\n    logger = module.get(PinoLogger);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('validateApiKey', () => {\n    it('should return api key data when valid key is provided', async () => {\n      const mockApiKey: ApiKeyRecord = {\n        id: '123',\n        name: 'test-key',\n        hashed_key: '', // Legacy field\n        prefix: 'vapi_',\n        hashed_secret: 'hashed-value',\n        scopes: ['webhooks:trigger'],\n        expires_at: new Date(Date.now() + 86400000).toISOString(), // 1 day from now\n        created_by: 'user-123',\n        created_at: new Date().toISOString(),\n        last_used_at: null,\n        updated_at: new Date().toISOString(),\n      };\n\n      // Mock bcrypt.compare to return true for valid secret\n      (mockedBcrypt.compare as jest.Mock).mockResolvedValue(true);\n      \n      // Configure the final single() method to return the api key\n      const singleMock = mockSupabaseClient.from().select().eq().single;\n      singleMock.mockResolvedValue({\n        data: mockApiKey,\n        error: null,\n      });\n\n      const result = await service.validateApiKey('vapi_testsecret123');\n\n      expect(result).toEqual(mockApiKey);\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('api_keys');\n      expect(mockedBcrypt.compare).toHaveBeenCalledWith('testsecret123', 'hashed-value');\n    });\n\n    it('should return null when key is not found', async () => {\n      // Configure the final single() method to return no data\n      const singleMock = mockSupabaseClient.from().select().eq().single;\n      singleMock.mockResolvedValue({\n        data: null,\n        error: { message: 'No rows found' },\n      });\n\n      const result = await service.validateApiKey('invalid_testsecret');\n\n      expect(result).toBeNull();\n    });\n\n    it('should return null when key is expired', async () => {\n      const mockApiKey: ApiKeyRecord = {\n        id: '123',\n        name: 'test-key',\n        hashed_key: '', // Legacy field\n        prefix: 'vapi_',\n        hashed_secret: 'hashed-value',\n        scopes: ['webhooks:trigger'],\n        expires_at: new Date(Date.now() - 86400000).toISOString(), // 1 day ago\n        created_by: 'user-123',\n        created_at: new Date().toISOString(),\n        last_used_at: null,\n        updated_at: new Date().toISOString(),\n      };\n\n      // Configure the final single() method to return expired key\n      const singleMock = mockSupabaseClient.from().select().eq().single;\n      singleMock.mockResolvedValue({\n        data: mockApiKey,\n        error: null,\n      });\n\n      const result = await service.validateApiKey('vapi_testsecret123');\n\n      expect(result).toBeNull();\n    });\n\n    it('should handle database errors gracefully', async () => {\n      // Configure the final single() method to return database error\n      const singleMock = mockSupabaseClient.from().select().eq().single;\n      singleMock.mockResolvedValue({\n        data: null,\n        error: { message: 'Database error' },\n      });\n\n      const result = await service.validateApiKey('test_key');\n\n      expect(result).toBeNull();\n    });\n\n    it('should return null when secret does not match', async () => {\n      const mockApiKey: ApiKeyRecord = {\n        id: '123',\n        name: 'test-key',\n        hashed_key: '', // Legacy field\n        prefix: 'vapi_',\n        hashed_secret: 'hashed-value',\n        scopes: ['webhooks:trigger'],\n        expires_at: new Date(Date.now() + 86400000).toISOString(), // 1 day from now\n        created_by: 'user-123',\n        created_at: new Date().toISOString(),\n        last_used_at: null,\n        updated_at: new Date().toISOString(),\n      };\n\n      // Mock bcrypt.compare to return false for invalid secret\n      (mockedBcrypt.compare as jest.Mock).mockResolvedValue(false);\n      \n      // Configure the final single() method to return the api key (but bcrypt will fail)\n      const singleMock = mockSupabaseClient.from().select().eq().single;\n      singleMock.mockResolvedValue({\n        data: mockApiKey,\n        error: null,\n      });\n\n      const result = await service.validateApiKey('vapi_wrongsecret');\n\n      expect(result).toBeNull();\n      expect(mockedBcrypt.compare).toHaveBeenCalledWith('wrongsecret', 'hashed-value');\n    });\n  });\n\n  // Helper function to create mock ApiKeyRecord\n  const createMockApiKey = (overrides: Partial<ApiKeyRecord> = {}): ApiKeyRecord => ({\n    id: '123',\n    name: 'test-key',\n    hashed_key: '', // Legacy field\n    prefix: 'vapi_',\n    hashed_secret: 'hashed-value',\n    scopes: ['webhooks:trigger'],\n    expires_at: new Date(Date.now() + 86400000).toISOString(),\n    created_by: 'user-123',\n    created_at: new Date().toISOString(),\n    last_used_at: null,\n    updated_at: new Date().toISOString(),\n    ...overrides,\n  });\n\n  describe('checkScopes', () => {\n    it('should return true when api key has required scope', async () => {\n      const apiKey = createMockApiKey({\n        scopes: ['webhooks:trigger', 'workflows:read'],\n      });\n\n      const result = await service.checkScopes(apiKey, ['webhooks:trigger']);\n\n      expect(result).toBe(true);\n    });\n\n    it('should return false when api key does not have required scope', async () => {\n      const apiKey = createMockApiKey({\n        scopes: ['webhooks:trigger'],\n      });\n\n      const result = await service.checkScopes(apiKey, ['admin:write']);\n\n      expect(result).toBe(false);\n    });\n\n    it('should return true when no scopes are required', async () => {\n      const apiKey = createMockApiKey({\n        scopes: [],\n      });\n\n      const result = await service.checkScopes(apiKey, []);\n\n      expect(result).toBe(true);\n    });\n  });\n});\n"],"version":3}