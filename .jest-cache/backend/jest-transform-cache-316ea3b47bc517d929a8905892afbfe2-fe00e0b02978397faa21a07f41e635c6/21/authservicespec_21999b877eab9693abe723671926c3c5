ed449611ce8ab31a145633d414aa1e1a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Mock bcrypt module properly
jest.mock('bcrypt', () => ({
    compare: jest.fn(),
    hash: jest.fn(),
}));
const testing_1 = require("@nestjs/testing");
const auth_service_1 = require("./auth.service");
const core_supabase_1 = require("@visapi/core-supabase");
const core_config_1 = require("@visapi/core-config");
const nestjs_pino_1 = require("nestjs-pino");
const bcrypt = tslib_1.__importStar(require("bcrypt"));
// Get the mocked functions after the module is mocked
const mockedBcrypt = jest.mocked(bcrypt);
describe('AuthService', () => {
    let service;
    let supabaseService;
    let configService;
    let logger;
    // Mock factory for Supabase client to reduce boilerplate
    const createMockSupabaseClient = () => ({
        from: jest.fn().mockReturnValue({
            select: jest.fn().mockReturnValue({
                eq: jest.fn().mockReturnValue({
                    single: jest.fn(),
                }),
                order: jest.fn().mockReturnValue({
                    data: [],
                    error: null,
                }),
            }),
            insert: jest.fn().mockReturnValue({
                select: jest.fn().mockReturnValue({
                    single: jest.fn(),
                }),
            }),
            update: jest.fn().mockReturnValue({
                eq: jest.fn().mockReturnValue({
                    data: null,
                    error: null,
                }),
            }),
            delete: jest.fn().mockReturnValue({
                eq: jest.fn().mockReturnValue({
                    data: null,
                    error: null,
                }),
            }),
        }),
    });
    const mockSupabaseClient = createMockSupabaseClient();
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        jest.clearAllMocks();
        const module = yield testing_1.Test.createTestingModule({
            providers: [
                auth_service_1.AuthService,
                {
                    provide: core_supabase_1.SupabaseService,
                    useValue: {
                        serviceClient: mockSupabaseClient,
                    },
                },
                {
                    provide: core_config_1.ConfigService,
                    useValue: {
                        jwtSecret: 'test-secret',
                        apiKeyPrefix: 'vapi_',
                        apiKeyExpiryDays: 90,
                    },
                },
                {
                    provide: nestjs_pino_1.PinoLogger,
                    useValue: {
                        setContext: jest.fn(),
                        info: jest.fn(),
                        warn: jest.fn(),
                        error: jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(auth_service_1.AuthService);
        supabaseService = module.get(core_supabase_1.SupabaseService);
        configService = module.get(core_config_1.ConfigService);
        logger = module.get(nestjs_pino_1.PinoLogger);
    }));
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('validateApiKey', () => {
        it('should return api key data when valid key is provided', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockApiKey = {
                id: '123',
                name: 'test-key',
                hashed_key: '', // Legacy field
                prefix: 'vapi_',
                hashed_secret: 'hashed-value',
                scopes: ['webhooks:trigger'],
                expires_at: new Date(Date.now() + 86400000).toISOString(), // 1 day from now
                created_by: 'user-123',
                created_at: new Date().toISOString(),
                last_used_at: null,
                updated_at: new Date().toISOString(),
            };
            // Mock bcrypt.compare to return true for valid secret
            mockedBcrypt.compare.mockResolvedValue(true);
            // Configure the final single() method to return the api key
            const singleMock = mockSupabaseClient.from().select().eq().single;
            singleMock.mockResolvedValue({
                data: mockApiKey,
                error: null,
            });
            const result = yield service.validateApiKey('vapi_testsecret123');
            expect(result).toEqual(mockApiKey);
            expect(mockSupabaseClient.from).toHaveBeenCalledWith('api_keys');
            expect(mockedBcrypt.compare).toHaveBeenCalledWith('testsecret123', 'hashed-value');
        }));
        it('should return null when key is not found', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Configure the final single() method to return no data
            const singleMock = mockSupabaseClient.from().select().eq().single;
            singleMock.mockResolvedValue({
                data: null,
                error: { message: 'No rows found' },
            });
            const result = yield service.validateApiKey('invalid_testsecret');
            expect(result).toBeNull();
        }));
        it('should return null when key is expired', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockApiKey = {
                id: '123',
                name: 'test-key',
                hashed_key: '', // Legacy field
                prefix: 'vapi_',
                hashed_secret: 'hashed-value',
                scopes: ['webhooks:trigger'],
                expires_at: new Date(Date.now() - 86400000).toISOString(), // 1 day ago
                created_by: 'user-123',
                created_at: new Date().toISOString(),
                last_used_at: null,
                updated_at: new Date().toISOString(),
            };
            // Configure the final single() method to return expired key
            const singleMock = mockSupabaseClient.from().select().eq().single;
            singleMock.mockResolvedValue({
                data: mockApiKey,
                error: null,
            });
            const result = yield service.validateApiKey('vapi_testsecret123');
            expect(result).toBeNull();
        }));
        it('should handle database errors gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Configure the final single() method to return database error
            const singleMock = mockSupabaseClient.from().select().eq().single;
            singleMock.mockResolvedValue({
                data: null,
                error: { message: 'Database error' },
            });
            const result = yield service.validateApiKey('test_key');
            expect(result).toBeNull();
        }));
        it('should return null when secret does not match', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockApiKey = {
                id: '123',
                name: 'test-key',
                hashed_key: '', // Legacy field
                prefix: 'vapi_',
                hashed_secret: 'hashed-value',
                scopes: ['webhooks:trigger'],
                expires_at: new Date(Date.now() + 86400000).toISOString(), // 1 day from now
                created_by: 'user-123',
                created_at: new Date().toISOString(),
                last_used_at: null,
                updated_at: new Date().toISOString(),
            };
            // Mock bcrypt.compare to return false for invalid secret
            mockedBcrypt.compare.mockResolvedValue(false);
            // Configure the final single() method to return the api key (but bcrypt will fail)
            const singleMock = mockSupabaseClient.from().select().eq().single;
            singleMock.mockResolvedValue({
                data: mockApiKey,
                error: null,
            });
            const result = yield service.validateApiKey('vapi_wrongsecret');
            expect(result).toBeNull();
            expect(mockedBcrypt.compare).toHaveBeenCalledWith('wrongsecret', 'hashed-value');
        }));
    });
    // Helper function to create mock ApiKeyRecord
    const createMockApiKey = (overrides = {}) => (Object.assign({ id: '123', name: 'test-key', hashed_key: '', prefix: 'vapi_', hashed_secret: 'hashed-value', scopes: ['webhooks:trigger'], expires_at: new Date(Date.now() + 86400000).toISOString(), created_by: 'user-123', created_at: new Date().toISOString(), last_used_at: null, updated_at: new Date().toISOString() }, overrides));
    describe('checkScopes', () => {
        it('should return true when api key has required scope', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const apiKey = createMockApiKey({
                scopes: ['webhooks:trigger', 'workflows:read'],
            });
            const result = yield service.checkScopes(apiKey, ['webhooks:trigger']);
            expect(result).toBe(true);
        }));
        it('should return false when api key does not have required scope', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const apiKey = createMockApiKey({
                scopes: ['webhooks:trigger'],
            });
            const result = yield service.checkScopes(apiKey, ['admin:write']);
            expect(result).toBe(false);
        }));
        it('should return true when no scopes are required', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const apiKey = createMockApiKey({
                scopes: [],
            });
            const result = yield service.checkScopes(apiKey, []);
            expect(result).toBe(true);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,