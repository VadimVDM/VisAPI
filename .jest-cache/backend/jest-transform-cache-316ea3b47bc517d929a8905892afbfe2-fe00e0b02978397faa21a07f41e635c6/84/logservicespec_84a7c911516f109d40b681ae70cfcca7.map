{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/logs/services/log.service.spec.ts","mappings":";;;AAAA,6CAAsD;AACtD,+CAA2C;AAC3C,mEAA8D;AAC9D,yDAAwD;AAExD,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,IAAI,OAAmB,CAAC;IACxB,IAAI,eAA6C,CAAC;IAClD,IAAI,mBAAqD,CAAC;IAE1D,MAAM,kBAAkB,GAAG;QACzB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;KAChB,CAAC;IAEF,UAAU,CAAC,GAAS,EAAE;QACpB,MAAM,mBAAmB,GAAG;YAC1B,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,kBAAkB,CAAC;SACzD,CAAC;QAEF,MAAM,uBAAuB,GAAG;YAC9B,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;YACpB,mBAAmB,EAAE,IAAI,CAAC,EAAE,EAAE;SAC/B,CAAC;QAEF,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,wBAAU;gBACV;oBACE,OAAO,EAAE,+BAAe;oBACxB,QAAQ,EAAE,mBAAmB;iBAC9B;gBACD;oBACE,OAAO,EAAE,2CAAmB;oBAC5B,QAAQ,EAAE,uBAAuB;iBAClC;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAa,wBAAU,CAAC,CAAC;QAC7C,eAAe,GAAG,MAAM,CAAC,GAAG,CAAC,+BAAe,CAAC,CAAC;QAC9C,mBAAmB,GAAG,MAAM,CAAC,GAAG,CAAC,2CAAmB,CAAC,CAAC;QAEtD,6BAA6B;QAC7B,MAAM,UAAU,GAAG;YACjB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;YACf,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;YACf,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;SACnB,CAAC;QAEF,OAAO,CAAC,QAAQ,CAAC,GAAG,UAAiB,CAAC;IACxC,CAAC,CAAA,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,8CAA8C,EAAE,GAAS,EAAE;YAC5D,MAAM,QAAQ,GAAG;gBACf,KAAK,EAAE,MAAe;gBACtB,OAAO,EAAE,oCAAoC;gBAC7C,QAAQ,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE;gBAClC,WAAW,EAAE,cAAc;gBAC3B,MAAM,EAAE,SAAS;aAClB,CAAC;YAEF,mBAAmB,CAAC,SAAS,CAAC,eAAe,CAAC;gBAC5C,IAAI,EAAE,oCAAoC;gBAC1C,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,CAAC,OAAO,CAAC;aAC1B,CAAC,CAAC;YAEH,mBAAmB,CAAC,mBAAmB,CAAC,eAAe,CAAC;gBACtD,GAAG,EAAE,EAAE,KAAK,EAAE,kBAAkB,EAAE;gBAClC,QAAQ,EAAE,IAAI;gBACd,cAAc,EAAE,CAAC,cAAc,CAAC;aACjC,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG;gBAChB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;aACrD,CAAC;YAEF,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEnD,MAAM,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAElC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC;gBAC5C,KAAK,EAAE,MAAM;gBACb,OAAO,EAAE,oCAAoC;gBAC7C,QAAQ,EAAE,EAAE,KAAK,EAAE,kBAAkB,EAAE;gBACvC,WAAW,EAAE,cAAc;gBAC3B,MAAM,EAAE,SAAS;gBACjB,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;aAC/B,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAS,EAAE;YACtD,MAAM,QAAQ,GAAG;gBACf,KAAK,EAAE,MAAe;gBACtB,OAAO,EAAE,kCAAkC;gBAC3C,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE;aAC7B,CAAC;YAEF,mBAAmB,CAAC,SAAS,CAAC,eAAe,CAAC;gBAC5C,IAAI,EAAE,kCAAkC;gBACxC,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;aACnB,CAAC,CAAC;YAEH,mBAAmB,CAAC,mBAAmB,CAAC,eAAe,CAAC;gBACtD,GAAG,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE;gBACvB,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;aACnB,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG;gBAChB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;aACrD,CAAC;YAEF,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEnD,MAAM,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAElC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC;gBAC5C,KAAK,EAAE,MAAM;gBACb,OAAO,EAAE,kCAAkC;gBAC3C,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE;gBAC5B,WAAW,EAAE,IAAI;gBACjB,MAAM,EAAE,IAAI;gBACZ,YAAY,EAAE,KAAK;gBACnB,UAAU,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;aAC/B,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAS,EAAE;YACxD,MAAM,QAAQ,GAAG;gBACf,KAAK,EAAE,OAAgB;gBACvB,OAAO,EAAE,YAAY;aACtB,CAAC;YAEF,mBAAmB,CAAC,SAAS,CAAC,eAAe,CAAC;gBAC5C,IAAI,EAAE,YAAY;gBAClB,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;aACnB,CAAC,CAAC;YAEH,mBAAmB,CAAC,mBAAmB,CAAC,eAAe,CAAC;gBACtD,GAAG,EAAE,IAAI;gBACT,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;aACnB,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG;gBAChB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,gBAAgB,EAAE,EAAE,CAAC;aAC9E,CAAC;YAEF,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEnD,mEAAmE;YACnE,MAAM,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACnE,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,6CAA6C,EAAE,GAAS,EAAE;YAC3D,MAAM,QAAQ,GAAG;gBACf;oBACE,EAAE,EAAE,CAAC;oBACL,KAAK,EAAE,MAAM;oBACb,OAAO,EAAE,UAAU;oBACnB,QAAQ,EAAE,IAAI;oBACd,WAAW,EAAE,IAAI;oBACjB,MAAM,EAAE,IAAI;oBACZ,YAAY,EAAE,KAAK;oBACnB,UAAU,EAAE,sBAAsB;iBACnC;aACF,CAAC;YAEF,MAAM,SAAS,GAAG;gBAChB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAClC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAC9B,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAC/B,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAC/B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBACjC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBACjC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;oBACjC,IAAI,EAAE,QAAQ;oBACd,KAAK,EAAE,IAAI;oBACX,KAAK,EAAE,CAAC;iBACT,CAAC;aACH,CAAC;YAEF,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEnD,MAAM,OAAO,GAAG;gBACd,KAAK,EAAE,MAAM;gBACb,WAAW,EAAE,cAAc;gBAC3B,UAAU,EAAE,sBAAsB;gBAClC,QAAQ,EAAE,sBAAsB;gBAChC,gBAAgB,EAAE,MAAM;gBACxB,KAAK,EAAE,EAAE;gBACT,MAAM,EAAE,CAAC;aACV,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAE9C,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;YACvE,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC3D,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;YACzE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,oBAAoB,CAAC,YAAY,EAAE,sBAAsB,CAAC,CAAC;YACjF,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,oBAAoB,CAAC,YAAY,EAAE,sBAAsB,CAAC,CAAC;YACjF,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;YAClE,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,oBAAoB,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;YACjF,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAEnD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,CAAC;gBACR,MAAM,EAAE,CAAC;gBACT,KAAK,EAAE,EAAE;aACV,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,GAAS,EAAE;YAC3C,MAAM,SAAS,GAAG;gBAChB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAClC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBACjC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;oBACjC,IAAI,EAAE,EAAE;oBACR,KAAK,EAAE,IAAI;oBACX,KAAK,EAAE,CAAC;iBACT,CAAC;aACH,CAAC;YAEF,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEnD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAEzC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,sBAAsB;YAC3E,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE,CAAC;gBACR,MAAM,EAAE,CAAC;gBACT,KAAK,EAAE,EAAE;aACV,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,GAAS,EAAE;YAC7C,MAAM,SAAS,GAAG;gBAChB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAClC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBACjC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;oBACjC,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,EAAE,OAAO,EAAE,gBAAgB,EAAE;oBACpC,KAAK,EAAE,IAAI;iBACZ,CAAC;aACH,CAAC;YAEF,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEnD,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;QAC5E,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,gCAAgC,EAAE,GAAS,EAAE;YAC9C,MAAM,UAAU,GAAG,cAAc,CAAC;YAClC,MAAM,QAAQ,GAAG;gBACf;oBACE,EAAE,EAAE,CAAC;oBACL,KAAK,EAAE,MAAM;oBACb,OAAO,EAAE,kBAAkB;oBAC3B,QAAQ,EAAE,IAAI;oBACd,WAAW,EAAE,UAAU;oBACvB,MAAM,EAAE,IAAI;oBACZ,YAAY,EAAE,KAAK;oBACnB,UAAU,EAAE,sBAAsB;iBACnC;aACF,CAAC;YAEF,MAAM,SAAS,GAAG;gBAChB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAClC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAC9B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;oBACjC,IAAI,EAAE,QAAQ;oBACd,KAAK,EAAE,IAAI;iBACZ,CAAC;aACH,CAAC;YAEF,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEnD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAE3D,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;YACrE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,GAAS,EAAE;YAC7C,MAAM,SAAS,GAAG;gBAChB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAClC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAC9B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;oBACjC,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,EAAE,OAAO,EAAE,gBAAgB,EAAE;iBACrC,CAAC;aACH,CAAC;YAEF,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEnD,MAAM,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;QAC3G,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,2BAA2B,EAAE,GAAS,EAAE;YACzC,MAAM,KAAK,GAAG,SAAS,CAAC;YACxB,MAAM,QAAQ,GAAG;gBACf;oBACE,EAAE,EAAE,CAAC;oBACL,KAAK,EAAE,MAAM;oBACb,OAAO,EAAE,aAAa;oBACtB,QAAQ,EAAE,IAAI;oBACd,WAAW,EAAE,IAAI;oBACjB,MAAM,EAAE,KAAK;oBACb,YAAY,EAAE,KAAK;oBACnB,UAAU,EAAE,sBAAsB;iBACnC;aACF,CAAC;YAEF,MAAM,SAAS,GAAG;gBAChB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAClC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAC9B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;oBACjC,IAAI,EAAE,QAAQ;oBACd,KAAK,EAAE,IAAI;iBACZ,CAAC;aACH,CAAC;YAEF,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEnD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAEjD,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YAC3D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,2BAA2B,EAAE,GAAS,EAAE;YACzC,MAAM,WAAW,GAAG;gBAClB,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,KAAK,EAAE;gBACtC,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE;gBACrC,EAAE,KAAK,EAAE,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE;gBACvC,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE;aACtC,CAAC;YAEF,MAAM,cAAc,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;YAE9C,sCAAsC;YACtC,MAAM,cAAc,GAAG;gBACrB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;oBAClC,IAAI,EAAE,WAAW;oBACjB,KAAK,EAAE,IAAI;iBACZ,CAAC;aACH,CAAC;YAEF,wCAAwC;YACxC,MAAM,eAAe,GAAG;gBACtB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAClC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;oBAC/B,IAAI,EAAE,cAAc;oBACpB,KAAK,EAAE,IAAI;iBACZ,CAAC;aACH,CAAC;YAEF,kBAAkB,CAAC,IAAI;iBACpB,mBAAmB,CAAC,cAAc,CAAC;iBACnC,mBAAmB,CAAC,eAAe,CAAC,CAAC;YAExC,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,WAAW,EAAE,CAAC;YAE3C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,KAAK,EAAE,CAAC;gBACR,OAAO,EAAE;oBACP,IAAI,EAAE,CAAC;oBACP,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;iBACR;gBACD,OAAO,EAAE,CAAC;gBACV,WAAW,EAAE,CAAC;aACf,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,GAAS,EAAE;YAC7C,MAAM,SAAS,GAAG;gBAChB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;oBAClC,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,EAAE,OAAO,EAAE,gBAAgB,EAAE;iBACrC,CAAC;aACH,CAAC;YAEF,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEnD,MAAM,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC;QACnF,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,uBAAuB,EAAE,GAAS,EAAE;YACrC,MAAM,SAAS,GAAG;gBAChB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAClC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;oBAC9B,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;oBAC5B,KAAK,EAAE,IAAI;iBACZ,CAAC;aACH,CAAC;YAEF,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEnD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAE9C,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,YAAY,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5E,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;QACzC,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,GAAS,EAAE;YAC7C,MAAM,SAAS,GAAG;gBAChB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAClC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;oBAC9B,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,EAAE,OAAO,EAAE,gBAAgB,EAAE;iBACrC,CAAC;aACH,CAAC;YAEF,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEnD,MAAM,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;QACrF,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,6DAA6D,EAAE,GAAS,EAAE;YAC3E,MAAM,SAAS,GAAG;gBAChB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;aACrD,CAAC;YAEF,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEnD,mBAAmB,CAAC,SAAS,CAAC,eAAe,CAAC;gBAC5C,IAAI,EAAE,cAAc;gBACpB,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;aACnB,CAAC,CAAC;YAEH,mBAAmB,CAAC,mBAAmB,CAAC,eAAe,CAAC;gBACtD,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;gBACrB,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;aACnB,CAAC,CAAC;YAEH,MAAM,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;YACvD,MAAM,OAAO,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;YACrD,MAAM,OAAO,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;YACrD,MAAM,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;YAEvD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/logs/services/log.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { LogService } from './log.service';\nimport { PiiRedactionService } from './pii-redaction.service';\nimport { SupabaseService } from '@visapi/core-supabase';\n\ndescribe('LogService', () => {\n  let service: LogService;\n  let supabaseService: jest.Mocked<SupabaseService>;\n  let piiRedactionService: jest.Mocked<PiiRedactionService>;\n\n  const mockSupabaseClient = {\n    from: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const mockSupabaseService = {\n      getClient: jest.fn().mockReturnValue(mockSupabaseClient),\n    };\n\n    const mockPiiRedactionService = {\n      redactPii: jest.fn(),\n      redactPiiFromObject: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        LogService,\n        {\n          provide: SupabaseService,\n          useValue: mockSupabaseService,\n        },\n        {\n          provide: PiiRedactionService,\n          useValue: mockPiiRedactionService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<LogService>(LogService);\n    supabaseService = module.get(SupabaseService);\n    piiRedactionService = module.get(PiiRedactionService);\n\n    // Mock the logger completely\n    const mockLogger = {\n      error: jest.fn(),\n      debug: jest.fn(),\n      info: jest.fn(),\n      warn: jest.fn(),\n      log: jest.fn(),\n      verbose: jest.fn(),\n    };\n    \n    service['logger'] = mockLogger as any;\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('createLog', () => {\n    it('should create a log entry with PII redaction', async () => {\n      const logEntry = {\n        level: 'info' as const,\n        message: 'User contacted at john@example.com',\n        metadata: { phone: '+1234567890' },\n        workflow_id: 'workflow-123',\n        job_id: 'job-456',\n      };\n\n      piiRedactionService.redactPii.mockReturnValue({\n        text: 'User contacted at [EMAIL_REDACTED]',\n        piiFound: true,\n        redactedFields: ['email'],\n      });\n\n      piiRedactionService.redactPiiFromObject.mockReturnValue({\n        obj: { phone: '[PHONE_REDACTED]' },\n        piiFound: true,\n        redactedFields: ['phone_number'],\n      });\n\n      const mockQuery = {\n        insert: jest.fn().mockResolvedValue({ error: null }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      await service.createLog(logEntry);\n\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('logs');\n      expect(mockQuery.insert).toHaveBeenCalledWith({\n        level: 'info',\n        message: 'User contacted at [EMAIL_REDACTED]',\n        metadata: { phone: '[PHONE_REDACTED]' },\n        workflow_id: 'workflow-123',\n        job_id: 'job-456',\n        pii_redacted: true,\n        created_at: expect.any(String),\n      });\n    });\n\n    it('should handle log creation without PII', async () => {\n      const logEntry = {\n        level: 'info' as const,\n        message: 'Operation completed successfully',\n        metadata: { duration: 1000 },\n      };\n\n      piiRedactionService.redactPii.mockReturnValue({\n        text: 'Operation completed successfully',\n        piiFound: false,\n        redactedFields: [],\n      });\n\n      piiRedactionService.redactPiiFromObject.mockReturnValue({\n        obj: { duration: 1000 },\n        piiFound: false,\n        redactedFields: [],\n      });\n\n      const mockQuery = {\n        insert: jest.fn().mockResolvedValue({ error: null }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      await service.createLog(logEntry);\n\n      expect(mockQuery.insert).toHaveBeenCalledWith({\n        level: 'info',\n        message: 'Operation completed successfully',\n        metadata: { duration: 1000 },\n        workflow_id: null,\n        job_id: null,\n        pii_redacted: false,\n        created_at: expect.any(String),\n      });\n    });\n\n    it('should handle database errors gracefully', async () => {\n      const logEntry = {\n        level: 'error' as const,\n        message: 'Test error',\n      };\n\n      piiRedactionService.redactPii.mockReturnValue({\n        text: 'Test error',\n        piiFound: false,\n        redactedFields: [],\n      });\n\n      piiRedactionService.redactPiiFromObject.mockReturnValue({\n        obj: null,\n        piiFound: false,\n        redactedFields: [],\n      });\n\n      const mockQuery = {\n        insert: jest.fn().mockResolvedValue({ error: { message: 'Database error' } }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      // Should not throw - logging failures should be handled gracefully\n      await expect(service.createLog(logEntry)).resolves.not.toThrow();\n    });\n  });\n\n  describe('getLogs', () => {\n    it('should get logs with filters and pagination', async () => {\n      const mockLogs = [\n        {\n          id: 1,\n          level: 'info',\n          message: 'Test log',\n          metadata: null,\n          workflow_id: null,\n          job_id: null,\n          pii_redacted: false,\n          created_at: '2025-07-15T10:00:00Z',\n        },\n      ];\n\n      const mockQuery = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        gte: jest.fn().mockReturnThis(),\n        lte: jest.fn().mockReturnThis(),\n        ilike: jest.fn().mockReturnThis(),\n        order: jest.fn().mockReturnThis(),\n        range: jest.fn().mockResolvedValue({\n          data: mockLogs,\n          error: null,\n          count: 1,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      const filters = {\n        level: 'info',\n        workflow_id: 'workflow-123',\n        start_date: '2025-07-15T00:00:00Z',\n        end_date: '2025-07-15T23:59:59Z',\n        message_contains: 'test',\n        limit: 10,\n        offset: 0,\n      };\n\n      const result = await service.getLogs(filters);\n\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('logs');\n      expect(mockQuery.select).toHaveBeenCalledWith('*', { count: 'exact' });\n      expect(mockQuery.eq).toHaveBeenCalledWith('level', 'info');\n      expect(mockQuery.eq).toHaveBeenCalledWith('workflow_id', 'workflow-123');\n      expect(mockQuery.gte).toHaveBeenCalledWith('created_at', '2025-07-15T00:00:00Z');\n      expect(mockQuery.lte).toHaveBeenCalledWith('created_at', '2025-07-15T23:59:59Z');\n      expect(mockQuery.ilike).toHaveBeenCalledWith('message', '%test%');\n      expect(mockQuery.order).toHaveBeenCalledWith('created_at', { ascending: false });\n      expect(mockQuery.range).toHaveBeenCalledWith(0, 9);\n\n      expect(result).toEqual({\n        logs: mockLogs,\n        total: 1,\n        offset: 0,\n        limit: 10,\n      });\n    });\n\n    it('should handle empty filters', async () => {\n      const mockQuery = {\n        select: jest.fn().mockReturnThis(),\n        order: jest.fn().mockReturnThis(),\n        range: jest.fn().mockResolvedValue({\n          data: [],\n          error: null,\n          count: 0,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      const result = await service.getLogs({});\n\n      expect(mockQuery.range).toHaveBeenCalledWith(0, 49); // Default limit of 50\n      expect(result).toEqual({\n        logs: [],\n        total: 0,\n        offset: 0,\n        limit: 50,\n      });\n    });\n\n    it('should handle database errors', async () => {\n      const mockQuery = {\n        select: jest.fn().mockReturnThis(),\n        order: jest.fn().mockReturnThis(),\n        range: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'Database error' },\n          count: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      await expect(service.getLogs({})).rejects.toThrow('Failed to fetch logs');\n    });\n  });\n\n  describe('getLogsByWorkflow', () => {\n    it('should get logs by workflow ID', async () => {\n      const workflowId = 'workflow-123';\n      const mockLogs = [\n        {\n          id: 1,\n          level: 'info',\n          message: 'Workflow started',\n          metadata: null,\n          workflow_id: workflowId,\n          job_id: null,\n          pii_redacted: false,\n          created_at: '2025-07-15T10:00:00Z',\n        },\n      ];\n\n      const mockQuery = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        order: jest.fn().mockResolvedValue({\n          data: mockLogs,\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      const result = await service.getLogsByWorkflow(workflowId);\n\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('logs');\n      expect(mockQuery.eq).toHaveBeenCalledWith('workflow_id', workflowId);\n      expect(result).toEqual(mockLogs);\n    });\n\n    it('should handle database errors', async () => {\n      const mockQuery = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        order: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'Database error' },\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      await expect(service.getLogsByWorkflow('workflow-123')).rejects.toThrow('Failed to fetch workflow logs');\n    });\n  });\n\n  describe('getLogsByJob', () => {\n    it('should get logs by job ID', async () => {\n      const jobId = 'job-456';\n      const mockLogs = [\n        {\n          id: 1,\n          level: 'info',\n          message: 'Job started',\n          metadata: null,\n          workflow_id: null,\n          job_id: jobId,\n          pii_redacted: false,\n          created_at: '2025-07-15T10:00:00Z',\n        },\n      ];\n\n      const mockQuery = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        order: jest.fn().mockResolvedValue({\n          data: mockLogs,\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      const result = await service.getLogsByJob(jobId);\n\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('logs');\n      expect(mockQuery.eq).toHaveBeenCalledWith('job_id', jobId);\n      expect(result).toEqual(mockLogs);\n    });\n  });\n\n  describe('getLogStats', () => {\n    it('should get log statistics', async () => {\n      const mockLogData = [\n        { level: 'info', pii_redacted: false },\n        { level: 'info', pii_redacted: true },\n        { level: 'error', pii_redacted: false },\n        { level: 'warn', pii_redacted: true },\n      ];\n\n      const mockRecentData = [{ id: 1 }, { id: 2 }];\n\n      // Mock the first call for total stats\n      const mockTotalQuery = {\n        select: jest.fn().mockResolvedValue({\n          data: mockLogData,\n          error: null,\n        }),\n      };\n\n      // Mock the second call for recent stats\n      const mockRecentQuery = {\n        select: jest.fn().mockReturnThis(),\n        gte: jest.fn().mockResolvedValue({\n          data: mockRecentData,\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from\n        .mockReturnValueOnce(mockTotalQuery)\n        .mockReturnValueOnce(mockRecentQuery);\n\n      const result = await service.getLogStats();\n\n      expect(result).toEqual({\n        total: 4,\n        byLevel: {\n          info: 2,\n          error: 1,\n          warn: 1,\n        },\n        withPii: 2,\n        recentCount: 2,\n      });\n    });\n\n    it('should handle database errors', async () => {\n      const mockQuery = {\n        select: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'Database error' },\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      await expect(service.getLogStats()).rejects.toThrow('Failed to fetch log stats');\n    });\n  });\n\n  describe('pruneOldLogs', () => {\n    it('should prune old logs', async () => {\n      const mockQuery = {\n        delete: jest.fn().mockReturnThis(),\n        lt: jest.fn().mockResolvedValue({\n          data: [{ id: 1 }, { id: 2 }],\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      const result = await service.pruneOldLogs(90);\n\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('logs');\n      expect(mockQuery.delete).toHaveBeenCalled();\n      expect(mockQuery.lt).toHaveBeenCalledWith('created_at', expect.any(String));\n      expect(result).toEqual({ deleted: 2 });\n    });\n\n    it('should handle database errors', async () => {\n      const mockQuery = {\n        delete: jest.fn().mockReturnThis(),\n        lt: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'Database error' },\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      await expect(service.pruneOldLogs(90)).rejects.toThrow('Failed to prune old logs');\n    });\n  });\n\n  describe('convenience methods', () => {\n    it('should provide convenience methods for different log levels', async () => {\n      const mockQuery = {\n        insert: jest.fn().mockResolvedValue({ error: null }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      piiRedactionService.redactPii.mockReturnValue({\n        text: 'Test message',\n        piiFound: false,\n        redactedFields: [],\n      });\n\n      piiRedactionService.redactPiiFromObject.mockReturnValue({\n        obj: { test: 'data' },\n        piiFound: false,\n        redactedFields: [],\n      });\n\n      await service.debug('Debug message', { test: 'data' });\n      await service.info('Info message', { test: 'data' });\n      await service.warn('Warn message', { test: 'data' });\n      await service.error('Error message', { test: 'data' });\n\n      expect(mockQuery.insert).toHaveBeenCalledTimes(4);\n    });\n  });\n});"],"version":3}