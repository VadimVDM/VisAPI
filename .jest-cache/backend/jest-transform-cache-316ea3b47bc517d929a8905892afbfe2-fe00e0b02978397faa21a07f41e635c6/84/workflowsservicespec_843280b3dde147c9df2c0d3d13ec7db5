00e32f592caffe0972cb2d2e15137d03
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const testing_1 = require("@nestjs/testing");
const common_1 = require("@nestjs/common");
const workflows_service_1 = require("./workflows.service");
const core_supabase_1 = require("@visapi/core-supabase");
describe('WorkflowsService', () => {
    let service;
    let supabaseService;
    const mockSupabaseClient = {
        from: jest.fn(),
    };
    const mockWorkflowData = {
        id: '123e4567-e89b-12d3-a456-426614174000',
        name: 'Test Workflow',
        description: 'A test workflow',
        enabled: true,
        schema: {
            triggers: [
                {
                    type: 'cron',
                    config: {
                        schedule: '0 9 * * *',
                    },
                },
            ],
            steps: [
                {
                    id: 'step-1',
                    type: 'whatsapp.send',
                    config: {
                        contact: '+1234567890',
                        template: 'test_template',
                    },
                    retries: 3,
                },
            ],
            variables: { testVar: 'value' },
        },
        created_at: '2025-07-15T10:30:00Z',
        updated_at: '2025-07-15T10:30:00Z',
    };
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const mockSupabaseService = {
            client: mockSupabaseClient,
            getClient: jest.fn().mockReturnValue(mockSupabaseClient),
        };
        const module = yield testing_1.Test.createTestingModule({
            providers: [
                workflows_service_1.WorkflowsService,
                {
                    provide: core_supabase_1.SupabaseService,
                    useValue: mockSupabaseService,
                },
            ],
        }).compile();
        service = module.get(workflows_service_1.WorkflowsService);
        supabaseService = module.get(core_supabase_1.SupabaseService);
    }));
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('create', () => {
        it('should create a new workflow', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const createDto = {
                name: 'Test Workflow',
                description: 'A test workflow',
                enabled: true,
                variables: { testVar: 'value' },
                schema: {
                    triggers: [
                        {
                            type: 'cron',
                            config: {
                                schedule: '0 9 * * *',
                            },
                        },
                    ],
                    steps: [
                        {
                            id: 'step-1',
                            type: 'whatsapp.send',
                            config: {
                                contact: '+1234567890',
                                template: 'test_template',
                            },
                            retries: 3,
                        },
                    ],
                },
            };
            const mockQuery = {
                insert: jest.fn().mockReturnThis(),
                select: jest.fn().mockReturnThis(),
                single: jest.fn().mockResolvedValue({
                    data: mockWorkflowData,
                    error: null,
                }),
            };
            mockSupabaseClient.from.mockReturnValue(mockQuery);
            const result = yield service.create(createDto);
            expect(mockSupabaseClient.from).toHaveBeenCalledWith('workflows');
            expect(mockQuery.insert).toHaveBeenCalledWith({
                name: createDto.name,
                description: createDto.description,
                enabled: createDto.enabled,
                schema: Object.assign(Object.assign({}, createDto.schema), { variables: createDto.variables }),
            });
            expect(result).toEqual({
                id: mockWorkflowData.id,
                name: mockWorkflowData.name,
                description: mockWorkflowData.description,
                enabled: mockWorkflowData.enabled,
                variables: mockWorkflowData.schema.variables,
                schema: mockWorkflowData.schema,
                created_at: mockWorkflowData.created_at,
                updated_at: mockWorkflowData.updated_at,
            });
        }));
        it('should throw error when database operation fails', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const createDto = {
                name: 'Test Workflow',
                enabled: true,
                schema: {
                    triggers: [{ type: 'cron', config: { schedule: '0 9 * * *' } }],
                    steps: [
                        {
                            id: 'step-1',
                            type: 'whatsapp.send',
                            config: { contact: '+1234567890' },
                        },
                    ],
                },
            };
            const mockQuery = {
                insert: jest.fn().mockReturnThis(),
                select: jest.fn().mockReturnThis(),
                single: jest.fn().mockResolvedValue({
                    data: null,
                    error: { message: 'Database error' },
                }),
            };
            mockSupabaseClient.from.mockReturnValue(mockQuery);
            yield expect(service.create(createDto)).rejects.toThrow('Failed to create workflow');
        }));
    });
    describe('findAll', () => {
        it('should return all workflows', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockQuery = {
                select: jest.fn().mockReturnThis(),
                order: jest.fn().mockResolvedValue({
                    data: [mockWorkflowData],
                    error: null,
                }),
            };
            mockSupabaseClient.from.mockReturnValue(mockQuery);
            const result = yield service.findAll();
            expect(mockSupabaseClient.from).toHaveBeenCalledWith('workflows');
            expect(mockQuery.select).toHaveBeenCalledWith('*');
            expect(mockQuery.order).toHaveBeenCalledWith('created_at', {
                ascending: false,
            });
            expect(result).toHaveLength(1);
            expect(result[0].id).toBe(mockWorkflowData.id);
        }));
        it('should throw error when database operation fails', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockQuery = {
                select: jest.fn().mockReturnThis(),
                order: jest.fn().mockResolvedValue({
                    data: null,
                    error: { message: 'Database error' },
                }),
            };
            mockSupabaseClient.from.mockReturnValue(mockQuery);
            yield expect(service.findAll()).rejects.toThrow('Failed to fetch workflows');
        }));
    });
    describe('findOne', () => {
        it('should return a workflow by ID', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockQuery = {
                select: jest.fn().mockReturnThis(),
                eq: jest.fn().mockReturnThis(),
                single: jest.fn().mockResolvedValue({
                    data: mockWorkflowData,
                    error: null,
                }),
            };
            mockSupabaseClient.from.mockReturnValue(mockQuery);
            const result = yield service.findOne(mockWorkflowData.id);
            expect(mockSupabaseClient.from).toHaveBeenCalledWith('workflows');
            expect(mockQuery.select).toHaveBeenCalledWith('*');
            expect(mockQuery.eq).toHaveBeenCalledWith('id', mockWorkflowData.id);
            expect(result.id).toBe(mockWorkflowData.id);
        }));
        it('should throw NotFoundException when workflow not found', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockQuery = {
                select: jest.fn().mockReturnThis(),
                eq: jest.fn().mockReturnThis(),
                single: jest.fn().mockResolvedValue({
                    data: null,
                    error: { message: 'Not found' },
                }),
            };
            mockSupabaseClient.from.mockReturnValue(mockQuery);
            yield expect(service.findOne('nonexistent-id')).rejects.toThrow(common_1.NotFoundException);
        }));
    });
    describe('update', () => {
        it('should update a workflow', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const updateDto = {
                name: 'Updated Workflow',
                enabled: false,
            };
            const updatedWorkflowData = Object.assign(Object.assign({}, mockWorkflowData), { name: 'Updated Workflow', enabled: false });
            const mockQuery = {
                update: jest.fn().mockReturnThis(),
                eq: jest.fn().mockReturnThis(),
                select: jest.fn().mockReturnThis(),
                single: jest.fn().mockResolvedValue({
                    data: updatedWorkflowData,
                    error: null,
                }),
            };
            mockSupabaseClient.from.mockReturnValue(mockQuery);
            const result = yield service.update(mockWorkflowData.id, updateDto);
            expect(mockSupabaseClient.from).toHaveBeenCalledWith('workflows');
            expect(mockQuery.update).toHaveBeenCalledWith({
                name: updateDto.name,
                enabled: updateDto.enabled,
            });
            expect(mockQuery.eq).toHaveBeenCalledWith('id', mockWorkflowData.id);
            expect(result.name).toBe('Updated Workflow');
            expect(result.enabled).toBe(false);
        }));
        it('should throw NotFoundException when workflow not found', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const updateDto = {
                name: 'Updated Workflow',
            };
            const mockQuery = {
                update: jest.fn().mockReturnThis(),
                eq: jest.fn().mockReturnThis(),
                select: jest.fn().mockReturnThis(),
                single: jest.fn().mockResolvedValue({
                    data: null,
                    error: { message: 'Not found' },
                }),
            };
            mockSupabaseClient.from.mockReturnValue(mockQuery);
            yield expect(service.update('nonexistent-id', updateDto)).rejects.toThrow(common_1.NotFoundException);
        }));
    });
    describe('remove', () => {
        it('should delete a workflow', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockQuery = {
                delete: jest.fn().mockReturnThis(),
                eq: jest.fn().mockResolvedValue({
                    error: null,
                }),
            };
            mockSupabaseClient.from.mockReturnValue(mockQuery);
            yield service.remove(mockWorkflowData.id);
            expect(mockSupabaseClient.from).toHaveBeenCalledWith('workflows');
            expect(mockQuery.delete).toHaveBeenCalled();
            expect(mockQuery.eq).toHaveBeenCalledWith('id', mockWorkflowData.id);
        }));
        it('should throw NotFoundException when workflow not found', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockQuery = {
                delete: jest.fn().mockReturnThis(),
                eq: jest.fn().mockResolvedValue({
                    error: { message: 'Not found' },
                }),
            };
            mockSupabaseClient.from.mockReturnValue(mockQuery);
            yield expect(service.remove('nonexistent-id')).rejects.toThrow(common_1.NotFoundException);
        }));
    });
    describe('findEnabled', () => {
        it('should return only enabled workflows', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockQuery = {
                select: jest.fn().mockReturnThis(),
                eq: jest.fn().mockReturnThis(),
                order: jest.fn().mockResolvedValue({
                    data: [mockWorkflowData],
                    error: null,
                }),
            };
            mockSupabaseClient.from.mockReturnValue(mockQuery);
            const result = yield service.findEnabled();
            expect(mockSupabaseClient.from).toHaveBeenCalledWith('workflows');
            expect(mockQuery.select).toHaveBeenCalledWith('*');
            expect(mockQuery.eq).toHaveBeenCalledWith('enabled', true);
            expect(mockQuery.order).toHaveBeenCalledWith('created_at', {
                ascending: false,
            });
            expect(result).toHaveLength(1);
            expect(result[0].enabled).toBe(true);
        }));
        it('should throw error when database operation fails', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockQuery = {
                select: jest.fn().mockReturnThis(),
                eq: jest.fn().mockReturnThis(),
                order: jest.fn().mockResolvedValue({
                    data: null,
                    error: { message: 'Database error' },
                }),
            };
            mockSupabaseClient.from.mockReturnValue(mockQuery);
            yield expect(service.findEnabled()).rejects.toThrow('Failed to fetch enabled workflows');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,