{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/cron/cron-seeder.service.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/cron/cron-seeder.service.ts"],"sourcesContent":["import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { InjectPinoLogger, PinoLogger } from 'nestjs-pino';\nimport { SupabaseService } from '@visapi/core-supabase';\nimport { QueueService } from '../queue/queue.service';\nimport { QUEUE_NAMES, JOB_NAMES, WorkflowSchema } from '@visapi/shared-types';\n\n@Injectable()\nexport class CronSeederService implements OnModuleInit {\n  constructor(\n    @InjectPinoLogger(CronSeederService.name)\n    private readonly logger: PinoLogger,\n    private readonly supabase: SupabaseService,\n    private readonly queueService: QueueService,\n  ) {}\n\n  async onModuleInit() {\n    await this.seedCronJobs();\n  }\n\n  async seedCronJobs(): Promise<void> {\n    this.logger.info('Starting cron job seeding');\n\n    try {\n      // Get all enabled workflows with cron triggers\n      const workflows = await this.getWorkflowsWithCronTriggers();\n      \n      if (workflows.length === 0) {\n        this.logger.info('No workflows with cron triggers found');\n      } else {\n        this.logger.info(\n          { count: workflows.length },\n          'Found workflows with cron triggers',\n        );\n      }\n\n      // Clear existing repeatable jobs first to ensure clean state\n      await this.clearExistingCronJobs();\n\n      // Schedule log pruning job (daily at 2 AM)\n      await this.scheduleLogPruning();\n\n      // Schedule each workflow\n      for (const workflow of workflows) {\n        await this.scheduleWorkflow(workflow);\n      }\n\n      this.logger.info('Cron job seeding completed successfully');\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to seed cron jobs');\n      throw error;\n    }\n  }\n\n  private async getWorkflowsWithCronTriggers(): Promise<any[]> {\n    const { data, error } = await this.supabase.client\n      .from('workflows')\n      .select('*')\n      .eq('enabled', true);\n\n    if (error) {\n      throw new Error(`Failed to fetch workflows: ${error.message}`);\n    }\n\n    // Filter workflows that have cron triggers\n    return (data || []).filter((workflow) => {\n      const schema = workflow.schema as any;\n      return schema?.triggers?.some(\n        (trigger: any) => \n          trigger.type === 'cron' && \n          trigger.config?.schedule\n      );\n    });\n  }\n\n  private async clearExistingCronJobs(): Promise<void> {\n    try {\n      const repeatableJobs = await this.queueService.getRepeatableJobs(\n        QUEUE_NAMES.DEFAULT,\n      );\n\n      // Remove jobs that match our cron pattern\n      for (const job of repeatableJobs) {\n        if (job.id?.startsWith('cron-') || job.id === 'log-pruning') {\n          const jobId = job.id.startsWith('cron-') ? job.id.replace('cron-', '') : job.id;\n          await this.queueService.removeRepeatableJob(\n            QUEUE_NAMES.DEFAULT,\n            jobId,\n          );\n        }\n      }\n    } catch (error) {\n      this.logger.warn(\n        { error },\n        'Failed to clear existing cron jobs, continuing anyway',\n      );\n    }\n  }\n\n  private async scheduleWorkflow(workflow: any): Promise<void> {\n    const schema = workflow.schema as any;\n    const cronTriggers = schema.triggers.filter(\n      (trigger: any) => trigger.type === 'cron' && trigger.config?.schedule,\n    );\n\n    for (const trigger of cronTriggers) {\n      try {\n        const schedule = trigger.config.schedule;\n        const timezone = trigger.config.timezone || 'UTC';\n\n        await this.queueService.addRepeatableJob(\n          QUEUE_NAMES.DEFAULT,\n          JOB_NAMES.PROCESS_WORKFLOW,\n          {\n            workflowId: workflow.id,\n            trigger: {\n              type: 'cron',\n              schedule,\n            },\n            metadata: {\n              workflowName: workflow.name,\n              scheduledBy: 'cron-seeder',\n            },\n          },\n          {\n            pattern: schedule,\n            tz: timezone,\n          },\n        );\n\n        this.logger.info(\n          {\n            workflowId: workflow.id,\n            workflowName: workflow.name,\n            schedule,\n            timezone,\n          },\n          'Scheduled cron job for workflow',\n        );\n      } catch (error) {\n        this.logger.error(\n          {\n            error,\n            workflowId: workflow.id,\n            workflowName: workflow.name,\n          },\n          'Failed to schedule cron job for workflow',\n        );\n      }\n    }\n  }\n\n  /**\n   * Update cron jobs when a workflow is updated\n   */\n  async updateWorkflowCronJobs(workflowId: string): Promise<void> {\n    try {\n      // Remove existing cron job\n      await this.queueService.removeRepeatableJob(\n        QUEUE_NAMES.DEFAULT,\n        workflowId,\n      );\n\n      // Fetch the updated workflow\n      const { data: workflow, error } = await this.supabase.client\n        .from('workflows')\n        .select('*')\n        .eq('id', workflowId)\n        .single();\n\n      if (error || !workflow) {\n        this.logger.warn(\n          { workflowId, error },\n          'Workflow not found for cron update',\n        );\n        return;\n      }\n\n      // Reschedule if still enabled and has cron triggers\n      if (workflow.enabled) {\n        const schema = workflow.schema as any;\n        const hasCronTrigger = schema?.triggers?.some(\n          (trigger: any) => \n            trigger.type === 'cron' && \n            trigger.config?.schedule\n        );\n\n        if (hasCronTrigger) {\n          await this.scheduleWorkflow(workflow);\n        }\n      }\n    } catch (error) {\n      this.logger.error(\n        { error, workflowId },\n        'Failed to update workflow cron jobs',\n      );\n    }\n  }\n\n  /**\n   * Remove cron jobs when a workflow is deleted or disabled\n   */\n  async removeWorkflowCronJobs(workflowId: string): Promise<void> {\n    try {\n      await this.queueService.removeRepeatableJob(\n        QUEUE_NAMES.DEFAULT,\n        workflowId,\n      );\n\n      this.logger.info(\n        { workflowId },\n        'Removed cron jobs for workflow',\n      );\n    } catch (error) {\n      this.logger.error(\n        { error, workflowId },\n        'Failed to remove workflow cron jobs',\n      );\n    }\n  }\n\n  /**\n   * Get cron drift metrics for monitoring\n   */\n  async getCronDriftMetrics(): Promise<\n    Array<{\n      workflowId: string;\n      schedule: string;\n      nextRun: Date;\n      drift: number;\n    }>\n  > {\n    const metrics = [];\n    \n    try {\n      const repeatableJobs = await this.queueService.getRepeatableJobs(\n        QUEUE_NAMES.DEFAULT,\n      );\n\n      for (const job of repeatableJobs) {\n        if (job.id?.startsWith('cron-')) {\n          const workflowId = job.id.replace('cron-', '');\n          const nextRun = new Date(job.next);\n          const now = new Date();\n          const drift = nextRun.getTime() - now.getTime();\n\n          metrics.push({\n            workflowId,\n            schedule: job.pattern,\n            nextRun,\n            drift: Math.abs(drift),\n          });\n        }\n      }\n    } catch (error) {\n      this.logger.error({ error }, 'Failed to get cron drift metrics');\n    }\n\n    return metrics;\n  }\n\n  /**\n   * Schedule log pruning job to run daily at 2 AM UTC\n   */\n  private async scheduleLogPruning(): Promise<void> {\n    try {\n      const schedule = '0 2 * * *'; // Daily at 2 AM UTC\n      const olderThanDays = 90; // Default retention period\n\n      await this.queueService.addRepeatableJob(\n        QUEUE_NAMES.DEFAULT,\n        JOB_NAMES.PRUNE_LOGS,\n        {\n          olderThanDays,\n        },\n        {\n          pattern: schedule,\n          tz: 'UTC',\n        },\n      );\n\n      this.logger.info(\n        {\n          schedule,\n          olderThanDays,\n        },\n        'Scheduled log pruning job',\n      );\n    } catch (error) {\n      this.logger.error(\n        { error },\n        'Failed to schedule log pruning job',\n      );\n    }\n  }\n}"],"version":3}