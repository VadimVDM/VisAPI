d5771421ceb52e6b4ad7bd0d52109e1f
"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CronSeederService = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const nestjs_pino_1 = require("nestjs-pino");
const core_supabase_1 = require("@visapi/core-supabase");
const queue_service_1 = require("../queue/queue.service");
const shared_types_1 = require("@visapi/shared-types");
let CronSeederService = class CronSeederService {
    constructor(logger, supabase, queueService) {
        this.logger = logger;
        this.supabase = supabase;
        this.queueService = queueService;
    }
    onModuleInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.seedCronJobs();
        });
    }
    seedCronJobs() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.logger.info('Starting cron job seeding');
            try {
                // Get all enabled workflows with cron triggers
                const workflows = yield this.getWorkflowsWithCronTriggers();
                if (workflows.length === 0) {
                    this.logger.info('No workflows with cron triggers found');
                }
                else {
                    this.logger.info({ count: workflows.length }, 'Found workflows with cron triggers');
                }
                // Clear existing repeatable jobs first to ensure clean state
                yield this.clearExistingCronJobs();
                // Schedule log pruning job (daily at 2 AM)
                yield this.scheduleLogPruning();
                // Schedule each workflow
                for (const workflow of workflows) {
                    yield this.scheduleWorkflow(workflow);
                }
                this.logger.info('Cron job seeding completed successfully');
            }
            catch (error) {
                this.logger.error({ error }, 'Failed to seed cron jobs');
                throw error;
            }
        });
    }
    getWorkflowsWithCronTriggers() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { data, error } = yield this.supabase.client
                .from('workflows')
                .select('*')
                .eq('enabled', true);
            if (error) {
                throw new Error(`Failed to fetch workflows: ${error.message}`);
            }
            // Filter workflows that have cron triggers
            return (data || []).filter((workflow) => {
                var _a;
                const schema = workflow.schema;
                return (_a = schema === null || schema === void 0 ? void 0 : schema.triggers) === null || _a === void 0 ? void 0 : _a.some((trigger) => {
                    var _a;
                    return trigger.type === 'cron' &&
                        ((_a = trigger.config) === null || _a === void 0 ? void 0 : _a.schedule);
                });
            });
        });
    }
    clearExistingCronJobs() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                const repeatableJobs = yield this.queueService.getRepeatableJobs(shared_types_1.QUEUE_NAMES.DEFAULT);
                // Remove jobs that match our cron pattern
                for (const job of repeatableJobs) {
                    if (((_a = job.id) === null || _a === void 0 ? void 0 : _a.startsWith('cron-')) || job.id === 'log-pruning') {
                        const jobId = job.id.startsWith('cron-') ? job.id.replace('cron-', '') : job.id;
                        yield this.queueService.removeRepeatableJob(shared_types_1.QUEUE_NAMES.DEFAULT, jobId);
                    }
                }
            }
            catch (error) {
                this.logger.warn({ error }, 'Failed to clear existing cron jobs, continuing anyway');
            }
        });
    }
    scheduleWorkflow(workflow) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const schema = workflow.schema;
            const cronTriggers = schema.triggers.filter((trigger) => { var _a; return trigger.type === 'cron' && ((_a = trigger.config) === null || _a === void 0 ? void 0 : _a.schedule); });
            for (const trigger of cronTriggers) {
                try {
                    const schedule = trigger.config.schedule;
                    const timezone = trigger.config.timezone || 'UTC';
                    yield this.queueService.addRepeatableJob(shared_types_1.QUEUE_NAMES.DEFAULT, shared_types_1.JOB_NAMES.PROCESS_WORKFLOW, {
                        workflowId: workflow.id,
                        trigger: {
                            type: 'cron',
                            schedule,
                        },
                        metadata: {
                            workflowName: workflow.name,
                            scheduledBy: 'cron-seeder',
                        },
                    }, {
                        pattern: schedule,
                        tz: timezone,
                    });
                    this.logger.info({
                        workflowId: workflow.id,
                        workflowName: workflow.name,
                        schedule,
                        timezone,
                    }, 'Scheduled cron job for workflow');
                }
                catch (error) {
                    this.logger.error({
                        error,
                        workflowId: workflow.id,
                        workflowName: workflow.name,
                    }, 'Failed to schedule cron job for workflow');
                }
            }
        });
    }
    /**
     * Update cron jobs when a workflow is updated
     */
    updateWorkflowCronJobs(workflowId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                // Remove existing cron job
                yield this.queueService.removeRepeatableJob(shared_types_1.QUEUE_NAMES.DEFAULT, workflowId);
                // Fetch the updated workflow
                const { data: workflow, error } = yield this.supabase.client
                    .from('workflows')
                    .select('*')
                    .eq('id', workflowId)
                    .single();
                if (error || !workflow) {
                    this.logger.warn({ workflowId, error }, 'Workflow not found for cron update');
                    return;
                }
                // Reschedule if still enabled and has cron triggers
                if (workflow.enabled) {
                    const schema = workflow.schema;
                    const hasCronTrigger = (_a = schema === null || schema === void 0 ? void 0 : schema.triggers) === null || _a === void 0 ? void 0 : _a.some((trigger) => {
                        var _a;
                        return trigger.type === 'cron' &&
                            ((_a = trigger.config) === null || _a === void 0 ? void 0 : _a.schedule);
                    });
                    if (hasCronTrigger) {
                        yield this.scheduleWorkflow(workflow);
                    }
                }
            }
            catch (error) {
                this.logger.error({ error, workflowId }, 'Failed to update workflow cron jobs');
            }
        });
    }
    /**
     * Remove cron jobs when a workflow is deleted or disabled
     */
    removeWorkflowCronJobs(workflowId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.queueService.removeRepeatableJob(shared_types_1.QUEUE_NAMES.DEFAULT, workflowId);
                this.logger.info({ workflowId }, 'Removed cron jobs for workflow');
            }
            catch (error) {
                this.logger.error({ error, workflowId }, 'Failed to remove workflow cron jobs');
            }
        });
    }
    /**
     * Get cron drift metrics for monitoring
     */
    getCronDriftMetrics() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const metrics = [];
            try {
                const repeatableJobs = yield this.queueService.getRepeatableJobs(shared_types_1.QUEUE_NAMES.DEFAULT);
                for (const job of repeatableJobs) {
                    if ((_a = job.id) === null || _a === void 0 ? void 0 : _a.startsWith('cron-')) {
                        const workflowId = job.id.replace('cron-', '');
                        const nextRun = new Date(job.next);
                        const now = new Date();
                        const drift = nextRun.getTime() - now.getTime();
                        metrics.push({
                            workflowId,
                            schedule: job.pattern,
                            nextRun,
                            drift: Math.abs(drift),
                        });
                    }
                }
            }
            catch (error) {
                this.logger.error({ error }, 'Failed to get cron drift metrics');
            }
            return metrics;
        });
    }
    /**
     * Schedule log pruning job to run daily at 2 AM UTC
     */
    scheduleLogPruning() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const schedule = '0 2 * * *'; // Daily at 2 AM UTC
                const olderThanDays = 90; // Default retention period
                yield this.queueService.addRepeatableJob(shared_types_1.QUEUE_NAMES.DEFAULT, shared_types_1.JOB_NAMES.PRUNE_LOGS, {
                    olderThanDays,
                }, {
                    pattern: schedule,
                    tz: 'UTC',
                });
                this.logger.info({
                    schedule,
                    olderThanDays,
                }, 'Scheduled log pruning job');
            }
            catch (error) {
                this.logger.error({ error }, 'Failed to schedule log pruning job');
            }
        });
    }
};
exports.CronSeederService = CronSeederService;
exports.CronSeederService = CronSeederService = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__param(0, (0, nestjs_pino_1.InjectPinoLogger)(CronSeederService.name)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof nestjs_pino_1.PinoLogger !== "undefined" && nestjs_pino_1.PinoLogger) === "function" ? _a : Object, typeof (_b = typeof core_supabase_1.SupabaseService !== "undefined" && core_supabase_1.SupabaseService) === "function" ? _b : Object, typeof (_c = typeof queue_service_1.QueueService !== "undefined" && queue_service_1.QueueService) === "function" ? _c : Object])
], CronSeederService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,