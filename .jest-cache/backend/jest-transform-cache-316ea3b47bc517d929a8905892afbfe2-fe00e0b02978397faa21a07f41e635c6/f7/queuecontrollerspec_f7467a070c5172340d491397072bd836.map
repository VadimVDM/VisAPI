{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/queue/queue.controller.spec.ts","mappings":";;;AAAA,6CAAsD;AACtD,yDAAqD;AACrD,mDAA+C;AAC/C,uDAAmD;AACnD,uCAAyC;AAEzC,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,IAAI,UAA2B,CAAC;IAChC,IAAI,YAAuC,CAAC;IAE5C,UAAU,CAAC,GAAS,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,WAAW,EAAE,CAAC,kCAAe,CAAC;YAC9B,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,4BAAY;oBACrB,QAAQ,EAAE;wBACR,eAAe,EAAE,IAAI,CAAC,EAAE,EAAE;qBAC3B;iBACF;gBACD;oBACE,OAAO,EAAE,0BAAW;oBACpB,QAAQ,EAAE;wBACR,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE;wBACzB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;qBACvB;iBACF;gBACD;oBACE,OAAO,EAAE,gBAAS;oBAClB,QAAQ,EAAE;wBACR,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;qBACf;iBACF;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,MAAM,CAAC,GAAG,CAAkB,kCAAe,CAAC,CAAC;QAC1D,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,4BAAY,CAAC,CAAC;IAC1C,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,6BAA6B,EAAE,GAAS,EAAE;YAC3C,MAAM,WAAW,GAAG;gBAClB,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE;gBAClF,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE;gBAChF,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE;aAC9E,CAAC;YAEF,YAAY,CAAC,eAAe,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAE5D,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,UAAU,EAAE,CAAC;YAE7C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YACpC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC1D,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE,GAAS,EAAE;YAC5C,YAAY,CAAC,eAAe,CAAC,iBAAiB,CAC5C,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAC/B,CAAC;YAEF,MAAM,MAAM,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CACnD,mBAAmB,CACpB,CAAC;QACJ,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/queue/queue.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { QueueController } from './queue.controller';\nimport { QueueService } from './queue.service';\nimport { AuthService } from '../auth/auth.service';\nimport { Reflector } from '@nestjs/core';\n\ndescribe('QueueController', () => {\n  let controller: QueueController;\n  let queueService: jest.Mocked<QueueService>;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [QueueController],\n      providers: [\n        {\n          provide: QueueService,\n          useValue: {\n            getQueueMetrics: jest.fn(),\n          },\n        },\n        {\n          provide: AuthService,\n          useValue: {\n            validateApiKey: jest.fn(),\n            checkScopes: jest.fn(),\n          },\n        },\n        {\n          provide: Reflector,\n          useValue: {\n            get: jest.fn(),\n          },\n        },\n      ],\n    }).compile();\n\n    controller = module.get<QueueController>(QueueController);\n    queueService = module.get(QueueService);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('getMetrics', () => {\n    it('should return queue metrics', async () => {\n      const mockMetrics = [\n        { name: 'critical', waiting: 5, active: 2, completed: 100, failed: 3, delayed: 1 },\n        { name: 'default', waiting: 2, active: 1, completed: 50, failed: 1, delayed: 0 },\n        { name: 'bulk', waiting: 1, active: 0, completed: 25, failed: 0, delayed: 0 },\n      ];\n\n      queueService.getQueueMetrics.mockResolvedValue(mockMetrics);\n\n      const result = await controller.getMetrics();\n\n      expect(result).toEqual(mockMetrics);\n      expect(queueService.getQueueMetrics).toHaveBeenCalled();\n    });\n\n    it('should handle service errors', async () => {\n      queueService.getQueueMetrics.mockRejectedValue(\n        new Error('Redis unavailable')\n      );\n\n      await expect(controller.getMetrics()).rejects.toThrow(\n        'Redis unavailable'\n      );\n    });\n  });\n});\n"],"version":3}