dbd9de3adb6f692b81162bacb9393fd2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = () => {
    var _a;
    return ({
        node: {
            env: process.env.NODE_ENV || 'development',
        },
        port: parseInt(process.env.PORT, 10) || 3000,
        cors: {
            origin: ((_a = process.env.CORS_ORIGIN) === null || _a === void 0 ? void 0 : _a.split(',')) || ['http://localhost:3001'],
        },
        database: {
            url: process.env.DATABASE_URL,
        },
        redis: {
            url: process.env.REDIS_URL,
        },
        supabase: {
            url: process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL,
            serviceRoleKey: process.env.SUPABASE_SERVICE_ROLE_KEY,
            anonKey: process.env.SUPABASE_ANON_KEY ||
                process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
        },
        auth: {
            jwtSecret: process.env.JWT_SECRET,
            apiKeyPrefix: process.env.API_KEY_PREFIX || 'visapi_',
            apiKeyExpiryDays: parseInt(process.env.API_KEY_EXPIRY_DAYS, 10) || 90,
        },
        rateLimit: {
            burst: parseInt(process.env.API_RATE_LIMIT_BURST, 10) || 200,
            sustained: parseInt(process.env.API_RATE_LIMIT_SUSTAINED, 10) || 2,
        },
        queue: {
            concurrency: parseInt(process.env.QUEUE_CONCURRENCY, 10) || 10,
            maxRetries: parseInt(process.env.QUEUE_MAX_RETRIES, 10) || 3,
            retryDelay: parseInt(process.env.QUEUE_RETRY_DELAY, 10) || 5000,
        },
        logging: {
            level: process.env.LOG_LEVEL || 'debug',
            format: process.env.LOG_FORMAT || 'json',
        },
        cgb: {
            apiUrl: process.env.CGB_API_URL || 'https://app.chatgptbuilder.io/api',
            apiKey: process.env.CGB_API_KEY || '',
            timeout: parseInt(process.env.CGB_TIMEOUT, 10) || 30000,
            retryAttempts: parseInt(process.env.CGB_RETRY_ATTEMPTS, 10) || 3,
            cacheTimeout: parseInt(process.env.CGB_CACHE_TIMEOUT, 10) || 3600,
        },
        slack: {
            webhookUrl: process.env.SLACK_WEBHOOK_URL || '',
            botToken: process.env.SLACK_BOT_TOKEN || '',
            signingSecret: process.env.SLACK_SIGNING_SECRET || '',
            defaultChannel: process.env.SLACK_DEFAULT_CHANNEL || '#alerts',
            enabled: process.env.SLACK_ENABLED === 'true',
        },
    });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZhZGltL1Byb2plY3RzL1Zpc0FQSS9saWJzL2JhY2tlbmQvY29yZS1jb25maWcvc3JjL2xpYi9jb25maWd1cmF0aW9uLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsa0JBQWUsR0FBRyxFQUFFOztJQUFDLE9BQUEsQ0FBQztRQUNwQixJQUFJLEVBQUU7WUFDSixHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksYUFBYTtTQUMzQztRQUNELElBQUksRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSTtRQUM1QyxJQUFJLEVBQUU7WUFDSixNQUFNLEVBQUUsQ0FBQSxNQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVywwQ0FBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyx1QkFBdUIsQ0FBQztTQUN6RTtRQUNELFFBQVEsRUFBRTtZQUNSLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVk7U0FDOUI7UUFDRCxLQUFLLEVBQUU7WUFDTCxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTO1NBQzNCO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCO1lBQ3JFLGNBQWMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QjtZQUNyRCxPQUFPLEVBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUI7Z0JBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCO1NBQzVDO1FBQ0QsSUFBSSxFQUFFO1lBQ0osU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVTtZQUNqQyxZQUFZLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLElBQUksU0FBUztZQUNyRCxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFO1NBQ3RFO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsS0FBSyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLEVBQUUsQ0FBQyxJQUFJLEdBQUc7WUFDNUQsU0FBUyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7U0FDbkU7UUFDRCxLQUFLLEVBQUU7WUFDTCxXQUFXLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRTtZQUM5RCxVQUFVLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQztZQUM1RCxVQUFVLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSTtTQUNoRTtRQUNELE9BQU8sRUFBRTtZQUNQLEtBQUssRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxPQUFPO1lBQ3ZDLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxNQUFNO1NBQ3pDO1FBQ0QsR0FBRyxFQUFFO1lBQ0gsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLG1DQUFtQztZQUN0RSxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksRUFBRTtZQUNyQyxPQUFPLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUs7WUFDdkQsYUFBYSxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDaEUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUk7U0FDbEU7UUFDRCxLQUFLLEVBQUU7WUFDTCxVQUFVLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxFQUFFO1lBQy9DLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsSUFBSSxFQUFFO1lBQzNDLGFBQWEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixJQUFJLEVBQUU7WUFDckQsY0FBYyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLElBQUksU0FBUztZQUM5RCxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEtBQUssTUFBTTtTQUM5QztLQUNGLENBQUMsQ0FBQTtDQUFBLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3ZhZGltL1Byb2plY3RzL1Zpc0FQSS9saWJzL2JhY2tlbmQvY29yZS1jb25maWcvc3JjL2xpYi9jb25maWd1cmF0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0ICgpID0+ICh7XG4gIG5vZGU6IHtcbiAgICBlbnY6IHByb2Nlc3MuZW52Lk5PREVfRU5WIHx8ICdkZXZlbG9wbWVudCcsXG4gIH0sXG4gIHBvcnQ6IHBhcnNlSW50KHByb2Nlc3MuZW52LlBPUlQsIDEwKSB8fCAzMDAwLFxuICBjb3JzOiB7XG4gICAgb3JpZ2luOiBwcm9jZXNzLmVudi5DT1JTX09SSUdJTj8uc3BsaXQoJywnKSB8fCBbJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMSddLFxuICB9LFxuICBkYXRhYmFzZToge1xuICAgIHVybDogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMLFxuICB9LFxuICByZWRpczoge1xuICAgIHVybDogcHJvY2Vzcy5lbnYuUkVESVNfVVJMLFxuICB9LFxuICBzdXBhYmFzZToge1xuICAgIHVybDogcHJvY2Vzcy5lbnYuU1VQQUJBU0VfVVJMIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCxcbiAgICBzZXJ2aWNlUm9sZUtleTogcHJvY2Vzcy5lbnYuU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWSxcbiAgICBhbm9uS2V5OlxuICAgICAgcHJvY2Vzcy5lbnYuU1VQQUJBU0VfQU5PTl9LRVkgfHxcbiAgICAgIHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZLFxuICB9LFxuICBhdXRoOiB7XG4gICAgand0U2VjcmV0OiBwcm9jZXNzLmVudi5KV1RfU0VDUkVULFxuICAgIGFwaUtleVByZWZpeDogcHJvY2Vzcy5lbnYuQVBJX0tFWV9QUkVGSVggfHwgJ3Zpc2FwaV8nLFxuICAgIGFwaUtleUV4cGlyeURheXM6IHBhcnNlSW50KHByb2Nlc3MuZW52LkFQSV9LRVlfRVhQSVJZX0RBWVMsIDEwKSB8fCA5MCxcbiAgfSxcbiAgcmF0ZUxpbWl0OiB7XG4gICAgYnVyc3Q6IHBhcnNlSW50KHByb2Nlc3MuZW52LkFQSV9SQVRFX0xJTUlUX0JVUlNULCAxMCkgfHwgMjAwLFxuICAgIHN1c3RhaW5lZDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuQVBJX1JBVEVfTElNSVRfU1VTVEFJTkVELCAxMCkgfHwgMixcbiAgfSxcbiAgcXVldWU6IHtcbiAgICBjb25jdXJyZW5jeTogcGFyc2VJbnQocHJvY2Vzcy5lbnYuUVVFVUVfQ09OQ1VSUkVOQ1ksIDEwKSB8fCAxMCxcbiAgICBtYXhSZXRyaWVzOiBwYXJzZUludChwcm9jZXNzLmVudi5RVUVVRV9NQVhfUkVUUklFUywgMTApIHx8IDMsXG4gICAgcmV0cnlEZWxheTogcGFyc2VJbnQocHJvY2Vzcy5lbnYuUVVFVUVfUkVUUllfREVMQVksIDEwKSB8fCA1MDAwLFxuICB9LFxuICBsb2dnaW5nOiB7XG4gICAgbGV2ZWw6IHByb2Nlc3MuZW52LkxPR19MRVZFTCB8fCAnZGVidWcnLFxuICAgIGZvcm1hdDogcHJvY2Vzcy5lbnYuTE9HX0ZPUk1BVCB8fCAnanNvbicsXG4gIH0sXG4gIGNnYjoge1xuICAgIGFwaVVybDogcHJvY2Vzcy5lbnYuQ0dCX0FQSV9VUkwgfHwgJ2h0dHBzOi8vYXBwLmNoYXRncHRidWlsZGVyLmlvL2FwaScsXG4gICAgYXBpS2V5OiBwcm9jZXNzLmVudi5DR0JfQVBJX0tFWSB8fCAnJyxcbiAgICB0aW1lb3V0OiBwYXJzZUludChwcm9jZXNzLmVudi5DR0JfVElNRU9VVCwgMTApIHx8IDMwMDAwLFxuICAgIHJldHJ5QXR0ZW1wdHM6IHBhcnNlSW50KHByb2Nlc3MuZW52LkNHQl9SRVRSWV9BVFRFTVBUUywgMTApIHx8IDMsXG4gICAgY2FjaGVUaW1lb3V0OiBwYXJzZUludChwcm9jZXNzLmVudi5DR0JfQ0FDSEVfVElNRU9VVCwgMTApIHx8IDM2MDAsXG4gIH0sXG4gIHNsYWNrOiB7XG4gICAgd2ViaG9va1VybDogcHJvY2Vzcy5lbnYuU0xBQ0tfV0VCSE9PS19VUkwgfHwgJycsXG4gICAgYm90VG9rZW46IHByb2Nlc3MuZW52LlNMQUNLX0JPVF9UT0tFTiB8fCAnJyxcbiAgICBzaWduaW5nU2VjcmV0OiBwcm9jZXNzLmVudi5TTEFDS19TSUdOSU5HX1NFQ1JFVCB8fCAnJyxcbiAgICBkZWZhdWx0Q2hhbm5lbDogcHJvY2Vzcy5lbnYuU0xBQ0tfREVGQVVMVF9DSEFOTkVMIHx8ICcjYWxlcnRzJyxcbiAgICBlbmFibGVkOiBwcm9jZXNzLmVudi5TTEFDS19FTkFCTEVEID09PSAndHJ1ZScsXG4gIH0sXG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==