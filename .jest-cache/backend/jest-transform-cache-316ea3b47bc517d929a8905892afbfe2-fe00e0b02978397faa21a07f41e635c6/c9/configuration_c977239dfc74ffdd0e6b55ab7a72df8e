3de3bfae7c57cca84deeba606760d826
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = () => {
    var _a;
    return ({
        node: {
            env: process.env.NODE_ENV || 'development',
        },
        port: parseInt(process.env.PORT, 10) || 3000,
        cors: {
            origin: ((_a = process.env.CORS_ORIGIN) === null || _a === void 0 ? void 0 : _a.split(',')) || ['http://localhost:3001'],
        },
        database: {
            url: process.env.DATABASE_URL,
        },
        redis: {
            url: process.env.REDIS_URL,
        },
        supabase: {
            url: process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL,
            serviceRoleKey: process.env.SUPABASE_SERVICE_ROLE_KEY,
            anonKey: process.env.SUPABASE_ANON_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
        },
        auth: {
            jwtSecret: process.env.JWT_SECRET,
            apiKeyPrefix: process.env.API_KEY_PREFIX || 'visapi_',
            apiKeyExpiryDays: parseInt(process.env.API_KEY_EXPIRY_DAYS, 10) || 90,
        },
        rateLimit: {
            burst: parseInt(process.env.API_RATE_LIMIT_BURST, 10) || 200,
            sustained: parseInt(process.env.API_RATE_LIMIT_SUSTAINED, 10) || 2,
        },
        queue: {
            concurrency: parseInt(process.env.QUEUE_CONCURRENCY, 10) || 10,
            maxRetries: parseInt(process.env.QUEUE_MAX_RETRIES, 10) || 3,
            retryDelay: parseInt(process.env.QUEUE_RETRY_DELAY, 10) || 5000,
        },
        logging: {
            level: process.env.LOG_LEVEL || 'debug',
            format: process.env.LOG_FORMAT || 'json',
        },
        cgb: {
            apiUrl: process.env.CGB_API_URL || 'https://app.chatgptbuilder.io/api',
            apiKey: process.env.CGB_API_KEY || '',
            timeout: parseInt(process.env.CGB_TIMEOUT, 10) || 30000,
            retryAttempts: parseInt(process.env.CGB_RETRY_ATTEMPTS, 10) || 3,
            cacheTimeout: parseInt(process.env.CGB_CACHE_TIMEOUT, 10) || 3600,
        },
    });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZhZGltL1Byb2plY3RzL1Zpc0FQSS9saWJzL2JhY2tlbmQvY29yZS1jb25maWcvc3JjL2xpYi9jb25maWd1cmF0aW9uLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsa0JBQWUsR0FBRyxFQUFFOztJQUFDLE9BQUEsQ0FBQztRQUNwQixJQUFJLEVBQUU7WUFDSixHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksYUFBYTtTQUMzQztRQUNELElBQUksRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSTtRQUM1QyxJQUFJLEVBQUU7WUFDSixNQUFNLEVBQUUsQ0FBQSxNQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVywwQ0FBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyx1QkFBdUIsQ0FBQztTQUN6RTtRQUNELFFBQVEsRUFBRTtZQUNSLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVk7U0FDOUI7UUFDRCxLQUFLLEVBQUU7WUFDTCxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTO1NBQzNCO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCO1lBQ3JFLGNBQWMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QjtZQUNyRCxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QjtTQUNwRjtRQUNELElBQUksRUFBRTtZQUNKLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVU7WUFDakMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxJQUFJLFNBQVM7WUFDckQsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRTtTQUN0RTtRQUNELFNBQVMsRUFBRTtZQUNULEtBQUssRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLENBQUMsSUFBSSxHQUFHO1lBQzVELFNBQVMsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDO1NBQ25FO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsV0FBVyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUU7WUFDOUQsVUFBVSxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDNUQsVUFBVSxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUk7U0FDaEU7UUFDRCxPQUFPLEVBQUU7WUFDUCxLQUFLLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLElBQUksT0FBTztZQUN2QyxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksTUFBTTtTQUN6QztRQUNELEdBQUcsRUFBRTtZQUNILE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxtQ0FBbUM7WUFDdEUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLEVBQUU7WUFDckMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLO1lBQ3ZELGFBQWEsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDO1lBQ2hFLFlBQVksRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJO1NBQ2xFO0tBQ0YsQ0FBQyxDQUFBO0NBQUEsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvdmFkaW0vUHJvamVjdHMvVmlzQVBJL2xpYnMvYmFja2VuZC9jb3JlLWNvbmZpZy9zcmMvbGliL2NvbmZpZ3VyYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgKCkgPT4gKHtcbiAgbm9kZToge1xuICAgIGVudjogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ2RldmVsb3BtZW50JyxcbiAgfSxcbiAgcG9ydDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuUE9SVCwgMTApIHx8IDMwMDAsXG4gIGNvcnM6IHtcbiAgICBvcmlnaW46IHByb2Nlc3MuZW52LkNPUlNfT1JJR0lOPy5zcGxpdCgnLCcpIHx8IFsnaHR0cDovL2xvY2FsaG9zdDozMDAxJ10sXG4gIH0sXG4gIGRhdGFiYXNlOiB7XG4gICAgdXJsOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwsXG4gIH0sXG4gIHJlZGlzOiB7XG4gICAgdXJsOiBwcm9jZXNzLmVudi5SRURJU19VUkwsXG4gIH0sXG4gIHN1cGFiYXNlOiB7XG4gICAgdXJsOiBwcm9jZXNzLmVudi5TVVBBQkFTRV9VUkwgfHwgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMLFxuICAgIHNlcnZpY2VSb2xlS2V5OiBwcm9jZXNzLmVudi5TVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZLFxuICAgIGFub25LZXk6IHByb2Nlc3MuZW52LlNVUEFCQVNFX0FOT05fS0VZIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZLFxuICB9LFxuICBhdXRoOiB7XG4gICAgand0U2VjcmV0OiBwcm9jZXNzLmVudi5KV1RfU0VDUkVULFxuICAgIGFwaUtleVByZWZpeDogcHJvY2Vzcy5lbnYuQVBJX0tFWV9QUkVGSVggfHwgJ3Zpc2FwaV8nLFxuICAgIGFwaUtleUV4cGlyeURheXM6IHBhcnNlSW50KHByb2Nlc3MuZW52LkFQSV9LRVlfRVhQSVJZX0RBWVMsIDEwKSB8fCA5MCxcbiAgfSxcbiAgcmF0ZUxpbWl0OiB7XG4gICAgYnVyc3Q6IHBhcnNlSW50KHByb2Nlc3MuZW52LkFQSV9SQVRFX0xJTUlUX0JVUlNULCAxMCkgfHwgMjAwLFxuICAgIHN1c3RhaW5lZDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuQVBJX1JBVEVfTElNSVRfU1VTVEFJTkVELCAxMCkgfHwgMixcbiAgfSxcbiAgcXVldWU6IHtcbiAgICBjb25jdXJyZW5jeTogcGFyc2VJbnQocHJvY2Vzcy5lbnYuUVVFVUVfQ09OQ1VSUkVOQ1ksIDEwKSB8fCAxMCxcbiAgICBtYXhSZXRyaWVzOiBwYXJzZUludChwcm9jZXNzLmVudi5RVUVVRV9NQVhfUkVUUklFUywgMTApIHx8IDMsXG4gICAgcmV0cnlEZWxheTogcGFyc2VJbnQocHJvY2Vzcy5lbnYuUVVFVUVfUkVUUllfREVMQVksIDEwKSB8fCA1MDAwLFxuICB9LFxuICBsb2dnaW5nOiB7XG4gICAgbGV2ZWw6IHByb2Nlc3MuZW52LkxPR19MRVZFTCB8fCAnZGVidWcnLFxuICAgIGZvcm1hdDogcHJvY2Vzcy5lbnYuTE9HX0ZPUk1BVCB8fCAnanNvbicsXG4gIH0sXG4gIGNnYjoge1xuICAgIGFwaVVybDogcHJvY2Vzcy5lbnYuQ0dCX0FQSV9VUkwgfHwgJ2h0dHBzOi8vYXBwLmNoYXRncHRidWlsZGVyLmlvL2FwaScsXG4gICAgYXBpS2V5OiBwcm9jZXNzLmVudi5DR0JfQVBJX0tFWSB8fCAnJyxcbiAgICB0aW1lb3V0OiBwYXJzZUludChwcm9jZXNzLmVudi5DR0JfVElNRU9VVCwgMTApIHx8IDMwMDAwLFxuICAgIHJldHJ5QXR0ZW1wdHM6IHBhcnNlSW50KHByb2Nlc3MuZW52LkNHQl9SRVRSWV9BVFRFTVBUUywgMTApIHx8IDMsXG4gICAgY2FjaGVUaW1lb3V0OiBwYXJzZUludChwcm9jZXNzLmVudi5DR0JfQ0FDSEVfVElNRU9VVCwgMTApIHx8IDM2MDAsXG4gIH0sXG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==