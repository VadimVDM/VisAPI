{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/api-keys/api-keys.controller.spec.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/api-keys/api-keys.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ApiKeysController } from './api-keys.controller';\nimport { AuthService } from '../auth/auth.service';\nimport { ApiKeyRecord } from '@visapi/shared-types';\nimport { CreateApiKeyDto } from './dto/create-api-key.dto';\n\ndescribe('ApiKeysController', () => {\n  let controller: ApiKeysController;\n  let authService: jest.Mocked<AuthService>;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [ApiKeysController],\n      providers: [\n        {\n          provide: AuthService,\n          useValue: {\n            createApiKey: jest.fn(),\n            listApiKeys: jest.fn(),\n            revokeApiKey: jest.fn(),\n          },\n        },\n      ],\n    }).compile();\n\n    controller = module.get<ApiKeysController>(ApiKeysController);\n    authService = module.get(AuthService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('createApiKey', () => {\n    const mockRequest = {\n      apiKey: {\n        created_by: 'user-123',\n      },\n    };\n\n    const createApiKeyDto: CreateApiKeyDto = {\n      name: 'Test API Key',\n      scopes: ['webhooks:trigger', 'workflows:read'],\n    };\n\n    it('should create a new API key successfully', async () => {\n      const mockResult = {\n        key: 'vapi_1234567890abcdef',\n        apiKey: {\n          id: 'api-key-123',\n          name: 'Test API Key',\n          hashed_key: '', // Legacy field\n          prefix: 'vapi_',\n          hashed_secret: 'hashed-secret',\n          scopes: ['webhooks:trigger', 'workflows:read'],\n          expires_at: '2025-04-14T00:00:00Z',\n          created_by: 'user-123',\n          created_at: '2025-01-14T00:00:00Z',\n          last_used_at: null,\n          updated_at: '2025-01-14T00:00:00Z',\n        } as ApiKeyRecord,\n      };\n\n      authService.createApiKey.mockResolvedValue(mockResult);\n\n      const result = await controller.createApiKey(\n        createApiKeyDto,\n        mockRequest as any\n      );\n\n      expect(result).toEqual({\n        id: 'api-key-123',\n        name: 'Test API Key',\n        prefix: 'vapi_',\n        scopes: ['webhooks:trigger', 'workflows:read'],\n        expires_at: '2025-04-14T00:00:00Z',\n        created_by: 'user-123',\n        created_at: '2025-01-14T00:00:00Z',\n        last_used_at: null,\n        updated_at: '2025-01-14T00:00:00Z',\n        key: mockResult.key,\n        message: 'Save this key securely. It will not be shown again.',\n      });\n\n      expect(authService.createApiKey).toHaveBeenCalledWith(\n        'Test API Key',\n        ['webhooks:trigger', 'workflows:read'],\n        'user-123'\n      );\n    });\n\n    it('should handle auth service errors', async () => {\n      authService.createApiKey.mockRejectedValue(\n        new Error('Failed to create API key')\n      );\n\n      await expect(\n        controller.createApiKey(createApiKeyDto, mockRequest as any)\n      ).rejects.toThrow('Failed to create API key');\n    });\n  });\n\n  describe('listApiKeys', () => {\n    const mockRequest = {};\n\n    it('should return list of API keys without sensitive data', async () => {\n      const mockApiKeys = [\n        {\n          id: 'key-1',\n          name: 'Production Key',\n          hashed_key: '', // Legacy field\n          prefix: 'vapi_',\n          hashed_secret: 'should-be-removed',\n          scopes: ['webhooks:trigger'],\n          expires_at: '2025-04-14T00:00:00Z',\n          created_at: '2025-01-14T00:00:00Z',\n          created_by: 'user-123',\n          last_used_at: null,\n          updated_at: '2025-01-14T00:00:00Z',\n        },\n        {\n          id: 'key-2',\n          name: 'Development Key',\n          hashed_key: '', // Legacy field\n          prefix: 'vapi_',\n          hashed_secret: 'should-also-be-removed',\n          scopes: ['workflows:read'],\n          expires_at: '2025-07-14T00:00:00Z',\n          created_at: '2025-01-10T00:00:00Z',\n          created_by: 'user-456',\n          last_used_at: '2025-01-12T10:30:00Z',\n          updated_at: '2025-01-10T00:00:00Z',\n        },\n      ];\n\n      authService.listApiKeys.mockResolvedValue(mockApiKeys);\n\n      const result = await controller.listApiKeys(mockRequest as any);\n\n      expect(result).toEqual([\n        {\n          id: 'key-1',\n          name: 'Production Key',\n          prefix: 'vapi_',\n          scopes: ['webhooks:trigger'],\n          expires_at: '2025-04-14T00:00:00Z',\n          created_at: '2025-01-14T00:00:00Z',\n          created_by: 'user-123',\n          last_used_at: null,\n          updated_at: '2025-01-14T00:00:00Z',\n        },\n        {\n          id: 'key-2',\n          name: 'Development Key',\n          prefix: 'vapi_',\n          scopes: ['workflows:read'],\n          expires_at: '2025-07-14T00:00:00Z',\n          created_at: '2025-01-10T00:00:00Z',\n          created_by: 'user-456',\n          last_used_at: '2025-01-12T10:30:00Z',\n          updated_at: '2025-01-10T00:00:00Z',\n        },\n      ]);\n\n      expect(authService.listApiKeys).toHaveBeenCalled();\n    });\n\n    it('should handle auth service errors when listing keys', async () => {\n      authService.listApiKeys.mockRejectedValue(\n        new Error('Failed to list API keys')\n      );\n\n      await expect(controller.listApiKeys(mockRequest as any)).rejects.toThrow(\n        'Failed to list API keys'\n      );\n    });\n  });\n\n  describe('revokeApiKey', () => {\n    it('should revoke an API key successfully', async () => {\n      const keyId = 'key-to-revoke';\n\n      authService.revokeApiKey.mockResolvedValue();\n\n      const result = await controller.revokeApiKey(keyId);\n\n      expect(result).toEqual({\n        message: 'API key revoked successfully',\n      });\n\n      expect(authService.revokeApiKey).toHaveBeenCalledWith(keyId);\n    });\n\n    it('should handle auth service errors when revoking key', async () => {\n      const keyId = 'key-to-revoke';\n\n      authService.revokeApiKey.mockRejectedValue(\n        new Error('Failed to revoke API key')\n      );\n\n      await expect(controller.revokeApiKey(keyId)).rejects.toThrow(\n        'Failed to revoke API key'\n      );\n    });\n  });\n});\n"],"version":3}