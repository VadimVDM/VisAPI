eef6825e6854cf46b1f888a8acad2e49
"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiKeyGuard = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const auth_service_1 = require("../auth.service");
const scopes_decorator_1 = require("../decorators/scopes.decorator");
let ApiKeyGuard = class ApiKeyGuard {
    constructor(authService, reflector) {
        this.authService = authService;
        this.reflector = reflector;
    }
    canActivate(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const request = context.switchToHttp().getRequest();
            const apiKey = this.extractApiKey(request);
            if (!apiKey) {
                throw new common_1.UnauthorizedException('API key is required');
            }
            const validatedKey = yield this.authService.validateApiKey(apiKey);
            if (!validatedKey) {
                throw new common_1.UnauthorizedException('Invalid or expired API key');
            }
            // Check scopes if specified
            const requiredScopes = this.reflector.getAllAndOverride(scopes_decorator_1.SCOPES_KEY, [
                context.getHandler(),
                context.getClass(),
            ]) || [];
            if (requiredScopes.length > 0) {
                const hasScopes = yield this.authService.checkScopes(validatedKey, requiredScopes);
                if (!hasScopes) {
                    throw new common_1.UnauthorizedException(`Insufficient permissions. Required scopes: ${requiredScopes.join(', ')}`);
                }
            }
            // Attach the validated key to the request
            request.apiKey = validatedKey;
            return true;
        });
    }
    extractApiKey(request) {
        // Check X-API-Key header
        const apiKey = request.headers['x-api-key'];
        if (apiKey) {
            return apiKey;
        }
        // Check Authorization Bearer token
        const authHeader = request.headers.authorization;
        if (authHeader === null || authHeader === void 0 ? void 0 : authHeader.startsWith('Bearer ')) {
            return authHeader.substring(7);
        }
        return null;
    }
};
exports.ApiKeyGuard = ApiKeyGuard;
exports.ApiKeyGuard = ApiKeyGuard = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _a : Object, typeof (_b = typeof core_1.Reflector !== "undefined" && core_1.Reflector) === "function" ? _b : Object])
], ApiKeyGuard);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZhZGltL1Byb2plY3RzL1Zpc0FQSS9hcHBzL2JhY2tlbmQvc3JjL2F1dGgvZ3VhcmRzL2FwaS1rZXkuZ3VhcmQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FLd0I7QUFDeEIsdUNBQXlDO0FBQ3pDLGtEQUE4QztBQUM5QyxxRUFBNEQ7QUFHckQsSUFBTSxXQUFXLEdBQWpCLE1BQU0sV0FBVztJQUN0QixZQUNtQixXQUF3QixFQUN4QixTQUFvQjtRQURwQixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixjQUFTLEdBQVQsU0FBUyxDQUFXO0lBQ3BDLENBQUM7SUFFRSxXQUFXLENBQUMsT0FBeUI7O1lBQ3pDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNwRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRTNDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDWixNQUFNLElBQUksOEJBQXFCLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUN6RCxDQUFDO1lBRUQsTUFBTSxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7Z0JBQ2xCLE1BQU0sSUFBSSw4QkFBcUIsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1lBQ2hFLENBQUM7WUFFRCw0QkFBNEI7WUFDNUIsTUFBTSxjQUFjLEdBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQVcsNkJBQVUsRUFBRTtnQkFDckQsT0FBTyxDQUFDLFVBQVUsRUFBRTtnQkFDcEIsT0FBTyxDQUFDLFFBQVEsRUFBRTthQUNuQixDQUFDLElBQUksRUFBRSxDQUFDO1lBRVgsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUM5QixNQUFNLFNBQVMsR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUNsRCxZQUFZLEVBQ1osY0FBYyxDQUNmLENBQUM7Z0JBRUYsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO29CQUNmLE1BQU0sSUFBSSw4QkFBcUIsQ0FDN0IsOENBQThDLGNBQWMsQ0FBQyxJQUFJLENBQy9ELElBQUksQ0FDTCxFQUFFLENBQ0osQ0FBQztnQkFDSixDQUFDO1lBQ0gsQ0FBQztZQUVELDBDQUEwQztZQUMxQyxPQUFPLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQztZQUU5QixPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7S0FBQTtJQUVPLGFBQWEsQ0FBQyxPQUFZO1FBQ2hDLHlCQUF5QjtRQUN6QixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzVDLElBQUksTUFBTSxFQUFFLENBQUM7WUFDWCxPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDO1FBRUQsbUNBQW1DO1FBQ25DLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQ2pELElBQUksVUFBVSxhQUFWLFVBQVUsdUJBQVYsVUFBVSxDQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1lBQ3RDLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxDQUFDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQTtBQTlEWSxrQ0FBVztzQkFBWCxXQUFXO0lBRHZCLElBQUEsbUJBQVUsR0FBRTtpRUFHcUIsMEJBQVcsb0JBQVgsMEJBQVcsb0RBQ2IsZ0JBQVMsb0JBQVQsZ0JBQVM7R0FINUIsV0FBVyxDQThEdkIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3ZhZGltL1Byb2plY3RzL1Zpc0FQSS9hcHBzL2JhY2tlbmQvc3JjL2F1dGgvZ3VhcmRzL2FwaS1rZXkuZ3VhcmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSW5qZWN0YWJsZSxcbiAgQ2FuQWN0aXZhdGUsXG4gIEV4ZWN1dGlvbkNvbnRleHQsXG4gIFVuYXV0aG9yaXplZEV4Y2VwdGlvbixcbn0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHsgUmVmbGVjdG9yIH0gZnJvbSAnQG5lc3Rqcy9jb3JlJztcbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnLi4vYXV0aC5zZXJ2aWNlJztcbmltcG9ydCB7IFNDT1BFU19LRVkgfSBmcm9tICcuLi9kZWNvcmF0b3JzL3Njb3Blcy5kZWNvcmF0b3InO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXBpS2V5R3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVmbGVjdG9yOiBSZWZsZWN0b3JcbiAgKSB7fVxuXG4gIGFzeW5jIGNhbkFjdGl2YXRlKGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gY29udGV4dC5zd2l0Y2hUb0h0dHAoKS5nZXRSZXF1ZXN0KCk7XG4gICAgY29uc3QgYXBpS2V5ID0gdGhpcy5leHRyYWN0QXBpS2V5KHJlcXVlc3QpO1xuXG4gICAgaWYgKCFhcGlLZXkpIHtcbiAgICAgIHRocm93IG5ldyBVbmF1dGhvcml6ZWRFeGNlcHRpb24oJ0FQSSBrZXkgaXMgcmVxdWlyZWQnKTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWxpZGF0ZWRLZXkgPSBhd2FpdCB0aGlzLmF1dGhTZXJ2aWNlLnZhbGlkYXRlQXBpS2V5KGFwaUtleSk7XG4gICAgaWYgKCF2YWxpZGF0ZWRLZXkpIHtcbiAgICAgIHRocm93IG5ldyBVbmF1dGhvcml6ZWRFeGNlcHRpb24oJ0ludmFsaWQgb3IgZXhwaXJlZCBBUEkga2V5Jyk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgc2NvcGVzIGlmIHNwZWNpZmllZFxuICAgIGNvbnN0IHJlcXVpcmVkU2NvcGVzID1cbiAgICAgIHRoaXMucmVmbGVjdG9yLmdldEFsbEFuZE92ZXJyaWRlPHN0cmluZ1tdPihTQ09QRVNfS0VZLCBbXG4gICAgICAgIGNvbnRleHQuZ2V0SGFuZGxlcigpLFxuICAgICAgICBjb250ZXh0LmdldENsYXNzKCksXG4gICAgICBdKSB8fCBbXTtcblxuICAgIGlmIChyZXF1aXJlZFNjb3Blcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBoYXNTY29wZXMgPSBhd2FpdCB0aGlzLmF1dGhTZXJ2aWNlLmNoZWNrU2NvcGVzKFxuICAgICAgICB2YWxpZGF0ZWRLZXksXG4gICAgICAgIHJlcXVpcmVkU2NvcGVzXG4gICAgICApO1xuXG4gICAgICBpZiAoIWhhc1Njb3Blcykge1xuICAgICAgICB0aHJvdyBuZXcgVW5hdXRob3JpemVkRXhjZXB0aW9uKFxuICAgICAgICAgIGBJbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMuIFJlcXVpcmVkIHNjb3BlczogJHtyZXF1aXJlZFNjb3Blcy5qb2luKFxuICAgICAgICAgICAgJywgJ1xuICAgICAgICAgICl9YFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEF0dGFjaCB0aGUgdmFsaWRhdGVkIGtleSB0byB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3QuYXBpS2V5ID0gdmFsaWRhdGVkS2V5O1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RBcGlLZXkocmVxdWVzdDogYW55KTogc3RyaW5nIHwgbnVsbCB7XG4gICAgLy8gQ2hlY2sgWC1BUEktS2V5IGhlYWRlclxuICAgIGNvbnN0IGFwaUtleSA9IHJlcXVlc3QuaGVhZGVyc1sneC1hcGkta2V5J107XG4gICAgaWYgKGFwaUtleSkge1xuICAgICAgcmV0dXJuIGFwaUtleTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBBdXRob3JpemF0aW9uIEJlYXJlciB0b2tlblxuICAgIGNvbnN0IGF1dGhIZWFkZXIgPSByZXF1ZXN0LmhlYWRlcnMuYXV0aG9yaXphdGlvbjtcbiAgICBpZiAoYXV0aEhlYWRlcj8uc3RhcnRzV2l0aCgnQmVhcmVyICcpKSB7XG4gICAgICByZXR1cm4gYXV0aEhlYWRlci5zdWJzdHJpbmcoNyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==