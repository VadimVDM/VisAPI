493a0d65b3c7bc0f9dfcad1283c41cf1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const testing_1 = require("@nestjs/testing");
const terminus_1 = require("@nestjs/terminus");
const supabase_health_1 = require("./supabase.health");
const core_supabase_1 = require("@visapi/core-supabase");
describe('SupabaseHealthIndicator', () => {
    let indicator;
    let supabaseService;
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        jest.clearAllMocks();
        const mockSupabaseService = {
            checkConnection: jest.fn(),
        };
        const module = yield testing_1.Test.createTestingModule({
            providers: [
                supabase_health_1.SupabaseHealthIndicator,
                {
                    provide: core_supabase_1.SupabaseService,
                    useValue: mockSupabaseService,
                },
            ],
        }).compile();
        indicator = module.get(supabase_health_1.SupabaseHealthIndicator);
        supabaseService = module.get(core_supabase_1.SupabaseService);
    }));
    it('should be defined', () => {
        expect(indicator).toBeDefined();
    });
    describe('isHealthy', () => {
        const healthKey = 'supabase';
        it('should return healthy status when Supabase connection is successful', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            supabaseService.checkConnection.mockResolvedValue(true);
            const result = yield indicator.isHealthy(healthKey);
            expect(result).toEqual({
                supabase: {
                    status: 'up',
                },
            });
            expect(supabaseService.checkConnection).toHaveBeenCalledTimes(1);
        }));
        it('should throw HealthCheckError when Supabase connection fails', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            supabaseService.checkConnection.mockResolvedValue(false);
            yield expect(indicator.isHealthy(healthKey)).rejects.toThrow(terminus_1.HealthCheckError);
            expect(supabaseService.checkConnection).toHaveBeenCalledTimes(1);
        }));
        it('should throw HealthCheckError when Supabase service throws an error', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const error = new Error('Network timeout');
            supabaseService.checkConnection.mockRejectedValue(error);
            yield expect(indicator.isHealthy(healthKey)).rejects.toThrow(terminus_1.HealthCheckError);
            try {
                yield indicator.isHealthy(healthKey);
            }
            catch (err) {
                expect(err).toBeInstanceOf(terminus_1.HealthCheckError);
                expect(err.message).toBe('Supabase connection failed');
                expect(err.causes).toEqual({
                    supabase: {
                        status: 'down',
                    },
                });
            }
        }));
        it('should include the provided key in the health status', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const customKey = 'supabase_cluster';
            supabaseService.checkConnection.mockResolvedValue(true);
            const result = yield indicator.isHealthy(customKey);
            expect(result).toHaveProperty(customKey);
            expect(result[customKey]).toEqual({
                status: 'up',
            });
        }));
        it('should handle Supabase service timeout gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            supabaseService.checkConnection.mockResolvedValue(false);
            try {
                yield indicator.isHealthy(healthKey);
            }
            catch (err) {
                expect(err).toBeInstanceOf(terminus_1.HealthCheckError);
                expect(err.message).toBe('Supabase connection failed');
                expect(err.causes).toEqual({
                    supabase: {
                        status: 'down',
                    },
                });
            }
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,