{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/webhooks/webhooks.controller.spec.ts","mappings":";;;AAAA,6CAAsD;AACtD,2CAA+E;AAC/E,uCAAyC;AACzC,+DAA2D;AAC3D,0DAAsD;AACtD,mDAAwD;AACxD,uDAAmD;AACnD,uDAA8D;AAG9D,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,UAA8B,CAAC;IACnC,IAAI,YAAuC,CAAC;IAC5C,IAAI,kBAAmD,CAAC;IAExD,UAAU,CAAC,GAAS,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,WAAW,EAAE,CAAC,wCAAkB,CAAC;YACjC,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,4BAAY;oBACrB,QAAQ,EAAE;wBACR,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;qBAClB;iBACF;gBACD;oBACE,OAAO,EAAE,+BAAkB;oBAC3B,QAAQ,EAAE;wBACR,eAAe,EAAE,IAAI,CAAC,EAAE,EAAE;qBAC3B;iBACF;gBACD;oBACE,OAAO,EAAE,0BAAW;oBACpB,QAAQ,EAAE;wBACR,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE;wBACzB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;qBACvB;iBACF;gBACD;oBACE,OAAO,EAAE,gBAAS;oBAClB,QAAQ,EAAE;wBACR,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC;qBACjD;iBACF;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,MAAM,CAAC,GAAG,CAAqB,wCAAkB,CAAC,CAAC;QAChE,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,4BAAY,CAAC,CAAC;QACxC,kBAAkB,GAAG,MAAM,CAAC,GAAG,CAAC,+BAAkB,CAAC,CAAC;IACtD,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,MAAM,OAAO,GAAG,EAAE,EAAE,EAAE,SAAS,EAAS,CAAC;QACzC,MAAM,YAAY,GAAG;YACnB,aAAa,EAAE,UAAU;YACzB,QAAQ,EAAE,SAAS;YACnB,MAAM,EAAE,UAAU;YAClB,aAAa,EAAE,YAAY;SAC5B,CAAC;QAEF,UAAU,CAAC,GAAG,EAAE;YACd,YAAY,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAC/C,kBAAkB,CAAC,eAAe,CAAC,kBAAkB,CACnD,CAAO,GAAG,EAAE,EAAE,EAAE,EAAE,0DAAC,OAAA,MAAM,EAAE,EAAE,CAAA,GAAA,CAC9B,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,GAAS,EAAE;YACvE,MAAM,UAAU,GAAG,cAAc,CAAC;YAClC,MAAM,cAAc,GAAG,iBAAiB,CAAC;YAEzC,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,aAAa,CAC3C,UAAU,EACV,YAAY,EACZ,cAAc,EACd,kBAAkB,CACnB,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,MAAM,EAAE,UAAU;gBAClB,KAAK,EAAE,SAAS;gBAChB,OAAO,EAAE,4CAA4C;aACtD,CAAC,CAAC;YAEH,MAAM,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,oBAAoB,CAC7D,cAAc,EACd,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,EACpB,IAAI,CACL,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAC9C,0BAAW,CAAC,OAAO,EACnB,wBAAS,CAAC,gBAAgB,EAC1B;gBACE,UAAU;gBACV,OAAO,EAAE,YAAY;gBACrB,UAAU,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBAC9B,cAAc;aACf,CACF,CAAC;QACJ,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,kEAAkE,EAAE,GAAS,EAAE;YAChF,MAAM,MAAM,CACV,UAAU,CAAC,aAAa,CACtB,cAAc,EACd,YAAY,EACZ,SAAS,EAAE,qBAAqB;YAChC,kBAAkB,CACnB,CACF,CAAC,OAAO,CAAC,OAAO,CAAC,4BAAmB,CAAC,CAAC;YACvC,MAAM,CAAC,GAAG,EAAE;gBACV,MAAM,IAAI,4BAAmB,CAAC,oCAAoC,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC,OAAO,CAAC,oCAAoC,CAAC,CAAC;QACnD,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,+DAA+D,EAAE,GAAS,EAAE;YAC7E,MAAM,MAAM,CACV,UAAU,CAAC,aAAa,CACtB,cAAc,EACd,YAAY,EACZ,iBAAiB,EACjB,YAAY,CAAC,2BAA2B;aACzC,CACF,CAAC,OAAO,CAAC,OAAO,CAAC,4BAAmB,CAAC,CAAC;YACvC,MAAM,CAAC,GAAG,EAAE;gBACV,MAAM,IAAI,4BAAmB,CAC3B,qFAAqF,CACtF,CAAC;YACJ,CAAC,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;QACzC,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,GAAS,EAAE;YAC3D,MAAM,UAAU,CAAC,aAAa,CAC5B,cAAc,EACd,YAAY,EACZ,iBAAiB,EACjB,kBAAkB,CACnB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACjD,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,8DAA8D,EAAE,GAAS,EAAE;YAC5E,MAAM,UAAU,CAAC,aAAa,CAC5B,cAAc,EACd,YAAY,EACZ,iBAAiB,EACjB,mCAAmC,CACpC,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACjD,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAS,EAAE;YACvD,MAAM,UAAU,CAAC,aAAa,CAC5B,cAAc,EACd,YAAY,EACZ,iBAAiB,EACjB,SAAS,CAAC,kBAAkB;aAC7B,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACjD,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE,GAAS,EAAE;YACxE,qCAAqC;YACrC,MAAM,YAAY,GAAG;gBACnB,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,QAAQ;aACvC,CAAC;YAEF,MAAM,MAAM,CACV,UAAU,CAAC,aAAa,CACtB,cAAc,EACd,YAAY,EACZ,iBAAiB,EACjB,kBAAkB,CACnB,CACF,CAAC,OAAO,CAAC,OAAO,CAAC,iCAAwB,CAAC,CAAC;YAC5C,MAAM,CAAC,GAAG,EAAE;gBACV,MAAM,IAAI,iCAAwB,CAAC,6BAA6B,CAAC,CAAC;YACpE,CAAC,CAAC,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;QAC5C,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,GAAS,EAAE;YAC1E,MAAM,UAAU,GAAG,cAAc,CAAC;YAClC,MAAM,cAAc,GAAG,gBAAgB,CAAC;YAExC,mDAAmD;YACnD,MAAM,YAAY,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,gBAAgB,EAAE,CAAC;YACnE,kBAAkB,CAAC,eAAe,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YAEnE,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,aAAa,CAC3C,UAAU,EACV,YAAY,EACZ,cAAc,EACd,kBAAkB,CACnB,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YACrC,MAAM,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,oBAAoB,CAC7D,cAAc,EACd,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,EACpB,IAAI,CACL,CAAC;QACJ,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAS,EAAE;YACzD,MAAM,UAAU,GAAG,oBAAoB,CAAC;YACxC,MAAM,cAAc,GAAG,iBAAiB,CAAC;YACzC,MAAM,OAAO,GAAG;gBACd,aAAa,EAAE,SAAS;gBACxB,MAAM,EAAE,cAAc;aACvB,CAAC;YAEF,MAAM,UAAU,CAAC,aAAa,CAC5B,UAAU,EACV,OAAO,EACP,cAAc,EACd,kBAAkB,CACnB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAC9C,0BAAW,CAAC,OAAO,EACnB,wBAAS,CAAC,gBAAgB,EAC1B;gBACE,UAAU;gBACV,OAAO;gBACP,UAAU,EAAE,MAAM,CAAC,cAAc,CAAC,sCAAsC,CAAC,EAAE,kBAAkB;gBAC7F,cAAc;aACf,CACF,CAAC;QACJ,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAS,EAAE;YAC7D,YAAY,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC;YAE5E,2DAA2D;YAC3D,kDAAkD;YAClD,kBAAkB,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAO,GAAG,EAAE,EAAE,EAAE,EAAE;gBACtE,OAAO,MAAM,EAAE,EAAE,CAAC,CAAC,qDAAqD;YAC1E,CAAC,CAAA,CAAC,CAAC;YAEH,MAAM,MAAM,CACV,UAAU,CAAC,aAAa,CACtB,cAAc,EACd,YAAY,EACZ,iBAAiB,EACjB,kBAAkB,CACnB,CACF,CAAC,OAAO,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/webhooks/webhooks.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { BadRequestException, PayloadTooLargeException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { WebhooksController } from './webhooks.controller';\nimport { QueueService } from '../queue/queue.service';\nimport { IdempotencyService } from '@visapi/util-redis';\nimport { AuthService } from '../auth/auth.service';\nimport { QUEUE_NAMES, JOB_NAMES } from '@visapi/shared-types';\nimport { Job } from 'bullmq';\n\ndescribe('WebhooksController', () => {\n  let controller: WebhooksController;\n  let queueService: jest.Mocked<QueueService>;\n  let idempotencyService: jest.Mocked<IdempotencyService>;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [WebhooksController],\n      providers: [\n        {\n          provide: QueueService,\n          useValue: {\n            addJob: jest.fn(),\n          },\n        },\n        {\n          provide: IdempotencyService,\n          useValue: {\n            checkAndExecute: jest.fn(),\n          },\n        },\n        {\n          provide: AuthService,\n          useValue: {\n            validateApiKey: jest.fn(),\n            checkScopes: jest.fn(),\n          },\n        },\n        {\n          provide: Reflector,\n          useValue: {\n            getAllAndOverride: jest.fn().mockReturnValue([]),\n          },\n        },\n      ],\n    }).compile();\n\n    controller = module.get<WebhooksController>(WebhooksController);\n    queueService = module.get(QueueService);\n    idempotencyService = module.get(IdempotencyService);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('handleWebhook', () => {\n    const mockJob = { id: 'job-123' } as Job;\n    const validPayload = {\n      applicantName: 'John Doe',\n      visaType: 'Tourist',\n      status: 'approved',\n      applicationId: 'APP-123456',\n    };\n\n    beforeEach(() => {\n      queueService.addJob.mockResolvedValue(mockJob);\n      idempotencyService.checkAndExecute.mockImplementation(\n        async (key, fn) => await fn()\n      );\n    });\n\n    it('should handle webhook successfully with idempotency key', async () => {\n      const webhookKey = 'test-webhook';\n      const idempotencyKey = 'idempotency-123';\n\n      const result = await controller.handleWebhook(\n        webhookKey,\n        validPayload,\n        idempotencyKey,\n        'application/json'\n      );\n\n      expect(result).toEqual({\n        status: 'accepted',\n        jobId: 'job-123',\n        message: 'Webhook received and queued for processing',\n      });\n\n      expect(idempotencyService.checkAndExecute).toHaveBeenCalledWith(\n        idempotencyKey,\n        expect.any(Function),\n        3600\n      );\n\n      expect(queueService.addJob).toHaveBeenCalledWith(\n        QUEUE_NAMES.DEFAULT,\n        JOB_NAMES.PROCESS_WORKFLOW,\n        {\n          webhookKey,\n          payload: validPayload,\n          receivedAt: expect.any(String),\n          idempotencyKey,\n        }\n      );\n    });\n\n    it('should throw BadRequestException when idempotency key is missing', async () => {\n      await expect(\n        controller.handleWebhook(\n          'test-webhook',\n          validPayload,\n          undefined, // no idempotency key\n          'application/json'\n        )\n      ).rejects.toThrow(BadRequestException);\n      expect(() => {\n        throw new BadRequestException('Idempotency-Key header is required');\n      }).toThrow('Idempotency-Key header is required');\n    });\n\n    it('should throw BadRequestException for unsupported content type', async () => {\n      await expect(\n        controller.handleWebhook(\n          'test-webhook',\n          validPayload,\n          'idempotency-123',\n          'text/plain' // unsupported content type\n        )\n      ).rejects.toThrow(BadRequestException);\n      expect(() => {\n        throw new BadRequestException(\n          'Unsupported content type. Use application/json or application/x-www-form-urlencoded'\n        );\n      }).toThrow('Unsupported content type');\n    });\n\n    it('should accept application/json content type', async () => {\n      await controller.handleWebhook(\n        'test-webhook',\n        validPayload,\n        'idempotency-123',\n        'application/json'\n      );\n\n      expect(queueService.addJob).toHaveBeenCalled();\n    });\n\n    it('should accept application/x-www-form-urlencoded content type', async () => {\n      await controller.handleWebhook(\n        'test-webhook',\n        validPayload,\n        'idempotency-123',\n        'application/x-www-form-urlencoded'\n      );\n\n      expect(queueService.addJob).toHaveBeenCalled();\n    });\n\n    it('should work without content type header', async () => {\n      await controller.handleWebhook(\n        'test-webhook',\n        validPayload,\n        'idempotency-123',\n        undefined // no content type\n      );\n\n      expect(queueService.addJob).toHaveBeenCalled();\n    });\n\n    it('should throw PayloadTooLargeException for large payloads', async () => {\n      // Create a payload larger than 512KB\n      const largePayload = {\n        data: 'x'.repeat(513 * 1024), // 513KB\n      };\n\n      await expect(\n        controller.handleWebhook(\n          'test-webhook',\n          largePayload,\n          'idempotency-123',\n          'application/json'\n        )\n      ).rejects.toThrow(PayloadTooLargeException);\n      expect(() => {\n        throw new PayloadTooLargeException('Payload exceeds 512KB limit');\n      }).toThrow('Payload exceeds 512KB limit');\n    });\n\n    it('should delegate idempotency handling to IdempotencyService', async () => {\n      const webhookKey = 'test-webhook';\n      const idempotencyKey = 'unique-key-123';\n\n      // Mock idempotency service to return cached result\n      const cachedResult = { status: 'cached', jobId: 'cached-job-123' };\n      idempotencyService.checkAndExecute.mockResolvedValue(cachedResult);\n\n      const result = await controller.handleWebhook(\n        webhookKey,\n        validPayload,\n        idempotencyKey,\n        'application/json'\n      );\n\n      expect(result).toEqual(cachedResult);\n      expect(idempotencyService.checkAndExecute).toHaveBeenCalledWith(\n        idempotencyKey,\n        expect.any(Function),\n        3600\n      );\n    });\n\n    it('should pass webhook metadata to queue job', async () => {\n      const webhookKey = 'visa-status-update';\n      const idempotencyKey = 'idempotency-456';\n      const payload = {\n        applicationId: 'APP-789',\n        status: 'under_review',\n      };\n\n      await controller.handleWebhook(\n        webhookKey,\n        payload,\n        idempotencyKey,\n        'application/json'\n      );\n\n      expect(queueService.addJob).toHaveBeenCalledWith(\n        QUEUE_NAMES.DEFAULT,\n        JOB_NAMES.PROCESS_WORKFLOW,\n        {\n          webhookKey,\n          payload,\n          receivedAt: expect.stringMatching(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/), // ISO date format\n          idempotencyKey,\n        }\n      );\n    });\n\n    it('should handle queue service errors gracefully', async () => {\n      queueService.addJob.mockRejectedValue(new Error('Redis connection failed'));\n\n      // Since the error happens inside the idempotency function,\n      // it should be propagated through checkAndExecute\n      idempotencyService.checkAndExecute.mockImplementation(async (key, fn) => {\n        return await fn(); // This will throw the error from queueService.addJob\n      });\n\n      await expect(\n        controller.handleWebhook(\n          'test-webhook',\n          validPayload,\n          'idempotency-123',\n          'application/json'\n        )\n      ).rejects.toThrow('Redis connection failed');\n    });\n  });\n});"],"version":3}