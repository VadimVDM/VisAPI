{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/logs/services/log.service.ts","mappings":";;;;;;AAAA,2CAAoD;AACpD,yDAAwD;AACxD,mEAA8D;AAyCvD,IAAM,UAAU,kBAAhB,MAAM,UAAU;IAGrB,YACmB,QAAyB,EACzB,mBAAwC;QADxC,aAAQ,GAAR,QAAQ,CAAiB;QACzB,wBAAmB,GAAnB,mBAAmB,CAAqB;QAJ1C,WAAM,GAAG,IAAI,eAAM,CAAC,YAAU,CAAC,IAAI,CAAC,CAAC;IAKnD,CAAC;IAEJ;;OAEG;IACG,SAAS,CAAC,QAAkB;;YAChC,IAAI,CAAC;gBACH,0BAA0B;gBAC1B,MAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBAE3E,2BAA2B;gBAC3B,MAAM,cAAc,GAAG,QAAQ,CAAC,QAAQ;oBACtC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,QAAQ,CAAC;oBACjE,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE,EAAE,CAAC;gBAEvD,iCAAiC;gBACjC,MAAM,QAAQ,GAAG,aAAa,CAAC,QAAQ,IAAI,cAAc,CAAC,QAAQ,CAAC;gBAEnE,gCAAgC;gBAChC,MAAM,OAAO,GAAG;oBACd,KAAK,EAAE,QAAQ,CAAC,KAAK;oBACrB,OAAO,EAAE,aAAa,CAAC,IAAI;oBAC3B,QAAQ,EAAE,cAAc,CAAC,GAAG;oBAC5B,WAAW,EAAE,QAAQ,CAAC,WAAW,IAAI,IAAI;oBACzC,MAAM,EAAE,QAAQ,CAAC,MAAM,IAAI,IAAI;oBAC/B,YAAY,EAAE,QAAQ;oBACtB,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;iBACrC,CAAC;gBAEF,0CAA0C;gBAC1C,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ;qBAClC,MAAM;qBACN,IAAI,CAAC,MAAM,CAAC;qBACZ,MAAM,CAAC,OAAO,CAAC,CAAC;gBAEnB,IAAI,KAAK,EAAE,CAAC;oBACV,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;oBACvD,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;gBAC/C,CAAC;gBAED,gDAAgD;gBAChD,IAAI,QAAQ,EAAE,CAAC;oBACb,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE;wBAC/C,aAAa,EAAE,aAAa,CAAC,cAAc;wBAC3C,cAAc,EAAE,cAAc,CAAC,cAAc;wBAC7C,UAAU,EAAE,QAAQ,CAAC,WAAW;wBAChC,KAAK,EAAE,QAAQ,CAAC,MAAM;qBACvB,CAAC,CAAC;gBACL,CAAC;YAEH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;gBACtD,wEAAwE;YAC1E,CAAC;QACH,CAAC;KAAA;IAED;;OAEG;IACG,OAAO;qEAAC,UAAsB,EAAE;YACpC,MAAM,EACJ,KAAK,EACL,WAAW,EACX,MAAM,EACN,UAAU,EACV,QAAQ,EACR,gBAAgB,EAChB,KAAK,GAAG,EAAE,EACV,MAAM,GAAG,CAAC,GACX,GAAG,OAAO,CAAC;YAEZ,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ;iBACtB,MAAM;iBACN,IAAI,CAAC,MAAM,CAAC;iBACZ,MAAM,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;YAEnC,gBAAgB;YAChB,IAAI,KAAK,EAAE,CAAC;gBACV,KAAK,GAAG,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YACnC,CAAC;YAED,IAAI,WAAW,EAAE,CAAC;gBAChB,KAAK,GAAG,KAAK,CAAC,EAAE,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YAC/C,CAAC;YAED,IAAI,MAAM,EAAE,CAAC;gBACX,KAAK,GAAG,KAAK,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACrC,CAAC;YAED,IAAI,UAAU,EAAE,CAAC;gBACf,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;YAC9C,CAAC;YAED,IAAI,QAAQ,EAAE,CAAC;gBACb,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;YAC5C,CAAC;YAED,IAAI,gBAAgB,EAAE,CAAC;gBACrB,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,gBAAgB,GAAG,CAAC,CAAC;YAC1D,CAAC;YAED,gCAAgC;YAChC,KAAK,GAAG,KAAK;iBACV,KAAK,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;iBACzC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;YAErC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM,KAAK,CAAC;YAE3C,IAAI,KAAK,EAAE,CAAC;gBACV,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;gBAClD,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAC1C,CAAC;YAED,OAAO;gBACL,IAAI,EAAE,IAAI,IAAI,EAAE;gBAChB,KAAK,EAAE,KAAK,IAAI,CAAC;gBACjB,MAAM;gBACN,KAAK;aACN,CAAC;QACJ,CAAC;KAAA;IAED;;OAEG;IACG,iBAAiB,CAAC,UAAkB;;YACxC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ;iBACxC,MAAM;iBACN,IAAI,CAAC,MAAM,CAAC;iBACZ,MAAM,CAAC,GAAG,CAAC;iBACX,EAAE,CAAC,aAAa,EAAE,UAAU,CAAC;iBAC7B,KAAK,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;YAE7C,IAAI,KAAK,EAAE,CAAC;gBACV,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;gBAC3D,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;YACnD,CAAC;YAED,OAAO,IAAI,IAAI,EAAE,CAAC;QACpB,CAAC;KAAA;IAED;;OAEG;IACG,YAAY,CAAC,KAAa;;YAC9B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ;iBACxC,MAAM;iBACN,IAAI,CAAC,MAAM,CAAC;iBACZ,MAAM,CAAC,GAAG,CAAC;iBACX,EAAE,CAAC,QAAQ,EAAE,KAAK,CAAC;iBACnB,KAAK,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;YAE7C,IAAI,KAAK,EAAE,CAAC;gBACV,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;gBACtD,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAC9C,CAAC;YAED,OAAO,IAAI,IAAI,EAAE,CAAC;QACpB,CAAC;KAAA;IAED;;OAEG;IACG,WAAW;;YAMf,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ;iBAC/D,MAAM;iBACN,IAAI,CAAC,MAAM,CAAC;iBACZ,MAAM,CAAC,qBAAqB,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;YAErD,IAAI,UAAU,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,EAAE,UAAU,CAAC,CAAC;gBAC5D,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/C,CAAC;YAED,MAAM,KAAK,GAAG,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,MAAM,KAAI,CAAC,CAAC;YACrC,MAAM,OAAO,GAA2B,EAAE,CAAC;YAC3C,IAAI,OAAO,GAAG,CAAC,CAAC;YAEhB,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,OAAO,CAAC,GAAG,CAAC,EAAE;gBACvB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBACnD,IAAI,GAAG,CAAC,YAAY,EAAE,CAAC;oBACrB,OAAO,EAAE,CAAC;gBACZ,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,wCAAwC;YACxC,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;YAC7B,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAE3C,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ;iBACjE,MAAM;iBACN,IAAI,CAAC,MAAM,CAAC;iBACZ,MAAM,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;iBAChC,GAAG,CAAC,YAAY,EAAE,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC;YAE9C,IAAI,WAAW,EAAE,CAAC;gBAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oCAAoC,EAAE,WAAW,CAAC,CAAC;YACtE,CAAC;YAED,OAAO;gBACL,KAAK;gBACL,OAAO;gBACP,OAAO;gBACP,WAAW,EAAE,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,KAAI,CAAC;aACrC,CAAC;QACJ,CAAC;KAAA;IAED;;OAEG;IACG,YAAY;qEAAC,gBAAwB,EAAE;YAC3C,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;YAC9B,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,aAAa,CAAC,CAAC;YAEzD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ;iBACxC,MAAM;iBACN,IAAI,CAAC,MAAM,CAAC;iBACZ,MAAM,EAAE;iBACR,EAAE,CAAC,YAAY,EAAE,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC;YAE9C,IAAI,KAAK,EAAE,CAAC;gBACV,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;gBACtD,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAC9C,CAAC;YAED,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAE,IAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEnF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,YAAY,oBAAoB,aAAa,OAAO,CAAC,CAAC;YAEhF,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC;QACnC,CAAC;KAAA;IAED;;OAEG;IACG,cAAc,CAClB,KAAwB,EACxB,OAAe,EACf,OAKC;;YAED,MAAM,IAAI,CAAC,SAAS,CAAC;gBACnB,KAAK;gBACL,OAAO;gBACP,QAAQ,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ;gBAC3B,WAAW,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW;gBACjC,MAAM,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM;gBACvB,cAAc,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc;aACxC,CAAC,CAAC;QACL,CAAC;KAAA;IAED;;OAEG;IACG,KAAK,CAAC,OAAe,EAAE,OAAa;;YACxC,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QACvD,CAAC;KAAA;IAEK,IAAI,CAAC,OAAe,EAAE,OAAa;;YACvC,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QACtD,CAAC;KAAA;IAEK,IAAI,CAAC,OAAe,EAAE,OAAa;;YACvC,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QACtD,CAAC;KAAA;IAEK,KAAK,CAAC,OAAe,EAAE,OAAa;;YACxC,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QACvD,CAAC;KAAA;CACF,CAAA;AA3RY,gCAAU;qBAAV,UAAU;IADtB,IAAA,mBAAU,GAAE;iEAKkB,+BAAe,oBAAf,+BAAe,oDACJ,2CAAmB,oBAAnB,2CAAmB;GALhD,UAAU,CA2RtB","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/logs/services/log.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { SupabaseService } from '@visapi/core-supabase';\nimport { PiiRedactionService } from './pii-redaction.service';\n\nexport interface LogEntry {\n  level: 'debug' | 'info' | 'warn' | 'error';\n  message: string;\n  metadata?: Record<string, any>;\n  workflow_id?: string;\n  job_id?: string;\n  correlation_id?: string;\n}\n\nexport interface LogRecord {\n  id: number;\n  level: string;\n  message: string;\n  metadata: any;\n  workflow_id: string | null;\n  job_id: string | null;\n  pii_redacted: boolean;\n  created_at: string;\n}\n\nexport interface LogFilters {\n  level?: string;\n  workflow_id?: string;\n  job_id?: string;\n  start_date?: string;\n  end_date?: string;\n  message_contains?: string;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface PaginatedLogs {\n  logs: LogRecord[];\n  total: number;\n  offset: number;\n  limit: number;\n}\n\n@Injectable()\nexport class LogService {\n  private readonly logger = new Logger(LogService.name);\n\n  constructor(\n    private readonly supabase: SupabaseService,\n    private readonly piiRedactionService: PiiRedactionService\n  ) {}\n\n  /**\n   * Create a new log entry with PII redaction\n   */\n  async createLog(logEntry: LogEntry): Promise<void> {\n    try {\n      // Redact PII from message\n      const messageResult = this.piiRedactionService.redactPii(logEntry.message);\n      \n      // Redact PII from metadata\n      const metadataResult = logEntry.metadata \n        ? this.piiRedactionService.redactPiiFromObject(logEntry.metadata)\n        : { obj: null, piiFound: false, redactedFields: [] };\n\n      // Determine if any PII was found\n      const piiFound = messageResult.piiFound || metadataResult.piiFound;\n\n      // Prepare log data for database\n      const logData = {\n        level: logEntry.level,\n        message: messageResult.text,\n        metadata: metadataResult.obj,\n        workflow_id: logEntry.workflow_id || null,\n        job_id: logEntry.job_id || null,\n        pii_redacted: piiFound,\n        created_at: new Date().toISOString(),\n      };\n\n      // Store in database using client property\n      const { error } = await this.supabase\n        .client\n        .from('logs')\n        .insert(logData);\n\n      if (error) {\n        this.logger.error('Failed to store log entry:', error);\n        throw new Error('Failed to store log entry');\n      }\n\n      // Log PII redaction statistics if PII was found\n      if (piiFound) {\n        this.logger.debug('PII redacted from log entry', {\n          messageFields: messageResult.redactedFields,\n          metadataFields: metadataResult.redactedFields,\n          workflowId: logEntry.workflow_id,\n          jobId: logEntry.job_id,\n        });\n      }\n\n    } catch (error) {\n      this.logger.error('Error creating log entry:', error);\n      // Don't throw - we don't want logging failures to break the application\n    }\n  }\n\n  /**\n   * Get logs with filtering and pagination\n   */\n  async getLogs(filters: LogFilters = {}): Promise<PaginatedLogs> {\n    const {\n      level,\n      workflow_id,\n      job_id,\n      start_date,\n      end_date,\n      message_contains,\n      limit = 50,\n      offset = 0,\n    } = filters;\n\n    let query = this.supabase\n      .client\n      .from('logs')\n      .select('*', { count: 'exact' });\n\n    // Apply filters\n    if (level) {\n      query = query.eq('level', level);\n    }\n\n    if (workflow_id) {\n      query = query.eq('workflow_id', workflow_id);\n    }\n\n    if (job_id) {\n      query = query.eq('job_id', job_id);\n    }\n\n    if (start_date) {\n      query = query.gte('created_at', start_date);\n    }\n\n    if (end_date) {\n      query = query.lte('created_at', end_date);\n    }\n\n    if (message_contains) {\n      query = query.ilike('message', `%${message_contains}%`);\n    }\n\n    // Apply pagination and ordering\n    query = query\n      .order('created_at', { ascending: false })\n      .range(offset, offset + limit - 1);\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      this.logger.error('Failed to fetch logs:', error);\n      throw new Error('Failed to fetch logs');\n    }\n\n    return {\n      logs: data || [],\n      total: count || 0,\n      offset,\n      limit,\n    };\n  }\n\n  /**\n   * Get logs by workflow ID\n   */\n  async getLogsByWorkflow(workflowId: string): Promise<LogRecord[]> {\n    const { data, error } = await this.supabase\n      .client\n      .from('logs')\n      .select('*')\n      .eq('workflow_id', workflowId)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      this.logger.error('Failed to fetch workflow logs:', error);\n      throw new Error('Failed to fetch workflow logs');\n    }\n\n    return data || [];\n  }\n\n  /**\n   * Get logs by job ID\n   */\n  async getLogsByJob(jobId: string): Promise<LogRecord[]> {\n    const { data, error } = await this.supabase\n      .client\n      .from('logs')\n      .select('*')\n      .eq('job_id', jobId)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      this.logger.error('Failed to fetch job logs:', error);\n      throw new Error('Failed to fetch job logs');\n    }\n\n    return data || [];\n  }\n\n  /**\n   * Get log statistics\n   */\n  async getLogStats(): Promise<{\n    total: number;\n    byLevel: Record<string, number>;\n    withPii: number;\n    recentCount: number;\n  }> {\n    const { data: totalData, error: totalError } = await this.supabase\n      .client\n      .from('logs')\n      .select('level, pii_redacted', { count: 'exact' });\n\n    if (totalError) {\n      this.logger.error('Failed to fetch log stats:', totalError);\n      throw new Error('Failed to fetch log stats');\n    }\n\n    const total = totalData?.length || 0;\n    const byLevel: Record<string, number> = {};\n    let withPii = 0;\n\n    totalData?.forEach(log => {\n      byLevel[log.level] = (byLevel[log.level] || 0) + 1;\n      if (log.pii_redacted) {\n        withPii++;\n      }\n    });\n\n    // Get recent logs count (last 24 hours)\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    const { data: recentData, error: recentError } = await this.supabase\n      .client\n      .from('logs')\n      .select('id', { count: 'exact' })\n      .gte('created_at', yesterday.toISOString());\n\n    if (recentError) {\n      this.logger.warn('Failed to fetch recent logs count:', recentError);\n    }\n\n    return {\n      total,\n      byLevel,\n      withPii,\n      recentCount: recentData?.length || 0,\n    };\n  }\n\n  /**\n   * Delete logs older than specified days\n   */\n  async pruneOldLogs(olderThanDays: number = 90): Promise<{ deleted: number }> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - olderThanDays);\n\n    const { data, error } = await this.supabase\n      .client\n      .from('logs')\n      .delete()\n      .lt('created_at', cutoffDate.toISOString());\n\n    if (error) {\n      this.logger.error('Failed to prune old logs:', error);\n      throw new Error('Failed to prune old logs');\n    }\n\n    const deletedCount = data ? (Array.isArray(data) ? (data as any[]).length : 0) : 0;\n    \n    this.logger.log(`Pruned ${deletedCount} logs older than ${olderThanDays} days`);\n    \n    return { deleted: deletedCount };\n  }\n\n  /**\n   * Enhance existing logger with structured logging\n   */\n  async logWithContext(\n    level: LogEntry['level'],\n    message: string,\n    context?: {\n      workflow_id?: string;\n      job_id?: string;\n      correlation_id?: string;\n      metadata?: Record<string, any>;\n    }\n  ): Promise<void> {\n    await this.createLog({\n      level,\n      message,\n      metadata: context?.metadata,\n      workflow_id: context?.workflow_id,\n      job_id: context?.job_id,\n      correlation_id: context?.correlation_id,\n    });\n  }\n\n  /**\n   * Convenience methods for different log levels\n   */\n  async debug(message: string, context?: any): Promise<void> {\n    await this.logWithContext('debug', message, context);\n  }\n\n  async info(message: string, context?: any): Promise<void> {\n    await this.logWithContext('info', message, context);\n  }\n\n  async warn(message: string, context?: any): Promise<void> {\n    await this.logWithContext('warn', message, context);\n  }\n\n  async error(message: string, context?: any): Promise<void> {\n    await this.logWithContext('error', message, context);\n  }\n}"],"version":3}