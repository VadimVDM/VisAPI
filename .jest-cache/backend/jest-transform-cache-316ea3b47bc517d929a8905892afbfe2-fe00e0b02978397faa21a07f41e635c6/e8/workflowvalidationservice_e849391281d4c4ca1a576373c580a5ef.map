{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/workflows/services/workflow-validation.service.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/workflows/services/workflow-validation.service.ts"],"sourcesContent":["import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport Ajv, { JSONSchemaType, ValidateFunction } from 'ajv';\nimport addFormats from 'ajv-formats';\nimport { WorkflowSchema } from '@visapi/shared-types';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nexport interface ValidationResult {\n  valid: boolean;\n  errors?: string[];\n}\n\n@Injectable()\nexport class WorkflowValidationService implements OnModuleInit {\n  private readonly logger = new Logger(WorkflowValidationService.name);\n  private ajv: Ajv;\n  private validateWorkflow: ValidateFunction<WorkflowSchema>;\n\n  onModuleInit() {\n    this.initializeAjv();\n  }\n\n  private initializeAjv(): void {\n    this.ajv = new Ajv({\n      allErrors: true,\n      verbose: true,\n      strict: false,\n      removeAdditional: true,\n    });\n\n    // Add format validation (email, uuid, etc.)\n    addFormats(this.ajv);\n\n    // Compile the workflow schema at boot time for performance\n    try {\n      const workflowSchema = this.getWorkflowSchema();\n      \n      this.validateWorkflow = this.ajv.compile(\n        workflowSchema as JSONSchemaType<WorkflowSchema>\n      );\n      this.logger.log('Workflow schema compiled successfully');\n    } catch (error) {\n      this.logger.error('Failed to compile workflow schema:', error);\n      throw new Error('Failed to initialize workflow validation');\n    }\n  }\n\n  private getWorkflowSchema(): any {\n    // Try to read from file system first\n    const possiblePaths = [\n      join(__dirname, '../schemas/workflow.schema.json'),\n      join(__dirname, '../../workflows/schemas/workflow.schema.json'),\n      join(process.cwd(), 'apps/backend/src/workflows/schemas/workflow.schema.json'),\n    ];\n\n    for (const schemaPath of possiblePaths) {\n      try {\n        const schemaContent = readFileSync(schemaPath, 'utf8');\n        return JSON.parse(schemaContent);\n      } catch (error) {\n        // Continue to next path\n      }\n    }\n\n    // Fallback to inline schema if file not found\n    return {\n      \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n      \"type\": \"object\",\n      \"title\": \"Workflow Schema\",\n      \"description\": \"Schema for validating workflow definitions\",\n      \"required\": [\"name\", \"triggers\", \"steps\", \"enabled\"],\n      \"properties\": {\n        \"id\": {\n          \"type\": \"string\",\n          \"format\": \"uuid\",\n          \"description\": \"Unique identifier for the workflow\"\n        },\n        \"name\": {\n          \"type\": \"string\",\n          \"minLength\": 1,\n          \"maxLength\": 100,\n          \"description\": \"Human-readable name for the workflow\"\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"maxLength\": 500,\n          \"description\": \"Optional description of the workflow\"\n        },\n        \"enabled\": {\n          \"type\": \"boolean\",\n          \"description\": \"Whether the workflow is active\"\n        },\n        \"variables\": {\n          \"type\": \"object\",\n          \"additionalProperties\": true,\n          \"description\": \"Global variables available to all steps\"\n        },\n        \"triggers\": {\n          \"type\": \"array\",\n          \"minItems\": 1,\n          \"items\": {\n            \"$ref\": \"#/definitions/trigger\"\n          },\n          \"description\": \"Array of trigger configurations\"\n        },\n        \"steps\": {\n          \"type\": \"array\",\n          \"minItems\": 1,\n          \"items\": {\n            \"$ref\": \"#/definitions/step\"\n          },\n          \"description\": \"Array of workflow steps\"\n        }\n      },\n      \"definitions\": {\n        \"trigger\": {\n          \"type\": \"object\",\n          \"required\": [\"type\", \"config\"],\n          \"properties\": {\n            \"type\": {\n              \"type\": \"string\",\n              \"enum\": [\"webhook\", \"cron\", \"manual\"],\n              \"description\": \"Type of trigger\"\n            },\n            \"config\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"schedule\": {\n                  \"type\": \"string\",\n                  \"description\": \"Cron expression for scheduling\"\n                },\n                \"timezone\": {\n                  \"type\": \"string\",\n                  \"description\": \"Timezone for cron execution\"\n                },\n                \"endpoint\": {\n                  \"type\": \"string\",\n                  \"description\": \"Webhook endpoint identifier\"\n                }\n              },\n              \"additionalProperties\": true\n            }\n          }\n        },\n        \"step\": {\n          \"type\": \"object\",\n          \"required\": [\"id\", \"type\", \"config\"],\n          \"properties\": {\n            \"id\": {\n              \"type\": \"string\",\n              \"pattern\": \"^[a-zA-Z0-9_-]+$\",\n              \"minLength\": 1,\n              \"maxLength\": 50,\n              \"description\": \"Unique identifier for the step within the workflow\"\n            },\n            \"type\": {\n              \"type\": \"string\",\n              \"enum\": [\"slack.send\", \"whatsapp.send\", \"pdf.generate\", \"email.send\"],\n              \"description\": \"Type of action to perform\"\n            },\n            \"config\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"channel\": {\n                  \"type\": \"string\",\n                  \"description\": \"Slack channel identifier\"\n                },\n                \"message\": {\n                  \"type\": \"string\",\n                  \"description\": \"Message content\"\n                },\n                \"template\": {\n                  \"type\": \"string\",\n                  \"description\": \"Template identifier for message\"\n                },\n                \"contact\": {\n                  \"type\": \"string\",\n                  \"pattern\": \"^\\\\+[1-9]\\\\d{1,14}$\",\n                  \"description\": \"WhatsApp contact number in E.164 format\"\n                },\n                \"variables\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": true,\n                  \"description\": \"Template variables\"\n                },\n                \"data\": {\n                  \"type\": \"object\",\n                  \"additionalProperties\": true,\n                  \"description\": \"Data for PDF generation\"\n                },\n                \"recipient\": {\n                  \"type\": \"string\",\n                  \"format\": \"email\",\n                  \"description\": \"Email recipient\"\n                },\n                \"subject\": {\n                  \"type\": \"string\",\n                  \"description\": \"Email subject\"\n                }\n              },\n              \"additionalProperties\": true\n            },\n            \"retries\": {\n              \"type\": \"integer\",\n              \"minimum\": 0,\n              \"maximum\": 10,\n              \"default\": 3,\n              \"description\": \"Number of retry attempts\"\n            },\n            \"timeout\": {\n              \"type\": \"integer\",\n              \"minimum\": 1000,\n              \"maximum\": 300000,\n              \"default\": 30000,\n              \"description\": \"Step timeout in milliseconds\"\n            }\n          }\n        }\n      }\n    };\n  }\n\n  /**\n   * Validate a workflow definition against the JSON schema\n   */\n  validateWorkflowDefinition(workflow: unknown): ValidationResult {\n    if (!this.validateWorkflow) {\n      console.error('Workflow validator not initialized');\n      return {\n        valid: false,\n        errors: ['Workflow validator not initialized']\n      };\n    }\n\n    const isValid = this.validateWorkflow(workflow);\n\n    if (isValid) {\n      return { valid: true };\n    }\n\n    const errors = this.validateWorkflow.errors?.map((error) => {\n      const path = error.instancePath || 'root';\n      const message = error.message || 'Unknown error';\n      \n      // Include the data value in the error message for enum validation errors\n      if (error.keyword === 'enum' && error.data) {\n        return `${path}: ${message} (received: ${error.data})`;\n      }\n      \n      // Include keyword in the error message for better test compatibility\n      if (error.keyword) {\n        return `${path}: ${message} (${error.keyword})`;\n      }\n      \n      return `${path}: ${message}`;\n    }) || ['Unknown validation error'];\n\n    this.logger.warn('Workflow validation failed:', { errors });\n\n    return {\n      valid: false,\n      errors,\n    };\n  }\n\n  /**\n   * Validate workflow step configuration based on step type\n   */\n  validateStepConfig(stepType: string, config: Record<string, any>): ValidationResult {\n    // Basic validation for required fields based on step type\n    const requiredFields: Record<string, string[]> = {\n      'slack.send': ['channel'],\n      'whatsapp.send': ['contact'],\n      'pdf.generate': ['template'],\n      'email.send': ['recipient'],\n    };\n\n    const required = requiredFields[stepType];\n    if (!required) {\n      return {\n        valid: false,\n        errors: [`Unknown step type: ${stepType}`],\n      };\n    }\n\n    const missing = required.filter(field => !config[field]);\n    if (missing.length > 0) {\n      return {\n        valid: false,\n        errors: missing.map(field => `Missing required field: ${field}`),\n      };\n    }\n\n    // Validate specific field formats\n    if (stepType === 'whatsapp.send' && config.contact) {\n      const phoneRegex = /^\\+[1-9]\\d{1,14}$/;\n      if (!phoneRegex.test(config.contact)) {\n        return {\n          valid: false,\n          errors: ['Invalid phone number format. Use E.164 format (e.g., +1234567890)'],\n        };\n      }\n    }\n\n    if (stepType === 'email.send' && config.recipient) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(config.recipient)) {\n        return {\n          valid: false,\n          errors: ['Invalid email format'],\n        };\n      }\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Validate cron expression format\n   */\n  validateCronExpression(expression: string): ValidationResult {\n    if (!expression || typeof expression !== 'string') {\n      return {\n        valid: false,\n        errors: ['Cron expression must be a non-empty string'],\n      };\n    }\n\n    // Basic cron validation (5 fields - minute, hour, day, month, day-of-week)\n    const fields = expression.trim().split(/\\s+/);\n    if (fields.length !== 5) {\n      return {\n        valid: false,\n        errors: ['Cron expression must have exactly 5 fields'],\n      };\n    }\n\n    // Validate each field has valid characters and ranges\n    const cronFieldRegex = /^(\\*\\/[0-9]+|\\*|[0-9]+(-[0-9]+)?(\\/[0-9]+)?|[0-9,-]+)$/;\n    \n    // Valid ranges for each field: minute, hour, day, month, day-of-week\n    const validRanges = [\n      { min: 0, max: 59, name: 'minute' },\n      { min: 0, max: 23, name: 'hour' },\n      { min: 1, max: 31, name: 'day' },\n      { min: 1, max: 12, name: 'month' },\n      { min: 0, max: 7, name: 'day-of-week' }\n    ];\n\n    for (let i = 0; i < fields.length; i++) {\n      const field = fields[i];\n      if (!cronFieldRegex.test(field)) {\n        return {\n          valid: false,\n          errors: [`Invalid cron field ${i + 1}: ${field}`],\n        };\n      }\n\n      // Check ranges for numeric values\n      if (field !== '*' && !field.includes('/')) {\n        const numbers = field.split(',').flatMap(part => {\n          if (part.includes('-')) {\n            const [start, end] = part.split('-').map(Number);\n            return [start, end];\n          }\n          return [Number(part)];\n        });\n\n        for (const num of numbers) {\n          if (isNaN(num) || num < validRanges[i].min || num > validRanges[i].max) {\n            return {\n              valid: false,\n              errors: [`Invalid ${validRanges[i].name} value: ${num}`],\n            };\n          }\n        }\n      }\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Validate that step IDs are unique within the workflow\n   */\n  validateUniqueStepIds(steps: Array<{ id: string }>): ValidationResult {\n    const ids = steps.map(step => step.id);\n    const uniqueIds = new Set(ids);\n\n    if (ids.length !== uniqueIds.size) {\n      const duplicates = ids.filter((id, index) => ids.indexOf(id) !== index);\n      return {\n        valid: false,\n        errors: [`Duplicate step IDs found: ${duplicates.join(', ')}`],\n      };\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Comprehensive workflow validation combining all checks\n   */\n  async validateCompleteWorkflow(workflow: unknown): Promise<ValidationResult> {\n    // First validate against JSON schema\n    const schemaResult = this.validateWorkflowDefinition(workflow);\n    if (!schemaResult.valid) {\n      return schemaResult;\n    }\n\n    // Cast to WorkflowSchema since we know it's valid\n    const validWorkflow = workflow as WorkflowSchema;\n\n    // Validate unique step IDs\n    const uniqueIdResult = this.validateUniqueStepIds(validWorkflow.steps);\n    if (!uniqueIdResult.valid) {\n      return uniqueIdResult;\n    }\n\n    // Validate each step configuration\n    for (const step of validWorkflow.steps) {\n      const stepResult = this.validateStepConfig(step.type, step.config);\n      if (!stepResult.valid) {\n        return {\n          valid: false,\n          errors: stepResult.errors?.map(error => `Step ${step.id}: ${error}`),\n        };\n      }\n    }\n\n    // Validate cron expressions in triggers\n    for (const trigger of validWorkflow.triggers) {\n      if (trigger.type === 'cron' && trigger.config.schedule) {\n        const cronResult = this.validateCronExpression(trigger.config.schedule);\n        if (!cronResult.valid) {\n          return {\n            valid: false,\n            errors: cronResult.errors?.map(error => `Cron trigger: ${error}`),\n          };\n        }\n      }\n    }\n\n    return { valid: true };\n  }\n}"],"version":3}