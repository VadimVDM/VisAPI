{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/metrics/remote-write.service.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/metrics/remote-write.service.ts"],"sourcesContent":["import {\n  Injectable,\n  Logger,\n  OnModuleInit,\n  OnModuleDestroy,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { register as globalRegistry } from 'prom-client';\nimport { pushTimeseries } from 'prometheus-remote-write';\n\n@Injectable()\nexport class RemoteWriteService implements OnModuleInit, OnModuleDestroy {\n  private readonly logger = new Logger(RemoteWriteService.name);\n  private intervalId: NodeJS.Timeout;\n  private readonly enabled: boolean;\n  private readonly url: string;\n  private readonly username: string;\n  private readonly password: string;\n  private readonly pushIntervalMs: number;\n\n  constructor(private readonly configService: ConfigService) {\n    this.enabled = this.configService.get<boolean>(\n      'GRAFANA_REMOTE_WRITE_ENABLED',\n      false\n    );\n    this.url = this.configService.get<string>('GRAFANA_PROMETHEUS_URL');\n    this.username = this.configService.get<string>(\n      'GRAFANA_PROMETHEUS_USERNAME'\n    );\n    this.password = this.configService.get<string>(\n      'GRAFANA_PROMETHEUS_PASSWORD'\n    );\n    this.pushIntervalMs = this.configService.get<number>(\n      'GRAFANA_PUSH_INTERVAL_MS',\n      30000\n    ); // 30 seconds default\n  }\n\n  onModuleInit() {\n    if (!this.enabled) {\n      this.logger.log('Remote write is disabled');\n      return;\n    }\n\n    if (!this.url || !this.username || !this.password) {\n      this.logger.warn('Remote write is enabled but credentials are missing');\n      return;\n    }\n\n    this.startPushing();\n  }\n\n  private startPushing() {\n    this.logger.log(\n      `Starting remote write to ${this.url} every ${this.pushIntervalMs}ms`\n    );\n\n    // Initial push\n    this.pushMetrics();\n\n    // Schedule regular pushes\n    this.intervalId = setInterval(() => {\n      this.pushMetrics();\n    }, this.pushIntervalMs);\n  }\n\n  private async pushMetrics() {\n    try {\n      const metrics = await globalRegistry.metrics();\n\n      // Filter to only include visapi_ metrics to reduce payload size\n      const filteredMetrics = metrics\n        .split('\\n')\n        .filter(line => line.includes('visapi_') || line.startsWith('# TYPE visapi_') || line.startsWith('# HELP visapi_'))\n        .join('\\n');\n\n      if (!filteredMetrics.trim()) {\n        this.logger.warn('No visapi_ metrics found to push');\n        return;\n      }\n\n      this.logger.debug(`Converting ${filteredMetrics.split('\\n').length} lines of metrics to protobuf format`);\n\n      // Parse metrics and convert to protobuf TimeSeries format\n      const timeSeries = this.parseMetricsToTimeSeries(filteredMetrics);\n      \n      if (timeSeries.length === 0) {\n        this.logger.warn('No time series data parsed from metrics');\n        return;\n      }\n\n      this.logger.debug(`Pushing ${timeSeries.length} time series to Grafana Cloud`);\n\n      // Use the prometheus-remote-write library to push metrics\n      const result = await pushTimeseries(timeSeries, {\n        url: this.url,\n        auth: {\n          username: this.username,\n          password: this.password,\n        },\n        timeout: 10000,\n        verbose: false,\n        headers: {\n          'User-Agent': 'visapi-remote-write/1.0',\n        },\n      });\n\n      if (result.status === 200) {\n        this.logger.debug('Successfully pushed metrics to Grafana Cloud');\n      } else {\n        this.logger.error(`Failed to push metrics: ${result.status} ${result.statusText}`);\n        if (result.errorMessage) {\n          this.logger.error(`Error message: ${result.errorMessage}`);\n        }\n      }\n    } catch (error) {\n      this.logger.error(\n        'Failed to push metrics to Grafana Cloud',\n        error.message\n      );\n      \n      // Log more details about the error\n      if (error.response) {\n        this.logger.error(`Status: ${error.response.status}`);\n        this.logger.error(`Response: ${JSON.stringify(error.response.data)}`);\n        if (error.response.headers) {\n          this.logger.error(`Headers: ${JSON.stringify(error.response.headers)}`);\n        }\n      }\n    }\n  }\n\n  private parseMetricsToTimeSeries(metrics: string): Array<{\n    labels: { __name__: string; [key: string]: string };\n    samples: Array<{ value: number; timestamp?: number }>;\n  }> {\n    const lines = metrics.trim().split('\\n');\n    const timeSeries: Array<{\n      labels: { __name__: string; [key: string]: string };\n      samples: Array<{ value: number; timestamp?: number }>;\n    }> = [];\n    const timestamp = Date.now();\n\n    for (const line of lines) {\n      // Skip comments and empty lines\n      if (line.startsWith('#') || !line.trim()) {\n        continue;\n      }\n\n      // Only process visapi_ metrics\n      if (!line.includes('visapi_')) {\n        continue;\n      }\n\n      // Parse metric line: metric_name{labels} value\n      const match = line.match(/^([a-zA-Z_][a-zA-Z0-9_]*(?:\\{[^}]*\\})?) ([0-9.-]+)$/);\n      if (!match) {\n        continue;\n      }\n\n      const [, metricWithLabels, value] = match;\n      const [metricName, labelsStr] = metricWithLabels.split('{');\n      \n      // Create labels object for the timeseries\n      const labels: { __name__: string; [key: string]: string } = {\n        __name__: metricName,\n      };\n      \n      if (labelsStr) {\n        const labelPairs = labelsStr.slice(0, -1).split(','); // Remove closing }\n        for (const pair of labelPairs) {\n          const [key, val] = pair.split('=');\n          if (key && val) {\n            labels[key.trim()] = val.trim().replace(/^\"(.*)\"$/, '$1'); // Remove quotes\n          }\n        }\n      }\n\n      // Add app and version labels\n      labels.app = 'visapi';\n      labels.version = process.env.npm_package_version || 'unknown';\n\n      // Create TimeSeries entry\n      timeSeries.push({\n        labels,\n        samples: [{\n          value: parseFloat(value),\n          timestamp: timestamp\n        }]\n      });\n    }\n\n    return timeSeries;\n  }\n\n\n  onModuleDestroy() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.logger.log('Stopped remote write');\n    }\n  }\n}\n"],"version":3}