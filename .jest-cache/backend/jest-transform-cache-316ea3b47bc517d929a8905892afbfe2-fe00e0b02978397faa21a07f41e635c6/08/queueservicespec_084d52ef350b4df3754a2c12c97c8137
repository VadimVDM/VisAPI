07d443d74966e2170a3ef5e334260ff7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const testing_1 = require("@nestjs/testing");
const bullmq_1 = require("@nestjs/bullmq");
const queue_service_1 = require("./queue.service");
const core_config_1 = require("@visapi/core-config");
const shared_types_1 = require("@visapi/shared-types");
describe('QueueService', () => {
    let service;
    let criticalQueue;
    let defaultQueue;
    let bulkQueue;
    const createMockQueue = () => ({
        add: jest.fn(),
        getJob: jest.fn(),
        getJobCounts: jest.fn(),
        clean: jest.fn(),
        pause: jest.fn(),
        resume: jest.fn(),
        drain: jest.fn(),
        remove: jest.fn(),
    });
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const mockCriticalQueue = createMockQueue();
        const mockDefaultQueue = createMockQueue();
        const mockBulkQueue = createMockQueue();
        const module = yield testing_1.Test.createTestingModule({
            providers: [
                queue_service_1.QueueService,
                {
                    provide: (0, bullmq_1.getQueueToken)(shared_types_1.QUEUE_NAMES.CRITICAL),
                    useValue: mockCriticalQueue,
                },
                {
                    provide: (0, bullmq_1.getQueueToken)(shared_types_1.QUEUE_NAMES.DEFAULT),
                    useValue: mockDefaultQueue,
                },
                {
                    provide: (0, bullmq_1.getQueueToken)(shared_types_1.QUEUE_NAMES.BULK),
                    useValue: mockBulkQueue,
                },
                {
                    provide: core_config_1.ConfigService,
                    useValue: {
                        queueMaxRetries: 3,
                        queueRetryDelay: 2000,
                    },
                },
            ],
        }).compile();
        service = module.get(queue_service_1.QueueService);
        criticalQueue = module.get((0, bullmq_1.getQueueToken)(shared_types_1.QUEUE_NAMES.CRITICAL));
        defaultQueue = module.get((0, bullmq_1.getQueueToken)(shared_types_1.QUEUE_NAMES.DEFAULT));
        bulkQueue = module.get((0, bullmq_1.getQueueToken)(shared_types_1.QUEUE_NAMES.BULK));
    }));
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('addJob', () => {
        it('should add job to default queue with correct data', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const jobData = {
                channel: '#general',
                message: 'Test message',
                template: 'visa_approved',
                variables: { name: 'John Doe' },
            };
            const mockJob = { id: 'job-123' };
            defaultQueue.add.mockResolvedValue(mockJob);
            const result = yield service.addJob(shared_types_1.QUEUE_NAMES.DEFAULT, 'slack.send', jobData);
            expect(result).toBe(mockJob);
            expect(defaultQueue.add).toHaveBeenCalledWith('slack.send', jobData, expect.objectContaining({
                attempts: 3,
                backoff: {
                    type: 'exponential',
                    delay: 2000,
                },
                removeOnComplete: true,
                removeOnFail: false,
            }));
        }));
        it('should add job to critical queue when specified', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const jobData = { message: 'Critical notification' };
            const mockJob = { id: 'job-456' };
            criticalQueue.add.mockResolvedValue(mockJob);
            const result = yield service.addJob(shared_types_1.QUEUE_NAMES.CRITICAL, 'notification.send', jobData);
            expect(result).toBe(mockJob);
            expect(criticalQueue.add).toHaveBeenCalledWith('notification.send', jobData, expect.any(Object));
        }));
    });
    describe('getJob', () => {
        it('should get job from specified queue', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockJob = { id: 'job-123', data: { test: true } };
            defaultQueue.getJob.mockResolvedValue(mockJob);
            const result = yield service.getJob(shared_types_1.QUEUE_NAMES.DEFAULT, 'job-123');
            expect(result).toBe(mockJob);
            expect(defaultQueue.getJob).toHaveBeenCalledWith('job-123');
        }));
        it('should return undefined when job not found', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            defaultQueue.getJob.mockResolvedValue(undefined);
            const result = yield service.getJob(shared_types_1.QUEUE_NAMES.DEFAULT, 'non-existent');
            expect(result).toBeUndefined();
        }));
    });
    // checkHealth method was removed as it's replaced by dedicated health indicators
    describe('getQueueMetrics', () => {
        it('should return metrics for all queues', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockCounts = {
                waiting: 5,
                active: 2,
                completed: 100,
                failed: 3,
                delayed: 1,
            };
            criticalQueue.getJobCounts.mockResolvedValue(mockCounts);
            defaultQueue.getJobCounts.mockResolvedValue(mockCounts);
            bulkQueue.getJobCounts.mockResolvedValue(mockCounts);
            const result = yield service.getQueueMetrics();
            expect(result).toHaveLength(3);
            expect(result[0]).toEqual({
                name: shared_types_1.QUEUE_NAMES.CRITICAL,
                waiting: 5,
                active: 2,
                completed: 100,
                failed: 3,
                delayed: 1,
            });
        }));
        it('should return metrics for specific queue when specified', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockCounts = {
                waiting: 5,
                active: 2,
                completed: 100,
                failed: 3,
                delayed: 1,
            };
            defaultQueue.getJobCounts.mockResolvedValue(mockCounts);
            const result = yield service.getQueueMetrics(shared_types_1.QUEUE_NAMES.DEFAULT);
            expect(result).toHaveLength(1);
            expect(result[0]).toEqual({
                name: shared_types_1.QUEUE_NAMES.DEFAULT,
                waiting: 5,
                active: 2,
                completed: 100,
                failed: 3,
                delayed: 1,
            });
        }));
    });
    describe('pauseQueue', () => {
        it('should pause the specified queue', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield service.pauseQueue(shared_types_1.QUEUE_NAMES.DEFAULT);
            expect(defaultQueue.pause).toHaveBeenCalled();
        }));
    });
    describe('resumeQueue', () => {
        it('should resume the specified queue', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield service.resumeQueue(shared_types_1.QUEUE_NAMES.DEFAULT);
            expect(defaultQueue.resume).toHaveBeenCalled();
        }));
    });
    describe('drainQueue', () => {
        it('should drain the specified queue', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield service.drainQueue(shared_types_1.QUEUE_NAMES.DEFAULT);
            expect(defaultQueue.drain).toHaveBeenCalled();
        }));
    });
    describe('cleanQueue', () => {
        it('should clean the specified queue', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockResult = ['job-1', 'job-2'];
            defaultQueue.clean.mockResolvedValue(mockResult);
            const result = yield service.cleanQueue(shared_types_1.QUEUE_NAMES.DEFAULT, 5000, 10, 'completed');
            expect(result).toBe(mockResult);
            expect(defaultQueue.clean).toHaveBeenCalledWith(5000, 10, 'completed');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,