{"file":"/Users/vadim/Projects/VisAPI/libs/backend/core-supabase/src/lib/supabase.service.ts","mappings":";;;;;AAAA,2CAA0D;AAC1D,uDAAqE;AACrE,qDAAoD;AAI7C,IAAM,eAAe,GAArB,MAAM,eAAe;IAI1B,YAA6B,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;IAAG,CAAC;IAEtD,YAAY;QACV,gDAAgD;QAChD,IAAI,CAAC,QAAQ,GAAG,IAAA,0BAAY,EAC1B,IAAI,CAAC,MAAM,CAAC,WAAW,EACvB,IAAI,CAAC,MAAM,CAAC,eAAe,CAC5B,CAAC;QAEF,yDAAyD;QACzD,IAAI,CAAC,eAAe,GAAG,IAAA,0BAAY,EACjC,IAAI,CAAC,MAAM,CAAC,WAAW,EACvB,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAClC;YACE,IAAI,EAAE;gBACJ,gBAAgB,EAAE,KAAK;gBACvB,cAAc,EAAE,KAAK;aACtB;SACF,CACF,CAAC;IACJ,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAEK,eAAe;;YACnB,IAAI,CAAC;gBACH,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,eAAe;qBACzC,IAAI,CAAC,OAAO,CAAC;qBACb,MAAM,CAAC,OAAO,CAAC;qBACf,KAAK,CAAC,CAAC,CAAC,CAAC;gBACZ,OAAO,CAAC,KAAK,CAAC;YAChB,CAAC;YAAC,WAAM,CAAC;gBACP,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;KAAA;CACF,CAAA;AA7CY,0CAAe;0BAAf,eAAe;IAD3B,IAAA,mBAAU,GAAE;iEAK0B,2BAAa,oBAAb,2BAAa;GAJvC,eAAe,CA6C3B","names":[],"sources":["/Users/vadim/Projects/VisAPI/libs/backend/core-supabase/src/lib/supabase.service.ts"],"sourcesContent":["import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { createClient, SupabaseClient } from '@supabase/supabase-js';\nimport { ConfigService } from '@visapi/core-config';\nimport { Database } from '@visapi/shared-types';\n\n@Injectable()\nexport class SupabaseService implements OnModuleInit {\n  private supabase: SupabaseClient<Database>;\n  private serviceSupabase: SupabaseClient<Database>;\n\n  constructor(private readonly config: ConfigService) {}\n\n  onModuleInit() {\n    // Client for public operations (using anon key)\n    this.supabase = createClient<Database>(\n      this.config.supabaseUrl,\n      this.config.supabaseAnonKey\n    );\n\n    // Client for service operations (using service role key)\n    this.serviceSupabase = createClient<Database>(\n      this.config.supabaseUrl,\n      this.config.supabaseServiceRoleKey,\n      {\n        auth: {\n          autoRefreshToken: false,\n          persistSession: false,\n        },\n      }\n    );\n  }\n\n  get client(): SupabaseClient<Database> {\n    return this.supabase;\n  }\n\n  get serviceClient(): SupabaseClient<Database> {\n    return this.serviceSupabase;\n  }\n\n  async checkConnection(): Promise<boolean> {\n    try {\n      const { error } = await this.serviceSupabase\n        .from('users')\n        .select('count')\n        .limit(1);\n      return !error;\n    } catch {\n      return false;\n    }\n  }\n}\n"],"version":3}