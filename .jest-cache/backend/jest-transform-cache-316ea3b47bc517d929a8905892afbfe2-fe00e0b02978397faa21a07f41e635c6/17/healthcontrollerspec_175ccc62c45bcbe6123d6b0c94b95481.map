{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/health/health.controller.spec.ts","mappings":";;;AAAA,6CAAsD;AACtD,2DAAuD;AACvD,+CAG0B;AAC1B,4DAAiE;AACjE,kEAAuE;AAEvE,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAI,UAA4B,CAAC;IACjC,IAAI,kBAAmD,CAAC;IACxD,IAAI,WAA8C,CAAC;IACnD,IAAI,cAAoD,CAAC;IAEzD,MAAM,sBAAsB,GAAG;QAC7B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;KACjB,CAAC;IAEF,UAAU,CAAC,GAAS,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,OAAO,EAAE,CAAC,yBAAc,CAAC;YACzB,WAAW,EAAE,CAAC,oCAAgB,CAAC;YAC/B,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,6BAAkB;oBAC3B,QAAQ,EAAE,sBAAsB;iBACjC;gBACD;oBACE,OAAO,EAAE,mCAAoB;oBAC7B,QAAQ,EAAE;wBACR,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;qBACrB;iBACF;gBACD;oBACE,OAAO,EAAE,yCAAuB;oBAChC,QAAQ,EAAE;wBACR,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;qBACrB;iBACF;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,MAAM,CAAC,GAAG,CAAmB,oCAAgB,CAAC,CAAC;QAC5D,kBAAkB,GAAG,MAAM,CAAC,GAAG,CAAC,6BAAkB,CAAoC,CAAC;QACvF,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,mCAAoB,CAAC,CAAC;QAC/C,cAAc,GAAG,MAAM,CAAC,GAAG,CAAC,yCAAuB,CAAC,CAAC;IACvD,CAAC,CAAA,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;QACrB,EAAE,CAAC,uDAAuD,EAAE,GAAS,EAAE;YACrE,MAAM,gBAAgB,GAAG;gBACvB,MAAM,EAAE,IAAa;gBACrB,IAAI,EAAE;oBACJ,KAAK,EAAE;wBACL,MAAM,EAAE,IAAa;qBACtB;oBACD,QAAQ,EAAE;wBACR,MAAM,EAAE,IAAa;qBACtB;iBACF;gBACD,KAAK,EAAE,EAAE;gBACT,OAAO,EAAE;oBACP,KAAK,EAAE;wBACL,MAAM,EAAE,IAAa;qBACtB;oBACD,QAAQ,EAAE;wBACR,MAAM,EAAE,IAAa;qBACtB;iBACF;aACF,CAAC;YAEF,sBAAsB,CAAC,KAAK,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;YAEjE,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;YAExC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;YACzC,MAAM,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,oBAAoB,CAAC;gBACxD,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC;gBACpB,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC;aACrB,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,GAAS,EAAE;YACjE,MAAM,gBAAgB,GAAG;gBACvB,MAAM,EAAE,OAAgB;gBACxB,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE;oBACL,KAAK,EAAE;wBACL,MAAM,EAAE,MAAe;wBACvB,OAAO,EAAE,oBAAoB;qBAC9B;oBACD,QAAQ,EAAE;wBACR,MAAM,EAAE,MAAe;wBACvB,OAAO,EAAE,SAAS;qBACnB;iBACF;gBACD,OAAO,EAAE;oBACP,KAAK,EAAE;wBACL,MAAM,EAAE,MAAe;wBACvB,OAAO,EAAE,oBAAoB;qBAC9B;oBACD,QAAQ,EAAE;wBACR,MAAM,EAAE,MAAe;wBACvB,OAAO,EAAE,SAAS;qBACnB;iBACF;aACF,CAAC;YAEF,sBAAsB,CAAC,KAAK,CAAC,iBAAiB,CAAC;gBAC7C,QAAQ,EAAE,gBAAgB;aAC3B,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC;gBACrD,QAAQ,EAAE,gBAAgB;aAC3B,CAAC,CAAC;QACL,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,MAAM,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;YAErC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,MAAM,EAAE,IAAI;gBACZ,SAAS,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;aAC9B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/health/health.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { HealthController } from './health.controller';\nimport {\n  TerminusModule,\n  HealthCheckService,\n} from '@nestjs/terminus';\nimport { RedisHealthIndicator } from './indicators/redis.health';\nimport { SupabaseHealthIndicator } from './indicators/supabase.health';\n\ndescribe('HealthController', () => {\n  let controller: HealthController;\n  let healthCheckService: jest.Mocked<HealthCheckService>;\n  let redisHealth: jest.Mocked<RedisHealthIndicator>;\n  let supabaseHealth: jest.Mocked<SupabaseHealthIndicator>;\n\n  const mockHealthCheckService = {\n    check: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [TerminusModule],\n      controllers: [HealthController],\n      providers: [\n        {\n          provide: HealthCheckService,\n          useValue: mockHealthCheckService,\n        },\n        {\n          provide: RedisHealthIndicator,\n          useValue: {\n            isHealthy: jest.fn(),\n          },\n        },\n        {\n          provide: SupabaseHealthIndicator,\n          useValue: {\n            isHealthy: jest.fn(),\n          },\n        },\n      ],\n    }).compile();\n\n    controller = module.get<HealthController>(HealthController);\n    healthCheckService = module.get(HealthCheckService) as jest.Mocked<HealthCheckService>;\n    redisHealth = module.get(RedisHealthIndicator);\n    supabaseHealth = module.get(SupabaseHealthIndicator);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('check', () => {\n    it('should return healthy status when all services are up', async () => {\n      const mockHealthResult = {\n        status: 'ok' as const,\n        info: {\n          redis: {\n            status: 'up' as const,\n          },\n          database: {\n            status: 'up' as const,\n          },\n        },\n        error: {},\n        details: {\n          redis: {\n            status: 'up' as const,\n          },\n          database: {\n            status: 'up' as const,\n          },\n        },\n      };\n\n      mockHealthCheckService.check.mockResolvedValue(mockHealthResult);\n\n      const result = await controller.check();\n\n      expect(result).toEqual(mockHealthResult);\n      expect(mockHealthCheckService.check).toHaveBeenCalledWith([\n        expect.any(Function),\n        expect.any(Function),\n      ]);\n    });\n\n    it('should return error status when services are down', async () => {\n      const mockHealthResult = {\n        status: 'error' as const,\n        info: {},\n        error: {\n          redis: {\n            status: 'down' as const,\n            message: 'Connection refused',\n          },\n          database: {\n            status: 'down' as const,\n            message: 'Timeout',\n          },\n        },\n        details: {\n          redis: {\n            status: 'down' as const,\n            message: 'Connection refused',\n          },\n          database: {\n            status: 'down' as const,\n            message: 'Timeout',\n          },\n        },\n      };\n\n      mockHealthCheckService.check.mockRejectedValue({\n        response: mockHealthResult,\n      });\n\n      await expect(controller.check()).rejects.toMatchObject({\n        response: mockHealthResult,\n      });\n    });\n  });\n\n  describe('liveness', () => {\n    it('should return ok status for liveness probe', () => {\n      const result = controller.liveness();\n\n      expect(result).toEqual({\n        status: 'ok',\n        timestamp: expect.any(String),\n      });\n    });\n  });\n});\n"],"version":3}