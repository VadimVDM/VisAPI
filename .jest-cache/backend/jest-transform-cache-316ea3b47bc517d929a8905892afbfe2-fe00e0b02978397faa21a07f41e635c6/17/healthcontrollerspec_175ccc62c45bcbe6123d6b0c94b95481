993f9528307806a13eb8c5b1e337727e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const testing_1 = require("@nestjs/testing");
const health_controller_1 = require("./health.controller");
const terminus_1 = require("@nestjs/terminus");
const redis_health_1 = require("./indicators/redis.health");
const supabase_health_1 = require("./indicators/supabase.health");
describe('HealthController', () => {
    let controller;
    let healthCheckService;
    let redisHealth;
    let supabaseHealth;
    const mockHealthCheckService = {
        check: jest.fn(),
    };
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const module = yield testing_1.Test.createTestingModule({
            imports: [terminus_1.TerminusModule],
            controllers: [health_controller_1.HealthController],
            providers: [
                {
                    provide: terminus_1.HealthCheckService,
                    useValue: mockHealthCheckService,
                },
                {
                    provide: redis_health_1.RedisHealthIndicator,
                    useValue: {
                        isHealthy: jest.fn(),
                    },
                },
                {
                    provide: supabase_health_1.SupabaseHealthIndicator,
                    useValue: {
                        isHealthy: jest.fn(),
                    },
                },
            ],
        }).compile();
        controller = module.get(health_controller_1.HealthController);
        healthCheckService = module.get(terminus_1.HealthCheckService);
        redisHealth = module.get(redis_health_1.RedisHealthIndicator);
        supabaseHealth = module.get(supabase_health_1.SupabaseHealthIndicator);
    }));
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('should be defined', () => {
        expect(controller).toBeDefined();
    });
    describe('check', () => {
        it('should return healthy status when all services are up', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockHealthResult = {
                status: 'ok',
                info: {
                    redis: {
                        status: 'up',
                    },
                    database: {
                        status: 'up',
                    },
                },
                error: {},
                details: {
                    redis: {
                        status: 'up',
                    },
                    database: {
                        status: 'up',
                    },
                },
            };
            mockHealthCheckService.check.mockResolvedValue(mockHealthResult);
            const result = yield controller.check();
            expect(result).toEqual(mockHealthResult);
            expect(mockHealthCheckService.check).toHaveBeenCalledWith([
                expect.any(Function),
                expect.any(Function),
            ]);
        }));
        it('should return error status when services are down', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockHealthResult = {
                status: 'error',
                info: {},
                error: {
                    redis: {
                        status: 'down',
                        message: 'Connection refused',
                    },
                    database: {
                        status: 'down',
                        message: 'Timeout',
                    },
                },
                details: {
                    redis: {
                        status: 'down',
                        message: 'Connection refused',
                    },
                    database: {
                        status: 'down',
                        message: 'Timeout',
                    },
                },
            };
            mockHealthCheckService.check.mockRejectedValue({
                response: mockHealthResult,
            });
            yield expect(controller.check()).rejects.toMatchObject({
                response: mockHealthResult,
            });
        }));
    });
    describe('liveness', () => {
        it('should return ok status for liveness probe', () => {
            const result = controller.liveness();
            expect(result).toEqual({
                status: 'ok',
                timestamp: expect.any(String),
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,