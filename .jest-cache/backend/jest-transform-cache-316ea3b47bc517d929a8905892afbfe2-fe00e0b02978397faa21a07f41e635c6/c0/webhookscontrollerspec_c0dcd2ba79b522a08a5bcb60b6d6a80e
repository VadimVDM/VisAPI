934d08aa920cc403e185dd32855f3649
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const testing_1 = require("@nestjs/testing");
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const webhooks_controller_1 = require("./webhooks.controller");
const queue_service_1 = require("../queue/queue.service");
const util_redis_1 = require("@visapi/util-redis");
const auth_service_1 = require("../auth/auth.service");
const shared_types_1 = require("@visapi/shared-types");
describe('WebhooksController', () => {
    let controller;
    let queueService;
    let idempotencyService;
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const module = yield testing_1.Test.createTestingModule({
            controllers: [webhooks_controller_1.WebhooksController],
            providers: [
                {
                    provide: queue_service_1.QueueService,
                    useValue: {
                        addJob: jest.fn(),
                    },
                },
                {
                    provide: util_redis_1.IdempotencyService,
                    useValue: {
                        checkAndExecute: jest.fn(),
                    },
                },
                {
                    provide: auth_service_1.AuthService,
                    useValue: {
                        validateApiKey: jest.fn(),
                        checkScopes: jest.fn(),
                    },
                },
                {
                    provide: core_1.Reflector,
                    useValue: {
                        getAllAndOverride: jest.fn().mockReturnValue([]),
                    },
                },
            ],
        }).compile();
        controller = module.get(webhooks_controller_1.WebhooksController);
        queueService = module.get(queue_service_1.QueueService);
        idempotencyService = module.get(util_redis_1.IdempotencyService);
    }));
    it('should be defined', () => {
        expect(controller).toBeDefined();
    });
    describe('handleWebhook', () => {
        const mockJob = { id: 'job-123' };
        const validPayload = {
            applicantName: 'John Doe',
            visaType: 'Tourist',
            status: 'approved',
            applicationId: 'APP-123456',
        };
        beforeEach(() => {
            queueService.addJob.mockResolvedValue(mockJob);
            idempotencyService.checkAndExecute.mockImplementation((key, fn) => tslib_1.__awaiter(void 0, void 0, void 0, function* () { return yield fn(); }));
        });
        it('should handle webhook successfully with idempotency key', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const webhookKey = 'test-webhook';
            const idempotencyKey = 'idempotency-123';
            const result = yield controller.handleWebhook(webhookKey, validPayload, idempotencyKey, 'application/json');
            expect(result).toEqual({
                status: 'accepted',
                jobId: 'job-123',
                message: 'Webhook received and queued for processing',
            });
            expect(idempotencyService.checkAndExecute).toHaveBeenCalledWith(idempotencyKey, expect.any(Function), 3600);
            expect(queueService.addJob).toHaveBeenCalledWith(shared_types_1.QUEUE_NAMES.DEFAULT, shared_types_1.JOB_NAMES.PROCESS_WORKFLOW, {
                webhookKey,
                payload: validPayload,
                receivedAt: expect.any(String),
                idempotencyKey,
            });
        }));
        it('should throw BadRequestException when idempotency key is missing', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield expect(controller.handleWebhook('test-webhook', validPayload, undefined, // no idempotency key
            'application/json')).rejects.toThrow(common_1.BadRequestException);
            expect(() => {
                throw new common_1.BadRequestException('Idempotency-Key header is required');
            }).toThrow('Idempotency-Key header is required');
        }));
        it('should throw BadRequestException for unsupported content type', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield expect(controller.handleWebhook('test-webhook', validPayload, 'idempotency-123', 'text/plain' // unsupported content type
            )).rejects.toThrow(common_1.BadRequestException);
            expect(() => {
                throw new common_1.BadRequestException('Unsupported content type. Use application/json or application/x-www-form-urlencoded');
            }).toThrow('Unsupported content type');
        }));
        it('should accept application/json content type', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield controller.handleWebhook('test-webhook', validPayload, 'idempotency-123', 'application/json');
            expect(queueService.addJob).toHaveBeenCalled();
        }));
        it('should accept application/x-www-form-urlencoded content type', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield controller.handleWebhook('test-webhook', validPayload, 'idempotency-123', 'application/x-www-form-urlencoded');
            expect(queueService.addJob).toHaveBeenCalled();
        }));
        it('should work without content type header', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield controller.handleWebhook('test-webhook', validPayload, 'idempotency-123', undefined // no content type
            );
            expect(queueService.addJob).toHaveBeenCalled();
        }));
        it('should throw PayloadTooLargeException for large payloads', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Create a payload larger than 512KB
            const largePayload = {
                data: 'x'.repeat(513 * 1024), // 513KB
            };
            yield expect(controller.handleWebhook('test-webhook', largePayload, 'idempotency-123', 'application/json')).rejects.toThrow(common_1.PayloadTooLargeException);
            expect(() => {
                throw new common_1.PayloadTooLargeException('Payload exceeds 512KB limit');
            }).toThrow('Payload exceeds 512KB limit');
        }));
        it('should delegate idempotency handling to IdempotencyService', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const webhookKey = 'test-webhook';
            const idempotencyKey = 'unique-key-123';
            // Mock idempotency service to return cached result
            const cachedResult = { status: 'cached', jobId: 'cached-job-123' };
            idempotencyService.checkAndExecute.mockResolvedValue(cachedResult);
            const result = yield controller.handleWebhook(webhookKey, validPayload, idempotencyKey, 'application/json');
            expect(result).toEqual(cachedResult);
            expect(idempotencyService.checkAndExecute).toHaveBeenCalledWith(idempotencyKey, expect.any(Function), 3600);
        }));
        it('should pass webhook metadata to queue job', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const webhookKey = 'visa-status-update';
            const idempotencyKey = 'idempotency-456';
            const payload = {
                applicationId: 'APP-789',
                status: 'under_review',
            };
            yield controller.handleWebhook(webhookKey, payload, idempotencyKey, 'application/json');
            expect(queueService.addJob).toHaveBeenCalledWith(shared_types_1.QUEUE_NAMES.DEFAULT, shared_types_1.JOB_NAMES.PROCESS_WORKFLOW, {
                webhookKey,
                payload,
                receivedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/), // ISO date format
                idempotencyKey,
            });
        }));
        it('should handle queue service errors gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            queueService.addJob.mockRejectedValue(new Error('Redis connection failed'));
            // Since the error happens inside the idempotency function,
            // it should be propagated through checkAndExecute
            idempotencyService.checkAndExecute.mockImplementation((key, fn) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                return yield fn(); // This will throw the error from queueService.addJob
            }));
            yield expect(controller.handleWebhook('test-webhook', validPayload, 'idempotency-123', 'application/json')).rejects.toThrow('Redis connection failed');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,