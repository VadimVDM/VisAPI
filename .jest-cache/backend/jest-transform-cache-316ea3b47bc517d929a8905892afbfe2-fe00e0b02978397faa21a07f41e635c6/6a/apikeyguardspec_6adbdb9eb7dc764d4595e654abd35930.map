{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/auth/guards/api-key.guard.spec.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/auth/guards/api-key.guard.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ApiKeyGuard } from './api-key.guard';\nimport { AuthService } from '../auth.service';\nimport { ApiKeyRecord } from '@visapi/shared-types';\n\ndescribe('ApiKeyGuard', () => {\n  let guard: ApiKeyGuard;\n  let authService: jest.Mocked<AuthService>;\n  let reflector: jest.Mocked<Reflector>;\n\n  const mockApiKey: ApiKeyRecord = {\n    id: 'api-key-123',\n    name: 'Test API Key',\n    hashed_key: '', // Legacy field\n    prefix: 'vapi_',\n    hashed_secret: 'hashed-secret',\n    scopes: ['webhooks:trigger', 'workflows:read'],\n    expires_at: new Date(Date.now() + 86400000).toISOString(),\n    created_by: 'user-123',\n    created_at: new Date().toISOString(),\n    last_used_at: null,\n    updated_at: new Date().toISOString(),\n  };\n\n  const createMockExecutionContext = (headers: any = {}): ExecutionContext => {\n    const mockRequest = { headers, apiKey: null };\n    return {\n      switchToHttp: jest.fn(() => ({\n        getRequest: jest.fn(() => mockRequest),\n      })),\n      getHandler: jest.fn(),\n      getClass: jest.fn(),\n    } as unknown as ExecutionContext;\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        ApiKeyGuard,\n        {\n          provide: AuthService,\n          useValue: {\n            validateApiKey: jest.fn(),\n            checkScopes: jest.fn(),\n          },\n        },\n        {\n          provide: Reflector,\n          useValue: {\n            getAllAndOverride: jest.fn(),\n          },\n        },\n      ],\n    }).compile();\n\n    guard = module.get<ApiKeyGuard>(ApiKeyGuard);\n    authService = module.get(AuthService);\n    reflector = module.get(Reflector);\n  });\n\n  it('should be defined', () => {\n    expect(guard).toBeDefined();\n  });\n\n  describe('canActivate', () => {\n    it('should allow access with valid API key and no required scopes', async () => {\n      const context = createMockExecutionContext({\n        'x-api-key': 'vapi_validkey123',\n      });\n\n      authService.validateApiKey.mockResolvedValue(mockApiKey);\n      reflector.getAllAndOverride.mockReturnValue([]);\n\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(true);\n      expect(authService.validateApiKey).toHaveBeenCalledWith('vapi_validkey123');\n      expect(context.switchToHttp().getRequest().apiKey).toEqual(mockApiKey);\n    });\n\n    it('should throw UnauthorizedException when API key is missing', async () => {\n      const context = createMockExecutionContext({}); // No API key header\n\n      await expect(guard.canActivate(context)).rejects.toThrow(\n        UnauthorizedException\n      );\n      expect(() => {\n        throw new UnauthorizedException('API key is required');\n      }).toThrow('API key is required');\n    });\n\n    it('should throw UnauthorizedException when API key is invalid', async () => {\n      const context = createMockExecutionContext({\n        'x-api-key': 'invalid-key',\n      });\n\n      authService.validateApiKey.mockResolvedValue(null);\n\n      await expect(guard.canActivate(context)).rejects.toThrow(\n        UnauthorizedException\n      );\n      expect(() => {\n        throw new UnauthorizedException('Invalid or expired API key');\n      }).toThrow('Invalid or expired API key');\n    });\n\n    it('should check required scopes when specified', async () => {\n      const context = createMockExecutionContext({\n        'x-api-key': 'vapi_validkey123',\n      });\n\n      const requiredScopes = ['admin:write'];\n      authService.validateApiKey.mockResolvedValue(mockApiKey);\n      authService.checkScopes.mockResolvedValue(true);\n      reflector.getAllAndOverride.mockReturnValue(requiredScopes);\n\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(true);\n      expect(authService.checkScopes).toHaveBeenCalledWith(\n        mockApiKey,\n        requiredScopes\n      );\n    });\n\n    it('should throw UnauthorizedException when scopes are insufficient', async () => {\n      const context = createMockExecutionContext({\n        'x-api-key': 'vapi_validkey123',\n      });\n\n      const requiredScopes = ['admin:write'];\n      authService.validateApiKey.mockResolvedValue(mockApiKey);\n      authService.checkScopes.mockResolvedValue(false);\n      reflector.getAllAndOverride.mockReturnValue(requiredScopes);\n\n      await expect(guard.canActivate(context)).rejects.toThrow(\n        UnauthorizedException\n      );\n\n      expect(authService.checkScopes).toHaveBeenCalledWith(\n        mockApiKey,\n        requiredScopes\n      );\n    });\n\n    it('should extract API key from Authorization header with Bearer token', async () => {\n      const context = createMockExecutionContext({\n        authorization: 'Bearer vapi_bearerkey123',\n      });\n\n      authService.validateApiKey.mockResolvedValue(mockApiKey);\n      reflector.getAllAndOverride.mockReturnValue([]);\n\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(true);\n      expect(authService.validateApiKey).toHaveBeenCalledWith('vapi_bearerkey123');\n    });\n\n    it('should extract API key from X-API-Key header', async () => {\n      const context = createMockExecutionContext({\n        'x-api-key': 'vapi_xapikeyheader123',\n      });\n\n      authService.validateApiKey.mockResolvedValue(mockApiKey);\n      reflector.getAllAndOverride.mockReturnValue([]);\n\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(true);\n      expect(authService.validateApiKey).toHaveBeenCalledWith('vapi_xapikeyheader123');\n    });\n\n    it('should handle multiple required scopes', async () => {\n      const context = createMockExecutionContext({\n        'x-api-key': 'vapi_validkey123',\n      });\n\n      const requiredScopes = ['webhooks:trigger', 'workflows:read'];\n      authService.validateApiKey.mockResolvedValue(mockApiKey);\n      authService.checkScopes.mockResolvedValue(true);\n      reflector.getAllAndOverride.mockReturnValue(requiredScopes);\n\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(true);\n      expect(authService.checkScopes).toHaveBeenCalledWith(\n        mockApiKey,\n        requiredScopes\n      );\n    });\n\n    it('should attach validated API key to request object', async () => {\n      const context = createMockExecutionContext({\n        'x-api-key': 'vapi_validkey123',\n      });\n\n      authService.validateApiKey.mockResolvedValue(mockApiKey);\n      reflector.getAllAndOverride.mockReturnValue([]);\n\n      await guard.canActivate(context);\n\n      const request = context.switchToHttp().getRequest();\n      expect(request.apiKey).toEqual(mockApiKey);\n    });\n  });\n});"],"version":3}