{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/metrics/remote-write.service.spec.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/metrics/remote-write.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigService } from '@nestjs/config';\nimport { RemoteWriteService } from './remote-write.service';\nimport { register as globalRegistry } from 'prom-client';\nimport { pushTimeseries } from 'prometheus-remote-write';\n\njest.mock('prometheus-remote-write', () => ({\n  pushTimeseries: jest.fn(),\n}));\n\nconst mockPushTimeseries = pushTimeseries as jest.MockedFunction<\n  typeof pushTimeseries\n>;\n\ndescribe('RemoteWriteService', () => {\n  let service: RemoteWriteService;\n  let configService: ConfigService;\n\n  beforeEach(async () => {\n    // Mock globalRegistry.metrics()\n    jest\n      .spyOn(globalRegistry, 'metrics')\n      .mockResolvedValue(\n        '# HELP visapi_test_metric Test metric\\n# TYPE visapi_test_metric counter\\nvisapi_test_metric 1'\n      );\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        RemoteWriteService,\n        {\n          provide: ConfigService,\n          useValue: {\n            get: jest.fn((key: string, defaultValue?: any) => {\n              const config = {\n                GRAFANA_REMOTE_WRITE_ENABLED: true,\n                GRAFANA_PROMETHEUS_URL:\n                  'https://prometheus.grafana.net/api/prom/push',\n                GRAFANA_PROMETHEUS_USERNAME: '123456',\n                GRAFANA_PROMETHEUS_PASSWORD: 'test-api-key',\n                GRAFANA_PUSH_INTERVAL_MS: 1000, // 1 second for testing\n              };\n              return config[key] ?? defaultValue;\n            }),\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<RemoteWriteService>(RemoteWriteService);\n    configService = module.get<ConfigService>(ConfigService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n    if (service['intervalId']) {\n      clearInterval(service['intervalId']);\n    }\n    mockPushTimeseries.mockReset();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  it('should not start pushing when disabled', () => {\n    jest\n      .spyOn(configService, 'get')\n      .mockImplementation((key: string, defaultValue?: any) => {\n        if (key === 'GRAFANA_REMOTE_WRITE_ENABLED') return false;\n        return defaultValue;\n      });\n\n    const newService = new RemoteWriteService(configService);\n    newService.onModuleInit();\n\n    expect(newService['intervalId']).toBeUndefined();\n  });\n\n  it('should not start pushing when credentials are missing', () => {\n    jest\n      .spyOn(configService, 'get')\n      .mockImplementation((key: string, defaultValue?: any) => {\n        if (key === 'GRAFANA_REMOTE_WRITE_ENABLED') return true;\n        if (key === 'GRAFANA_PROMETHEUS_URL') return undefined;\n        return defaultValue;\n      });\n\n    const newService = new RemoteWriteService(configService);\n    newService.onModuleInit();\n\n    expect(newService['intervalId']).toBeUndefined();\n  });\n\n  it('should start pushing metrics when enabled with valid credentials', async () => {\n    mockPushTimeseries.mockResolvedValueOnce({ status: 200, statusText: 'OK' });\n\n    service.onModuleInit();\n\n    expect(service['intervalId']).toBeDefined();\n\n    // Wait for the initial push to complete\n    await new Promise((resolve) => setTimeout(resolve, 100));\n\n    expect(mockPushTimeseries).toHaveBeenCalledWith(\n      expect.any(Array),\n      expect.objectContaining({\n        url: 'https://prometheus.grafana.net/api/prom/push',\n        auth: {\n          username: '123456',\n          password: 'test-api-key',\n        },\n        timeout: 10000,\n        headers: {\n          'User-Agent': 'visapi-remote-write/1.0',\n        },\n      })\n    );\n  });\n\n  it('should handle push errors gracefully', async () => {\n    mockPushTimeseries.mockRejectedValueOnce(new Error('Network error'));\n    const loggerSpy = jest.spyOn(service['logger'], 'error');\n\n    await service['pushMetrics']();\n\n    expect(loggerSpy).toHaveBeenCalledWith(\n      'Failed to push metrics to Grafana Cloud',\n      'Network error'\n    );\n  });\n\n  it('should stop pushing on module destroy', () => {\n    service.onModuleInit();\n    const intervalId = service['intervalId'];\n    expect(intervalId).toBeDefined();\n\n    service.onModuleDestroy();\n    expect(service['intervalId']).toBe(intervalId); // Same reference, but cleared\n  });\n});\n"],"version":3}