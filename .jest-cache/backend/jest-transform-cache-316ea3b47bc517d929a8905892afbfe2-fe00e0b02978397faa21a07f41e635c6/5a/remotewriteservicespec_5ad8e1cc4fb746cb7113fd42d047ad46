f6b925c7e25eb3df0d506a8c30a7ac90
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
jest.mock('prometheus-remote-write', () => ({
    pushTimeseries: jest.fn(),
}));
const testing_1 = require("@nestjs/testing");
const config_1 = require("@nestjs/config");
const remote_write_service_1 = require("./remote-write.service");
const prom_client_1 = require("prom-client");
const prometheus_remote_write_1 = require("prometheus-remote-write");
const mockPushTimeseries = prometheus_remote_write_1.pushTimeseries;
describe('RemoteWriteService', () => {
    let service;
    let configService;
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        // Mock globalRegistry.metrics()
        jest
            .spyOn(prom_client_1.register, 'metrics')
            .mockResolvedValue('# HELP visapi_test_metric Test metric\n# TYPE visapi_test_metric counter\nvisapi_test_metric 1');
        const module = yield testing_1.Test.createTestingModule({
            providers: [
                remote_write_service_1.RemoteWriteService,
                {
                    provide: config_1.ConfigService,
                    useValue: {
                        get: jest.fn((key, defaultValue) => {
                            var _a;
                            const config = {
                                GRAFANA_REMOTE_WRITE_ENABLED: true,
                                GRAFANA_PROMETHEUS_URL: 'https://prometheus.grafana.net/api/prom/push',
                                GRAFANA_PROMETHEUS_USERNAME: '123456',
                                GRAFANA_PROMETHEUS_PASSWORD: 'test-api-key',
                                GRAFANA_PUSH_INTERVAL_MS: 1000, // 1 second for testing
                            };
                            return (_a = config[key]) !== null && _a !== void 0 ? _a : defaultValue;
                        }),
                    },
                },
            ],
        }).compile();
        service = module.get(remote_write_service_1.RemoteWriteService);
        configService = module.get(config_1.ConfigService);
    }));
    afterEach(() => {
        jest.clearAllMocks();
        if (service['intervalId']) {
            clearInterval(service['intervalId']);
        }
        mockPushTimeseries.mockReset();
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    it('should not start pushing when disabled', () => {
        jest
            .spyOn(configService, 'get')
            .mockImplementation((key, defaultValue) => {
            if (key === 'GRAFANA_REMOTE_WRITE_ENABLED')
                return false;
            return defaultValue;
        });
        const newService = new remote_write_service_1.RemoteWriteService(configService);
        newService.onModuleInit();
        expect(newService['intervalId']).toBeUndefined();
    });
    it('should not start pushing when credentials are missing', () => {
        jest
            .spyOn(configService, 'get')
            .mockImplementation((key, defaultValue) => {
            if (key === 'GRAFANA_REMOTE_WRITE_ENABLED')
                return true;
            if (key === 'GRAFANA_PROMETHEUS_URL')
                return undefined;
            return defaultValue;
        });
        const newService = new remote_write_service_1.RemoteWriteService(configService);
        newService.onModuleInit();
        expect(newService['intervalId']).toBeUndefined();
    });
    it('should start pushing metrics when enabled with valid credentials', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        mockPushTimeseries.mockResolvedValueOnce({ status: 200, statusText: 'OK' });
        service.onModuleInit();
        expect(service['intervalId']).toBeDefined();
        // Wait for the initial push to complete
        yield new Promise((resolve) => setTimeout(resolve, 100));
        expect(mockPushTimeseries).toHaveBeenCalledWith(expect.any(Array), expect.objectContaining({
            url: 'https://prometheus.grafana.net/api/prom/push',
            auth: {
                username: '123456',
                password: 'test-api-key',
            },
            timeout: 10000,
            headers: {
                'User-Agent': 'visapi-remote-write/1.0',
            },
        }));
    }));
    it('should handle push errors gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        mockPushTimeseries.mockRejectedValueOnce(new Error('Network error'));
        const loggerSpy = jest.spyOn(service['logger'], 'error');
        yield service['pushMetrics']();
        expect(loggerSpy).toHaveBeenCalledWith('Failed to push metrics to Grafana Cloud', 'Network error');
    }));
    it('should stop pushing on module destroy', () => {
        service.onModuleInit();
        const intervalId = service['intervalId'];
        expect(intervalId).toBeDefined();
        service.onModuleDestroy();
        expect(service['intervalId']).toBe(intervalId); // Same reference, but cleared
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,