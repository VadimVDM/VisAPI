f94fd7ca8deddc07d4b90c5f9567316e
"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsService = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const nestjs_prometheus_1 = require("@willsoto/nestjs-prometheus");
const prom_client_1 = require("prom-client");
let MetricsService = class MetricsService {
    constructor(httpRequestDuration, httpRequestsTotal, httpActiveConnections, jobLatencySeconds, jobFailTotal, queueDepthTotal, webhookProcessedTotal, workflowExecutionDuration, apiKeyValidationDuration, redisOperationsTotal, redisOperationErrorsTotal) {
        this.httpRequestDuration = httpRequestDuration;
        this.httpRequestsTotal = httpRequestsTotal;
        this.httpActiveConnections = httpActiveConnections;
        this.jobLatencySeconds = jobLatencySeconds;
        this.jobFailTotal = jobFailTotal;
        this.queueDepthTotal = queueDepthTotal;
        this.webhookProcessedTotal = webhookProcessedTotal;
        this.workflowExecutionDuration = workflowExecutionDuration;
        this.apiKeyValidationDuration = apiKeyValidationDuration;
        this.redisOperationsTotal = redisOperationsTotal;
        this.redisOperationErrorsTotal = redisOperationErrorsTotal;
    }
    recordHttpRequest(method, route, statusCode, duration) {
        const labels = { method, route, status_code: statusCode.toString() };
        this.httpRequestDuration.observe(labels, duration / 1000); // Convert to seconds
        this.httpRequestsTotal.inc(labels);
    }
    incrementActiveConnections() {
        this.httpActiveConnections.inc();
    }
    decrementActiveConnections() {
        this.httpActiveConnections.dec();
    }
    recordJobExecution(jobName, queue, success, duration) {
        const labels = { job_name: jobName, queue, success: success.toString() };
        this.jobLatencySeconds.observe(labels, duration / 1000);
        if (!success) {
            this.jobFailTotal.inc({ job_name: jobName, queue });
        }
    }
    setQueueDepth(queue, priority, depth) {
        this.queueDepthTotal.set({ queue, priority }, depth);
    }
    incrementWebhookProcessed(status) {
        this.webhookProcessedTotal.inc({ status });
    }
    recordWorkflowExecution(workflowId, duration, success) {
        this.workflowExecutionDuration.observe({ workflow_id: workflowId, success: success.toString() }, duration / 1000);
    }
    recordApiKeyValidation(duration, valid) {
        this.apiKeyValidationDuration.observe({ valid: valid.toString() }, duration / 1000);
    }
    recordRedisOperation(operation, success) {
        this.redisOperationsTotal.inc({ operation, success: success.toString() });
        if (!success) {
            this.redisOperationErrorsTotal.inc({ operation });
        }
    }
};
exports.MetricsService = MetricsService;
exports.MetricsService = MetricsService = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__param(0, (0, nestjs_prometheus_1.InjectMetric)('http_request_duration_seconds')),
    tslib_1.__param(1, (0, nestjs_prometheus_1.InjectMetric)('http_requests_total')),
    tslib_1.__param(2, (0, nestjs_prometheus_1.InjectMetric)('http_active_connections')),
    tslib_1.__param(3, (0, nestjs_prometheus_1.InjectMetric)('job_latency_seconds')),
    tslib_1.__param(4, (0, nestjs_prometheus_1.InjectMetric)('job_fail_total')),
    tslib_1.__param(5, (0, nestjs_prometheus_1.InjectMetric)('queue_depth_total')),
    tslib_1.__param(6, (0, nestjs_prometheus_1.InjectMetric)('webhook_processed_total')),
    tslib_1.__param(7, (0, nestjs_prometheus_1.InjectMetric)('workflow_execution_duration_seconds')),
    tslib_1.__param(8, (0, nestjs_prometheus_1.InjectMetric)('api_key_validation_duration_seconds')),
    tslib_1.__param(9, (0, nestjs_prometheus_1.InjectMetric)('redis_operations_total')),
    tslib_1.__param(10, (0, nestjs_prometheus_1.InjectMetric)('redis_operation_errors_total')),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof prom_client_1.Histogram !== "undefined" && prom_client_1.Histogram) === "function" ? _a : Object, typeof (_b = typeof prom_client_1.Counter !== "undefined" && prom_client_1.Counter) === "function" ? _b : Object, typeof (_c = typeof prom_client_1.Gauge !== "undefined" && prom_client_1.Gauge) === "function" ? _c : Object, typeof (_d = typeof prom_client_1.Histogram !== "undefined" && prom_client_1.Histogram) === "function" ? _d : Object, typeof (_e = typeof prom_client_1.Counter !== "undefined" && prom_client_1.Counter) === "function" ? _e : Object, typeof (_f = typeof prom_client_1.Gauge !== "undefined" && prom_client_1.Gauge) === "function" ? _f : Object, typeof (_g = typeof prom_client_1.Counter !== "undefined" && prom_client_1.Counter) === "function" ? _g : Object, typeof (_h = typeof prom_client_1.Histogram !== "undefined" && prom_client_1.Histogram) === "function" ? _h : Object, typeof (_j = typeof prom_client_1.Histogram !== "undefined" && prom_client_1.Histogram) === "function" ? _j : Object, typeof (_k = typeof prom_client_1.Counter !== "undefined" && prom_client_1.Counter) === "function" ? _k : Object, typeof (_l = typeof prom_client_1.Counter !== "undefined" && prom_client_1.Counter) === "function" ? _l : Object])
], MetricsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,