513e8643a6c4a75f744eec21dd56a142
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const testing_1 = require("@nestjs/testing");
const api_keys_controller_1 = require("./api-keys.controller");
const auth_service_1 = require("../auth/auth.service");
describe('ApiKeysController', () => {
    let controller;
    let authService;
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const module = yield testing_1.Test.createTestingModule({
            controllers: [api_keys_controller_1.ApiKeysController],
            providers: [
                {
                    provide: auth_service_1.AuthService,
                    useValue: {
                        createApiKey: jest.fn(),
                        listApiKeys: jest.fn(),
                        revokeApiKey: jest.fn(),
                    },
                },
            ],
        }).compile();
        controller = module.get(api_keys_controller_1.ApiKeysController);
        authService = module.get(auth_service_1.AuthService);
    }));
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('should be defined', () => {
        expect(controller).toBeDefined();
    });
    describe('createApiKey', () => {
        const mockRequest = {
            apiKey: {
                created_by: 'user-123',
            },
        };
        const createApiKeyDto = {
            name: 'Test API Key',
            scopes: ['webhooks:trigger', 'workflows:read'],
        };
        it('should create a new API key successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockResult = {
                key: 'vapi_1234567890abcdef',
                apiKey: {
                    id: 'api-key-123',
                    name: 'Test API Key',
                    hashed_key: '', // Legacy field
                    prefix: 'vapi_',
                    hashed_secret: 'hashed-secret',
                    scopes: ['webhooks:trigger', 'workflows:read'],
                    expires_at: '2025-04-14T00:00:00Z',
                    created_by: 'user-123',
                    created_at: '2025-01-14T00:00:00Z',
                    last_used_at: null,
                    updated_at: '2025-01-14T00:00:00Z',
                },
            };
            authService.createApiKey.mockResolvedValue(mockResult);
            const result = yield controller.createApiKey(createApiKeyDto, mockRequest);
            expect(result).toEqual({
                id: 'api-key-123',
                name: 'Test API Key',
                prefix: 'vapi_',
                scopes: ['webhooks:trigger', 'workflows:read'],
                expires_at: '2025-04-14T00:00:00Z',
                created_by: 'user-123',
                created_at: '2025-01-14T00:00:00Z',
                last_used_at: null,
                updated_at: '2025-01-14T00:00:00Z',
                key: mockResult.key,
                message: 'Save this key securely. It will not be shown again.',
            });
            expect(authService.createApiKey).toHaveBeenCalledWith('Test API Key', ['webhooks:trigger', 'workflows:read'], 'user-123');
        }));
        it('should handle auth service errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            authService.createApiKey.mockRejectedValue(new Error('Failed to create API key'));
            yield expect(controller.createApiKey(createApiKeyDto, mockRequest)).rejects.toThrow('Failed to create API key');
        }));
    });
    describe('listApiKeys', () => {
        const mockRequest = {};
        it('should return list of API keys without sensitive data', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockApiKeys = [
                {
                    id: 'key-1',
                    name: 'Production Key',
                    hashed_key: '', // Legacy field
                    prefix: 'vapi_',
                    hashed_secret: 'should-be-removed',
                    scopes: ['webhooks:trigger'],
                    expires_at: '2025-04-14T00:00:00Z',
                    created_at: '2025-01-14T00:00:00Z',
                    created_by: 'user-123',
                    last_used_at: null,
                    updated_at: '2025-01-14T00:00:00Z',
                },
                {
                    id: 'key-2',
                    name: 'Development Key',
                    hashed_key: '', // Legacy field
                    prefix: 'vapi_',
                    hashed_secret: 'should-also-be-removed',
                    scopes: ['workflows:read'],
                    expires_at: '2025-07-14T00:00:00Z',
                    created_at: '2025-01-10T00:00:00Z',
                    created_by: 'user-456',
                    last_used_at: '2025-01-12T10:30:00Z',
                    updated_at: '2025-01-10T00:00:00Z',
                },
            ];
            authService.listApiKeys.mockResolvedValue(mockApiKeys);
            const result = yield controller.listApiKeys(mockRequest);
            expect(result).toEqual([
                {
                    id: 'key-1',
                    name: 'Production Key',
                    prefix: 'vapi_',
                    scopes: ['webhooks:trigger'],
                    expires_at: '2025-04-14T00:00:00Z',
                    created_at: '2025-01-14T00:00:00Z',
                    created_by: 'user-123',
                    last_used_at: null,
                    updated_at: '2025-01-14T00:00:00Z',
                },
                {
                    id: 'key-2',
                    name: 'Development Key',
                    prefix: 'vapi_',
                    scopes: ['workflows:read'],
                    expires_at: '2025-07-14T00:00:00Z',
                    created_at: '2025-01-10T00:00:00Z',
                    created_by: 'user-456',
                    last_used_at: '2025-01-12T10:30:00Z',
                    updated_at: '2025-01-10T00:00:00Z',
                },
            ]);
            expect(authService.listApiKeys).toHaveBeenCalled();
        }));
        it('should handle auth service errors when listing keys', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            authService.listApiKeys.mockRejectedValue(new Error('Failed to list API keys'));
            yield expect(controller.listApiKeys(mockRequest)).rejects.toThrow('Failed to list API keys');
        }));
    });
    describe('revokeApiKey', () => {
        it('should revoke an API key successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const keyId = 'key-to-revoke';
            authService.revokeApiKey.mockResolvedValue();
            const result = yield controller.revokeApiKey(keyId);
            expect(result).toEqual({
                message: 'API key revoked successfully',
            });
            expect(authService.revokeApiKey).toHaveBeenCalledWith(keyId);
        }));
        it('should handle auth service errors when revoking key', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const keyId = 'key-to-revoke';
            authService.revokeApiKey.mockRejectedValue(new Error('Failed to revoke API key'));
            yield expect(controller.revokeApiKey(keyId)).rejects.toThrow('Failed to revoke API key');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,