07bdff8b1b8079680753940428261242
"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlackService = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const nestjs_pino_1 = require("nestjs-pino");
const core_config_1 = require("@visapi/core-config");
const axios_1 = require("@nestjs/axios");
const rxjs_1 = require("rxjs");
let SlackService = class SlackService {
    constructor(logger, configService, httpService) {
        this.logger = logger;
        this.configService = configService;
        this.httpService = httpService;
    }
    sendGrafanaAlert(payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.configService.slackEnabled) {
                this.logger.debug('Slack integration disabled, skipping alert');
                return;
            }
            const webhookUrl = this.configService.slackWebhookUrl;
            if (!webhookUrl) {
                this.logger.error('Slack webhook URL not configured');
                return;
            }
            try {
                const slackMessage = this.formatGrafanaAlert(payload);
                this.logger.debug('Sending Slack alert', {
                    ruleName: payload.ruleName,
                    state: payload.state,
                    channel: slackMessage.channel,
                });
                yield (0, rxjs_1.firstValueFrom)(this.httpService.post(webhookUrl, slackMessage, {
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    timeout: 10000,
                }));
                this.logger.info('Slack alert sent successfully', {
                    ruleName: payload.ruleName,
                    state: payload.state,
                });
            }
            catch (error) {
                this.logger.error('Failed to send Slack alert', {
                    error: error.message,
                    ruleName: payload.ruleName,
                    state: payload.state,
                });
                throw error;
            }
        });
    }
    formatGrafanaAlert(payload) {
        const severity = this.getAlertSeverity(payload.state);
        const color = this.getAlertColor(payload.state);
        const emoji = this.getAlertEmoji(payload.state);
        const fields = [
            {
                title: 'Status',
                value: `${emoji} ${payload.state.toUpperCase()}`,
                short: true,
            },
            {
                title: 'Rule',
                value: payload.ruleName,
                short: true,
            },
        ];
        if (payload.dashboardId) {
            fields.push({
                title: 'Dashboard ID',
                value: payload.dashboardId.toString(),
                short: true,
            });
        }
        if (payload.panelId) {
            fields.push({
                title: 'Panel ID',
                value: payload.panelId.toString(),
                short: true,
            });
        }
        // Add evaluation matches if available
        if (payload.evalMatches && payload.evalMatches.length > 0) {
            const metrics = payload.evalMatches
                .map((match) => `${match.metric}: ${match.value}`)
                .join('\n');
            fields.push({
                title: 'Metrics',
                value: metrics,
                short: false,
            });
        }
        // Add tags if available
        if (payload.tags && Object.keys(payload.tags).length > 0) {
            const tags = Object.entries(payload.tags)
                .map(([key, value]) => `${key}: ${value}`)
                .join('\n');
            fields.push({
                title: 'Tags',
                value: tags,
                short: false,
            });
        }
        const attachment = {
            color,
            pretext: `${severity} Alert: ${payload.title}`,
            title: payload.ruleName,
            title_link: payload.ruleUrl,
            text: payload.message,
            fields,
            footer: 'VisAPI Monitoring',
            footer_icon: 'https://grafana.com/static/img/about/grafana_logo_swirl-events.svg',
            ts: Math.floor(Date.now() / 1000),
            mrkdwn_in: ['text', 'pretext'],
        };
        // Add image if available
        if (payload.imageUrl) {
            attachment.image_url = payload.imageUrl;
        }
        const message = {
            channel: this.configService.slackDefaultChannel,
            username: 'VisAPI Monitoring',
            icon_emoji: ':chart_with_upwards_trend:',
            text: this.buildAlertText(payload),
            attachments: [attachment],
        };
        return message;
    }
    buildAlertText(payload) {
        const emoji = this.getAlertEmoji(payload.state);
        let text = `${emoji} *${payload.state.toUpperCase()}*: ${payload.title}`;
        if (payload.state === 'alerting') {
            text += '\n:warning: *Action may be required*';
        }
        else if (payload.state === 'ok') {
            text += '\n:white_check_mark: *Issue resolved*';
        }
        return text;
    }
    getAlertSeverity(state) {
        switch (state) {
            case 'alerting':
                return 'CRITICAL';
            case 'no_data':
                return 'WARNING';
            case 'paused':
                return 'INFO';
            case 'pending':
                return 'INFO';
            case 'ok':
                return 'OK';
            default:
                return 'UNKNOWN';
        }
    }
    getAlertColor(state) {
        switch (state) {
            case 'alerting':
                return 'danger';
            case 'no_data':
                return 'warning';
            case 'paused':
                return '#808080'; // Gray
            case 'pending':
                return '#FFA500'; // Orange
            case 'ok':
                return 'good';
            default:
                return '#808080'; // Gray
        }
    }
    getAlertEmoji(state) {
        switch (state) {
            case 'alerting':
                return ':red_circle:';
            case 'no_data':
                return ':yellow_circle:';
            case 'paused':
                return ':pause_button:';
            case 'pending':
                return ':clock1:';
            case 'ok':
                return ':green_circle:';
            default:
                return ':grey_question:';
        }
    }
    sendCustomAlert(message_1) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (message, severity = 'info', channel) {
            if (!this.configService.slackEnabled) {
                this.logger.debug('Slack integration disabled, skipping custom alert');
                return;
            }
            const webhookUrl = this.configService.slackWebhookUrl;
            if (!webhookUrl) {
                this.logger.error('Slack webhook URL not configured');
                return;
            }
            const color = severity === 'error'
                ? 'danger'
                : severity === 'warning'
                    ? 'warning'
                    : 'good';
            const emoji = severity === 'error'
                ? ':red_circle:'
                : severity === 'warning'
                    ? ':warning:'
                    : ':information_source:';
            const slackMessage = {
                channel: channel || this.configService.slackDefaultChannel,
                username: 'VisAPI System',
                icon_emoji: ':robot_face:',
                text: `${emoji} ${message}`,
                attachments: [
                    {
                        color,
                        text: message,
                        footer: 'VisAPI System',
                        ts: Math.floor(Date.now() / 1000),
                    },
                ],
            };
            try {
                yield (0, rxjs_1.firstValueFrom)(this.httpService.post(webhookUrl, slackMessage, {
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    timeout: 10000,
                }));
                this.logger.info('Custom Slack alert sent successfully', {
                    severity,
                    channel: channel || this.configService.slackDefaultChannel,
                });
            }
            catch (error) {
                this.logger.error('Failed to send custom Slack alert', {
                    error: error.message,
                    severity,
                    message,
                });
                throw error;
            }
        });
    }
    validateWebhookSignature(payload, timestamp, signature) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const signingSecret = this.configService.slackSigningSecret;
            if (!signingSecret) {
                this.logger.warn('Slack signing secret not configured, skipping signature validation');
                return true; // Allow if no secret configured
            }
            try {
                const crypto = require('crypto');
                const basestring = `v0:${timestamp}:${payload}`;
                const mySignature = 'v0=' +
                    crypto
                        .createHmac('sha256', signingSecret)
                        .update(basestring)
                        .digest('hex');
                // Use timing-safe comparison
                return crypto.timingSafeEqual(Buffer.from(signature, 'utf8'), Buffer.from(mySignature, 'utf8'));
            }
            catch (error) {
                this.logger.error('Failed to validate webhook signature', {
                    error: error.message,
                });
                return false;
            }
        });
    }
};
exports.SlackService = SlackService;
exports.SlackService = SlackService = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__param(0, (0, nestjs_pino_1.InjectPinoLogger)(SlackService.name)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof nestjs_pino_1.PinoLogger !== "undefined" && nestjs_pino_1.PinoLogger) === "function" ? _a : Object, typeof (_b = typeof core_config_1.ConfigService !== "undefined" && core_config_1.ConfigService) === "function" ? _b : Object, typeof (_c = typeof axios_1.HttpService !== "undefined" && axios_1.HttpService) === "function" ? _c : Object])
], SlackService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZhZGltL1Byb2plY3RzL1Zpc0FQSS9hcHBzL2JhY2tlbmQvc3JjL25vdGlmaWNhdGlvbnMvc2xhY2suc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUE0QztBQUM1Qyw2Q0FBMkQ7QUFDM0QscURBQW9EO0FBT3BELHlDQUE0QztBQUM1QywrQkFBc0M7QUFHL0IsSUFBTSxZQUFZLEdBQWxCLE1BQU0sWUFBWTtJQUN2QixZQUVtQixNQUFrQixFQUNsQixhQUE0QixFQUM1QixXQUF3QjtRQUZ4QixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ2xCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO0lBQ3hDLENBQUM7SUFFRSxnQkFBZ0IsQ0FBQyxPQUE4Qjs7WUFDbkQsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7Z0JBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7Z0JBQ2hFLE9BQU87WUFDVCxDQUFDO1lBRUQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUM7WUFDdEQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO2dCQUN0RCxPQUFPO1lBQ1QsQ0FBQztZQUVELElBQUksQ0FBQztnQkFDSCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBRXRELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLHFCQUFxQixFQUFFO29CQUN2QyxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7b0JBQzFCLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztvQkFDcEIsT0FBTyxFQUFFLFlBQVksQ0FBQyxPQUFPO2lCQUM5QixDQUFDLENBQUM7Z0JBRUgsTUFBTSxJQUFBLHFCQUFjLEVB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QUE7QUF0VFksb0NBQVk7dUJBQVosWUFBWTtJQUR4QixJQUFBLG1CQUFVLEdBQUU7SUFHUixtQkFBQSxJQUFBLDhCQUFnQixFQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQTtpRUFDWCx3QkFBVSxvQkFBVix3QkFBVSxvREFDSCwyQkFBYSxvQkFBYiwyQkFBYSxvREFDZixtQkFBVyxvQkFBWCxtQkFBVztHQUxoQyxZQUFZLENBc1R4QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvdmFkaW0vUHJvamVjdHMvVmlzQVBJL2FwcHMvYmFja2VuZC9zcmMvbm90aWZpY2F0aW9ucy9zbGFjay5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3RQaW5vTG9nZ2VyLCBQaW5vTG9nZ2VyIH0gZnJvbSAnbmVzdGpzLXBpbm8nO1xuaW1wb3J0IHsgQ29uZmlnU2VydmljZSB9IGZyb20gJ0B2aXNhcGkvY29yZS1jb25maWcnO1xuaW1wb3J0IHtcbiAgR3JhZmFuYVdlYmhvb2tQYXlsb2FkLFxuICBTbGFja01lc3NhZ2UsXG4gIFNsYWNrQXR0YWNobWVudCxcbiAgU2xhY2tGaWVsZCxcbn0gZnJvbSAnQHZpc2FwaS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHsgSHR0cFNlcnZpY2UgfSBmcm9tICdAbmVzdGpzL2F4aW9zJztcbmltcG9ydCB7IGZpcnN0VmFsdWVGcm9tIH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTbGFja1NlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0UGlub0xvZ2dlcihTbGFja1NlcnZpY2UubmFtZSlcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogUGlub0xvZ2dlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZ1NlcnZpY2U6IENvbmZpZ1NlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBodHRwU2VydmljZTogSHR0cFNlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIHNlbmRHcmFmYW5hQWxlcnQocGF5bG9hZDogR3JhZmFuYVdlYmhvb2tQYXlsb2FkKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZ1NlcnZpY2Uuc2xhY2tFbmFibGVkKSB7XG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZygnU2xhY2sgaW50ZWdyYXRpb24gZGlzYWJsZWQsIHNraXBwaW5nIGFsZXJ0Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgd2ViaG9va1VybCA9IHRoaXMuY29uZmlnU2VydmljZS5zbGFja1dlYmhvb2tVcmw7XG4gICAgaWYgKCF3ZWJob29rVXJsKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcignU2xhY2sgd2ViaG9vayBVUkwgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2xhY2tNZXNzYWdlID0gdGhpcy5mb3JtYXRHcmFmYW5hQWxlcnQocGF5bG9hZCk7XG5cbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKCdTZW5kaW5nIFNsYWNrIGFsZXJ0Jywge1xuICAgICAgICBydWxlTmFtZTogcGF5bG9hZC5ydWxlTmFtZSxcbiAgICAgICAgc3RhdGU6IHBheWxvYWQuc3RhdGUsXG4gICAgICAgIGNoYW5uZWw6IHNsYWNrTWVzc2FnZS5jaGFubmVsLFxuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IGZpcnN0VmFsdWVGcm9tKFxuICAgICAgICB0aGlzLmh0dHBTZXJ2aWNlLnBvc3Qod2ViaG9va1VybCwgc2xhY2tNZXNzYWdlLCB7XG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRpbWVvdXQ6IDEwMDAwLFxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgdGhpcy5sb2dnZXIuaW5mbygnU2xhY2sgYWxlcnQgc2VudCBzdWNjZXNzZnVsbHknLCB7XG4gICAgICAgIHJ1bGVOYW1lOiBwYXlsb2FkLnJ1bGVOYW1lLFxuICAgICAgICBzdGF0ZTogcGF5bG9hZC5zdGF0ZSxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHNlbmQgU2xhY2sgYWxlcnQnLCB7XG4gICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICBydWxlTmFtZTogcGF5bG9hZC5ydWxlTmFtZSxcbiAgICAgICAgc3RhdGU6IHBheWxvYWQuc3RhdGUsXG4gICAgICB9KTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZm9ybWF0R3JhZmFuYUFsZXJ0KHBheWxvYWQ6IEdyYWZhbmFXZWJob29rUGF5bG9hZCk6IFNsYWNrTWVzc2FnZSB7XG4gICAgY29uc3Qgc2V2ZXJpdHkgPSB0aGlzLmdldEFsZXJ0U2V2ZXJpdHkocGF5bG9hZC5zdGF0ZSk7XG4gICAgY29uc3QgY29sb3IgPSB0aGlzLmdldEFsZXJ0Q29sb3IocGF5bG9hZC5zdGF0ZSk7XG4gICAgY29uc3QgZW1vamkgPSB0aGlzLmdldEFsZXJ0RW1vamkocGF5bG9hZC5zdGF0ZSk7XG5cbiAgICBjb25zdCBmaWVsZHM6IFNsYWNrRmllbGRbXSA9IFtcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6ICdTdGF0dXMnLFxuICAgICAgICB2YWx1ZTogYCR7ZW1vaml9ICR7cGF5bG9hZC5zdGF0ZS50b1VwcGVyQ2FzZSgpfWAsXG4gICAgICAgIHNob3J0OiB0cnVlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6ICdSdWxlJyxcbiAgICAgICAgdmFsdWU6IHBheWxvYWQucnVsZU5hbWUsXG4gICAgICAgIHNob3J0OiB0cnVlLFxuICAgICAgfSxcbiAgICBdO1xuXG4gICAgaWYgKHBheWxvYWQuZGFzaGJvYXJkSWQpIHtcbiAgICAgIGZpZWxkcy5wdXNoKHtcbiAgICAgICAgdGl0bGU6ICdEYXNoYm9hcmQgSUQnLFxuICAgICAgICB2YWx1ZTogcGF5bG9hZC5kYXNoYm9hcmRJZC50b1N0cmluZygpLFxuICAgICAgICBzaG9ydDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChwYXlsb2FkLnBhbmVsSWQpIHtcbiAgICAgIGZpZWxkcy5wdXNoKHtcbiAgICAgICAgdGl0bGU6ICdQYW5lbCBJRCcsXG4gICAgICAgIHZhbHVlOiBwYXlsb2FkLnBhbmVsSWQudG9TdHJpbmcoKSxcbiAgICAgICAgc2hvcnQ6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgZXZhbHVhdGlvbiBtYXRjaGVzIGlmIGF2YWlsYWJsZVxuICAgIGlmIChwYXlsb2FkLmV2YWxNYXRjaGVzICYmIHBheWxvYWQuZXZhbE1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgbWV0cmljcyA9IHBheWxvYWQuZXZhbE1hdGNoZXNcbiAgICAgICAgLm1hcCgobWF0Y2gpID0+IGAke21hdGNoLm1ldHJpY306ICR7bWF0Y2gudmFsdWV9YClcbiAgICAgICAgLmpvaW4oJ1xcbicpO1xuXG4gICAgICBmaWVsZHMucHVzaCh7XG4gICAgICAgIHRpdGxlOiAnTWV0cmljcycsXG4gICAgICAgIHZhbHVlOiBtZXRyaWNzLFxuICAgICAgICBzaG9ydDogZmFsc2UsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGFncyBpZiBhdmFpbGFibGVcbiAgICBpZiAocGF5bG9hZC50YWdzICYmIE9iamVjdC5rZXlzKHBheWxvYWQudGFncykubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgdGFncyA9IE9iamVjdC5lbnRyaWVzKHBheWxvYWQudGFncylcbiAgICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBgJHtrZXl9OiAke3ZhbHVlfWApXG4gICAgICAgIC5qb2luKCdcXG4nKTtcblxuICAgICAgZmllbGRzLnB1c2goe1xuICAgICAgICB0aXRsZTogJ1RhZ3MnLFxuICAgICAgICB2YWx1ZTogdGFncyxcbiAgICAgICAgc2hvcnQ6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYXR0YWNobWVudDogU2xhY2tBdHRhY2htZW50ID0ge1xuICAgICAgY29sb3IsXG4gICAgICBwcmV0ZXh0OiBgJHtzZXZlcml0eX0gQWxlcnQ6ICR7cGF5bG9hZC50aXRsZX1gLFxuICAgICAgdGl0bGU6IHBheWxvYWQucnVsZU5hbWUsXG4gICAgICB0aXRsZV9saW5rOiBwYXlsb2FkLnJ1bGVVcmwsXG4gICAgICB0ZXh0OiBwYXlsb2FkLm1lc3NhZ2UsXG4gICAgICBmaWVsZHMsXG4gICAgICBmb290ZXI6ICdWaXNBUEkgTW9uaXRvcmluZycsXG4gICAgICBmb290ZXJfaWNvbjpcbiAgICAgICAgJ2h0dHBzOi8vZ3JhZmFuYS5jb20vc3RhdGljL2ltZy9hYm91dC9ncmFmYW5hX2xvZ29fc3dpcmwtZXZlbnRzLnN2ZycsXG4gICAgICB0czogTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCksXG4gICAgICBtcmtkd25faW46IFsndGV4dCcsICdwcmV0ZXh0J10sXG4gICAgfTtcblxuICAgIC8vIEFkZCBpbWFnZSBpZiBhdmFpbGFibGVcbiAgICBpZiAocGF5bG9hZC5pbWFnZVVybCkge1xuICAgICAgYXR0YWNobWVudC5pbWFnZV91cmwgPSBwYXlsb2FkLmltYWdlVXJsO1xuICAgIH1cblxuICAgIGNvbnN0IG1lc3NhZ2U6IFNsYWNrTWVzc2FnZSA9IHtcbiAgICAgIGNoYW5uZWw6IHRoaXMuY29uZmlnU2VydmljZS5zbGFja0RlZmF1bHRDaGFubmVsLFxuICAgICAgdXNlcm5hbWU6ICdWaXNBUEkgTW9uaXRvcmluZycsXG4gICAgICBpY29uX2Vtb2ppOiAnOmNoYXJ0X3dpdGhfdXB3YXJkc190cmVuZDonLFxuICAgICAgdGV4dDogdGhpcy5idWlsZEFsZXJ0VGV4dChwYXlsb2FkKSxcbiAgICAgIGF0dGFjaG1lbnRzOiBbYXR0YWNobWVudF0sXG4gICAgfTtcblxuICAgIHJldHVybiBtZXNzYWdlO1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZEFsZXJ0VGV4dChwYXlsb2FkOiBHcmFmYW5hV2ViaG9va1BheWxvYWQpOiBzdHJpbmcge1xuICAgIGNvbnN0IGVtb2ppID0gdGhpcy5nZXRBbGVydEVtb2ppKHBheWxvYWQuc3RhdGUpO1xuXG4gICAgbGV0IHRleHQgPSBgJHtlbW9qaX0gKiR7cGF5bG9hZC5zdGF0ZS50b1VwcGVyQ2FzZSgpfSo6ICR7cGF5bG9hZC50aXRsZX1gO1xuXG4gICAgaWYgKHBheWxvYWQuc3RhdGUgPT09ICdhbGVydGluZycpIHtcbiAgICAgIHRleHQgKz0gJ1xcbjp3YXJuaW5nOiAqQWN0aW9uIG1heSBiZSByZXF1aXJlZConO1xuICAgIH0gZWxzZSBpZiAocGF5bG9hZC5zdGF0ZSA9PT0gJ29rJykge1xuICAgICAgdGV4dCArPSAnXFxuOndoaXRlX2NoZWNrX21hcms6ICpJc3N1ZSByZXNvbHZlZConO1xuICAgIH1cblxuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRBbGVydFNldmVyaXR5KHN0YXRlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgIGNhc2UgJ2FsZXJ0aW5nJzpcbiAgICAgICAgcmV0dXJuICdDUklUSUNBTCc7XG4gICAgICBjYXNlICdub19kYXRhJzpcbiAgICAgICAgcmV0dXJuICdXQVJOSU5HJztcbiAgICAgIGNhc2UgJ3BhdXNlZCc6XG4gICAgICAgIHJldHVybiAnSU5GTyc7XG4gICAgICBjYXNlICdwZW5kaW5nJzpcbiAgICAgICAgcmV0dXJuICdJTkZPJztcbiAgICAgIGNhc2UgJ29rJzpcbiAgICAgICAgcmV0dXJuICdPSyc7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ1VOS05PV04nO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0QWxlcnRDb2xvcihzdGF0ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICBjYXNlICdhbGVydGluZyc6XG4gICAgICAgIHJldHVybiAnZGFuZ2VyJztcbiAgICAgIGNhc2UgJ25vX2RhdGEnOlxuICAgICAgICByZXR1cm4gJ3dhcm5pbmcnO1xuICAgICAgY2FzZSAncGF1c2VkJzpcbiAgICAgICAgcmV0dXJuICcjODA4MDgwJzsgLy8gR3JheVxuICAgICAgY2FzZSAncGVuZGluZyc6XG4gICAgICAgIHJldHVybiAnI0ZGQTUwMCc7IC8vIE9yYW5nZVxuICAgICAgY2FzZSAnb2snOlxuICAgICAgICByZXR1cm4gJ2dvb2QnO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICcjODA4MDgwJzsgLy8gR3JheVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0QWxlcnRFbW9qaShzdGF0ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICBjYXNlICdhbGVydGluZyc6XG4gICAgICAgIHJldHVybiAnOnJlZF9jaXJjbGU6JztcbiAgICAgIGNhc2UgJ25vX2RhdGEnOlxuICAgICAgICByZXR1cm4gJzp5ZWxsb3dfY2lyY2xlOic7XG4gICAgICBjYXNlICdwYXVzZWQnOlxuICAgICAgICByZXR1cm4gJzpwYXVzZV9idXR0b246JztcbiAgICAgIGNhc2UgJ3BlbmRpbmcnOlxuICAgICAgICByZXR1cm4gJzpjbG9jazE6JztcbiAgICAgIGNhc2UgJ29rJzpcbiAgICAgICAgcmV0dXJuICc6Z3JlZW5fY2lyY2xlOic7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJzpncmV5X3F1ZXN0aW9uOic7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc2VuZEN1c3RvbUFsZXJ0KFxuICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICBzZXZlcml0eTogJ2luZm8nIHwgJ3dhcm5pbmcnIHwgJ2Vycm9yJyA9ICdpbmZvJyxcbiAgICBjaGFubmVsPzogc3RyaW5nXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghdGhpcy5jb25maWdTZXJ2aWNlLnNsYWNrRW5hYmxlZCkge1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoJ1NsYWNrIGludGVncmF0aW9uIGRpc2FibGVkLCBza2lwcGluZyBjdXN0b20gYWxlcnQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB3ZWJob29rVXJsID0gdGhpcy5jb25maWdTZXJ2aWNlLnNsYWNrV2ViaG9va1VybDtcbiAgICBpZiAoIXdlYmhvb2tVcmwpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdTbGFjayB3ZWJob29rIFVSTCBub3QgY29uZmlndXJlZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbG9yID1cbiAgICAgIHNldmVyaXR5ID09PSAnZXJyb3InXG4gICAgICAgID8gJ2RhbmdlcidcbiAgICAgICAgOiBzZXZlcml0eSA9PT0gJ3dhcm5pbmcnXG4gICAgICAgID8gJ3dhcm5pbmcnXG4gICAgICAgIDogJ2dvb2QnO1xuICAgIGNvbnN0IGVtb2ppID1cbiAgICAgIHNldmVyaXR5ID09PSAnZXJyb3InXG4gICAgICAgID8gJzpyZWRfY2lyY2xlOidcbiAgICAgICAgOiBzZXZlcml0eSA9PT0gJ3dhcm5pbmcnXG4gICAgICAgID8gJzp3YXJuaW5nOidcbiAgICAgICAgOiAnOmluZm9ybWF0aW9uX3NvdXJjZTonO1xuXG4gICAgY29uc3Qgc2xhY2tNZXNzYWdlOiBTbGFja01lc3NhZ2UgPSB7XG4gICAgICBjaGFubmVsOiBjaGFubmVsIHx8IHRoaXMuY29uZmlnU2VydmljZS5zbGFja0RlZmF1bHRDaGFubmVsLFxuICAgICAgdXNlcm5hbWU6ICdWaXNBUEkgU3lzdGVtJyxcbiAgICAgIGljb25fZW1vamk6ICc6cm9ib3RfZmFjZTonLFxuICAgICAgdGV4dDogYCR7ZW1vaml9ICR7bWVzc2FnZX1gLFxuICAgICAgYXR0YWNobWVudHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgIHRleHQ6IG1lc3NhZ2UsXG4gICAgICAgICAgZm9vdGVyOiAnVmlzQVBJIFN5c3RlbScsXG4gICAgICAgICAgdHM6IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGZpcnN0VmFsdWVGcm9tKFxuICAgICAgICB0aGlzLmh0dHBTZXJ2aWNlLnBvc3Qod2ViaG9va1VybCwgc2xhY2tNZXNzYWdlLCB7XG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRpbWVvdXQ6IDEwMDAwLFxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgdGhpcy5sb2dnZXIuaW5mbygnQ3VzdG9tIFNsYWNrIGFsZXJ0IHNlbnQgc3VjY2Vzc2Z1bGx5Jywge1xuICAgICAgICBzZXZlcml0eSxcbiAgICAgICAgY2hhbm5lbDogY2hhbm5lbCB8fCB0aGlzLmNvbmZpZ1NlcnZpY2Uuc2xhY2tEZWZhdWx0Q2hhbm5lbCxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHNlbmQgY3VzdG9tIFNsYWNrIGFsZXJ0Jywge1xuICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgc2V2ZXJpdHksXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICB9KTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHZhbGlkYXRlV2ViaG9va1NpZ25hdHVyZShcbiAgICBwYXlsb2FkOiBzdHJpbmcsXG4gICAgdGltZXN0YW1wOiBzdHJpbmcsXG4gICAgc2lnbmF0dXJlOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3Qgc2lnbmluZ1NlY3JldCA9IHRoaXMuY29uZmlnU2VydmljZS5zbGFja1NpZ25pbmdTZWNyZXQ7XG4gICAgaWYgKCFzaWduaW5nU2VjcmV0KSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKFxuICAgICAgICAnU2xhY2sgc2lnbmluZyBzZWNyZXQgbm90IGNvbmZpZ3VyZWQsIHNraXBwaW5nIHNpZ25hdHVyZSB2YWxpZGF0aW9uJ1xuICAgICAgKTtcbiAgICAgIHJldHVybiB0cnVlOyAvLyBBbGxvdyBpZiBubyBzZWNyZXQgY29uZmlndXJlZFxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbiAgICAgIGNvbnN0IGJhc2VzdHJpbmcgPSBgdjA6JHt0aW1lc3RhbXB9OiR7cGF5bG9hZH1gO1xuICAgICAgY29uc3QgbXlTaWduYXR1cmUgPVxuICAgICAgICAndjA9JyArXG4gICAgICAgIGNyeXB0b1xuICAgICAgICAgIC5jcmVhdGVIbWFjKCdzaGEyNTYnLCBzaWduaW5nU2VjcmV0KVxuICAgICAgICAgIC51cGRhdGUoYmFzZXN0cmluZylcbiAgICAgICAgICAuZGlnZXN0KCdoZXgnKTtcblxuICAgICAgLy8gVXNlIHRpbWluZy1zYWZlIGNvbXBhcmlzb25cbiAgICAgIHJldHVybiBjcnlwdG8udGltaW5nU2FmZUVxdWFsKFxuICAgICAgICBCdWZmZXIuZnJvbShzaWduYXR1cmUsICd1dGY4JyksXG4gICAgICAgIEJ1ZmZlci5mcm9tKG15U2lnbmF0dXJlLCAndXRmOCcpXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHZhbGlkYXRlIHdlYmhvb2sgc2lnbmF0dXJlJywge1xuICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuIl0sInZlcnNpb24iOjN9