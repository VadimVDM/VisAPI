{"file":"/Users/vadim/Projects/VisAPI/libs/shared/types/src/lib/api.types.ts","mappings":";AAAA,wDAAwD","names":[],"sources":["/Users/vadim/Projects/VisAPI/libs/shared/types/src/lib/api.types.ts"],"sourcesContent":["// API related types shared between frontend and backend\n\nexport interface ApiKey {\n  id: string;\n  name: string;\n  prefix: string;\n  hashed_secret: string;\n  scopes: string[];\n  expires_at: string | null;\n  created_by: string;\n  created_at: string;\n  active: boolean;\n}\n\nexport interface CreateApiKeyRequest {\n  name: string;\n  scopes: string[];\n}\n\nexport interface CreateApiKeyResponse {\n  key: string;\n  apiKey: ApiKey;\n}\n\n// Common API response structure\nexport interface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n}\n\n// Pagination\nexport interface PaginationParams {\n  page?: number;\n  limit?: number;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    pages: number;\n  };\n}\n\n// Health check types\nexport interface HealthStatus {\n  status: 'ok' | 'error';\n  timestamp: string;\n  uptime: number;\n  checks: {\n    database: {\n      status: 'ok' | 'error';\n      responseTime?: number;\n      error?: string;\n    };\n    redis: {\n      status: 'ok' | 'error';\n      responseTime?: number;\n      error?: string;\n    };\n  };\n}\n\n// Webhook types\nexport interface WebhookPayload {\n  [key: string]: any;\n}\n\nexport interface TriggerResponse {\n  success: boolean;\n  jobId?: string;\n  error?: string;\n}\n\n// Queue metrics\nexport interface QueueMetrics {\n  waiting: number;\n  active: number;\n  completed: number;\n  failed: number;\n  delayed: number;\n  paused: boolean;\n}\n\n// Log entry types\nexport interface LogEntry {\n  id: string;\n  level: 'info' | 'warn' | 'error' | 'debug';\n  message: string;\n  metadata?: any;\n  workflow_id?: string;\n  job_id?: string;\n  pii_redacted: boolean;\n  created_at: string;\n}\n\nexport interface LogFilters {\n  level?: 'info' | 'warn' | 'error' | 'debug';\n  workflow_id?: string;\n  job_id?: string;\n  start_date?: string;\n  end_date?: string;\n  search?: string;\n}\n\nexport interface LogStats {\n  total: number;\n  withPii: number;\n  recentCount: number;\n  byLevel: Record<string, number>;\n}\n"],"version":3}