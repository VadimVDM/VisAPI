{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/workflows/workflows.service.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/workflows/workflows.service.ts"],"sourcesContent":["import { Injectable, Logger, NotFoundException } from '@nestjs/common';\nimport { SupabaseService } from '@visapi/core-supabase';\nimport { CreateWorkflowDto, UpdateWorkflowDto, WorkflowResponseDto } from './dto';\nimport { WorkflowSchema } from '@visapi/shared-types';\n\n@Injectable()\nexport class WorkflowsService {\n  private readonly logger = new Logger(WorkflowsService.name);\n\n  constructor(private readonly supabase: SupabaseService) {}\n\n  async create(createWorkflowDto: CreateWorkflowDto): Promise<WorkflowResponseDto> {\n    const { name, description, enabled, variables, schema } = createWorkflowDto;\n\n    // Combine the base fields with the schema for storage\n    const workflowData = {\n      name,\n      description,\n      enabled,\n      schema: {\n        ...schema,\n        variables,\n      },\n    };\n\n    const { data, error } = await this.supabase\n      .client\n      .from('workflows')\n      .insert(workflowData)\n      .select()\n      .single();\n\n    if (error) {\n      this.logger.error('Failed to create workflow:', error);\n      throw new Error('Failed to create workflow');\n    }\n\n    this.logger.log(`Created workflow: ${data.id}`);\n    return this.mapToResponseDto(data);\n  }\n\n  async findAll(): Promise<WorkflowResponseDto[]> {\n    const { data, error } = await this.supabase\n      .client\n      .from('workflows')\n      .select('*')\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      this.logger.error('Failed to fetch workflows:', error);\n      throw new Error('Failed to fetch workflows');\n    }\n\n    return data.map(workflow => this.mapToResponseDto(workflow));\n  }\n\n  async findOne(id: string): Promise<WorkflowResponseDto> {\n    const { data, error } = await this.supabase\n      .client\n      .from('workflows')\n      .select('*')\n      .eq('id', id)\n      .single();\n\n    if (error || !data) {\n      this.logger.warn(`Workflow not found: ${id}`);\n      throw new NotFoundException(`Workflow with id ${id} not found`);\n    }\n\n    return this.mapToResponseDto(data);\n  }\n\n  async update(id: string, updateWorkflowDto: UpdateWorkflowDto): Promise<WorkflowResponseDto> {\n    const { name, description, enabled, variables, schema } = updateWorkflowDto;\n\n    // Build update data, only including fields that are provided\n    const updateData: any = {};\n    if (name !== undefined) updateData.name = name;\n    if (description !== undefined) updateData.description = description;\n    if (enabled !== undefined) updateData.enabled = enabled;\n    \n    if (schema !== undefined) {\n      updateData.schema = {\n        ...schema,\n        variables,\n      };\n    }\n\n    const { data, error } = await this.supabase\n      .client\n      .from('workflows')\n      .update(updateData)\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error || !data) {\n      this.logger.error(`Failed to update workflow ${id}:`, error);\n      throw new NotFoundException(`Workflow with id ${id} not found`);\n    }\n\n    this.logger.log(`Updated workflow: ${id}`);\n    return this.mapToResponseDto(data);\n  }\n\n  async remove(id: string): Promise<void> {\n    const { error } = await this.supabase\n      .client\n      .from('workflows')\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      this.logger.error(`Failed to delete workflow ${id}:`, error);\n      throw new NotFoundException(`Workflow with id ${id} not found`);\n    }\n\n    this.logger.log(`Deleted workflow: ${id}`);\n  }\n\n  async findEnabled(): Promise<WorkflowResponseDto[]> {\n    const { data, error } = await this.supabase\n      .client\n      .from('workflows')\n      .select('*')\n      .eq('enabled', true)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      this.logger.error('Failed to fetch enabled workflows:', error);\n      throw new Error('Failed to fetch enabled workflows');\n    }\n\n    return data.map(workflow => this.mapToResponseDto(workflow));\n  }\n\n  private mapToResponseDto(workflow: any): WorkflowResponseDto {\n    return {\n      id: workflow.id,\n      name: workflow.name,\n      description: workflow.description,\n      enabled: workflow.enabled,\n      variables: workflow.schema?.variables,\n      schema: workflow.schema,\n      created_at: workflow.created_at,\n      updated_at: workflow.updated_at,\n    };\n  }\n}"],"version":3}