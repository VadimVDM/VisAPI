{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/logs/services/pii-redaction.service.ts","mappings":";;;;AAAA,2CAA4C;AASrC,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;IAAzB;QACL,qEAAqE;QACpD,aAAQ,GAAG;YAC1B,6CAA6C;YAC7C,UAAU,EAAE;gBACV,KAAK,EAAE,+BAA+B;gBACtC,WAAW,EAAE,iBAAiB;gBAC9B,IAAI,EAAE,aAAa;aACpB;YACD,2DAA2D;YAC3D,KAAK,EAAE;gBACL,KAAK,EAAE,6DAA6D;gBACpE,WAAW,EAAE,oBAAoB;gBACjC,IAAI,EAAE,cAAc;aACrB;YACD,KAAK,EAAE;gBACL,KAAK,EAAE,iDAAiD;gBACxD,WAAW,EAAE,kBAAkB;gBAC/B,IAAI,EAAE,OAAO;aACd;YACD,GAAG,EAAE;gBACH,KAAK,EAAE,0BAA0B;gBACjC,WAAW,EAAE,gBAAgB;gBAC7B,IAAI,EAAE,KAAK;aACZ;YACD,SAAS,EAAE;gBACT,KAAK,EAAE,8BAA8B;gBACrC,WAAW,EAAE,eAAe;gBAC5B,IAAI,EAAE,YAAY;aACnB;YACD,2CAA2C;YAC3C,OAAO,EAAE;gBACP,KAAK,EAAE,4FAA4F;gBACnG,WAAW,EAAE,oBAAoB;gBACjC,IAAI,EAAE,SAAS;aAChB;YACD,sBAAsB;YACtB,MAAM,EAAE;gBACN,KAAK,EAAE,uBAAuB;gBAC9B,WAAW,EAAE,oBAAoB;gBACjC,IAAI,EAAE,SAAS;aAChB;YACD,0CAA0C;YAC1C,IAAI,EAAE;gBACJ,KAAK,EAAE,oEAAoE;gBAC3E,WAAW,EAAE,iBAAiB;gBAC9B,IAAI,EAAE,MAAM;aACb;SACF,CAAC;IA+HJ,CAAC;IA7HC;;OAEG;IACH,SAAS,CAAC,IAAY;QACpB,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;YACtC,OAAO;gBACL,IAAI,EAAE,EAAE;gBACR,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,EAAE;aACnB,CAAC;QACJ,CAAC;QAED,IAAI,YAAY,GAAG,IAAI,CAAC;QACxB,MAAM,cAAc,GAAa,EAAE,CAAC;QAEpC,qBAAqB;QACrB,KAAK,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC3D,MAAM,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAClD,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAClC,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;gBACxE,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACpC,CAAC;QACH,CAAC;QAED,OAAO;YACL,IAAI,EAAE,YAAY;YAClB,QAAQ,EAAE,cAAc,CAAC,MAAM,GAAG,CAAC;YACnC,cAAc;SACf,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,mBAAmB,CAAC,GAAQ;QAC1B,IAAI,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;YACpC,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;gBAC5B,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBACnC,OAAO,EAAE,GAAG,EAAE,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,cAAc,EAAE,MAAM,CAAC,cAAc,EAAE,CAAC;YAChG,CAAC;YACD,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE,EAAE,CAAC;QACtD,CAAC;QAED,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QACjD,IAAI,cAAc,GAAG,KAAK,CAAC;QAC3B,MAAM,oBAAoB,GAAa,EAAE,CAAC;QAE1C,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;YAC/C,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;gBAC9B,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBACrC,WAAW,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC;gBAC/B,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;oBACpB,cAAc,GAAG,IAAI,CAAC;oBACtB,oBAAoB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;gBACtD,CAAC;YACH,CAAC;iBAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;gBACvD,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;gBAC/C,WAAW,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC;gBAC9B,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;oBACpB,cAAc,GAAG,IAAI,CAAC;oBACtB,oBAAoB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;gBACtD,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,WAAW,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;YAC3B,CAAC;QACH,CAAC;QAED,OAAO;YACL,GAAG,EAAE,WAAW;YAChB,QAAQ,EAAE,cAAc;YACxB,cAAc,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,oBAAoB,CAAC,CAAC;SACnD,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,WAAW,CAAC,IAAY;QACtB,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;YACtC,OAAO,KAAK,CAAC;QACf,CAAC;QAED,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CACjD,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CACzB,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,WAAW,CAAC,IAAY;QACtB,MAAM,KAAK,GAA2B,EAAE,CAAC;QAEzC,KAAK,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC3D,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC1C,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACrD,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,IAAY,EAAE,KAAa,EAAE,WAAmB;QACzD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG;YACpB,KAAK;YACL,WAAW;YACX,IAAI;SACL,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,IAAY;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,WAAW;QACT,yBAAY,IAAI,CAAC,QAAQ,EAAG;IAC9B,CAAC;CACF,CAAA;AA/KY,kDAAmB;8BAAnB,mBAAmB;IAD/B,IAAA,mBAAU,GAAE;GACA,mBAAmB,CA+K/B","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/logs/services/pii-redaction.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\n\nexport interface PiiRedactionResult {\n  text: string;\n  piiFound: boolean;\n  redactedFields: string[];\n}\n\n@Injectable()\nexport class PiiRedactionService {\n  // PII detection patterns - ordered by specificity to avoid conflicts\n  private readonly patterns = {\n    // Process credit cards first (more specific)\n    creditCard: {\n      regex: /\\b(?:\\d{4}[-.\\s]?){3}\\d{4}\\b/g,\n      replacement: '[CARD_REDACTED]',\n      name: 'credit_card'\n    },\n    // Process phone numbers after credit cards (less specific)\n    phone: {\n      regex: /(\\s|^)(\\+?1?[-.\\s]?)?\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}\\b/g,\n      replacement: '$1[PHONE_REDACTED]',\n      name: 'phone_number'\n    },\n    email: {\n      regex: /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g,\n      replacement: '[EMAIL_REDACTED]',\n      name: 'email'\n    },\n    ssn: {\n      regex: /\\b\\d{3}-?\\d{2}-?\\d{4}\\b/g,\n      replacement: '[SSN_REDACTED]',\n      name: 'ssn'\n    },\n    ipAddress: {\n      regex: /\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b/g,\n      replacement: '[IP_REDACTED]',\n      name: 'ip_address'\n    },\n    // Generic patterns for common PII keywords\n    address: {\n      regex: /\\b\\d+\\s+[A-Za-z\\s]+(?:street|st|avenue|ave|road|rd|drive|dr|lane|ln|court|ct|place|pl)\\b/gi,\n      replacement: '[ADDRESS_REDACTED]',\n      name: 'address'\n    },\n    // API keys and tokens\n    apiKey: {\n      regex: /\\b[A-Za-z0-9]{32,}\\b/g,\n      replacement: '[API_KEY_REDACTED]',\n      name: 'api_key'\n    },\n    // UUIDs (potential sensitive identifiers)\n    uuid: {\n      regex: /\\b[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\b/gi,\n      replacement: '[UUID_REDACTED]',\n      name: 'uuid'\n    }\n  };\n\n  /**\n   * Redact PII from text content\n   */\n  redactPii(text: string): PiiRedactionResult {\n    if (!text || typeof text !== 'string') {\n      return {\n        text: '',\n        piiFound: false,\n        redactedFields: []\n      };\n    }\n\n    let redactedText = text;\n    const redactedFields: string[] = [];\n\n    // Apply each pattern\n    for (const [key, pattern] of Object.entries(this.patterns)) {\n      const matches = redactedText.match(pattern.regex);\n      if (matches && matches.length > 0) {\n        redactedText = redactedText.replace(pattern.regex, pattern.replacement);\n        redactedFields.push(pattern.name);\n      }\n    }\n\n    return {\n      text: redactedText,\n      piiFound: redactedFields.length > 0,\n      redactedFields\n    };\n  }\n\n  /**\n   * Redact PII from an object (recursively)\n   */\n  redactPiiFromObject(obj: any): { obj: any; piiFound: boolean; redactedFields: string[] } {\n    if (!obj || typeof obj !== 'object') {\n      if (typeof obj === 'string') {\n        const result = this.redactPii(obj);\n        return { obj: result.text, piiFound: result.piiFound, redactedFields: result.redactedFields };\n      }\n      return { obj, piiFound: false, redactedFields: [] };\n    }\n\n    const redactedObj = Array.isArray(obj) ? [] : {};\n    let globalPiiFound = false;\n    const globalRedactedFields: string[] = [];\n\n    for (const [key, value] of Object.entries(obj)) {\n      if (typeof value === 'string') {\n        const result = this.redactPii(value);\n        redactedObj[key] = result.text;\n        if (result.piiFound) {\n          globalPiiFound = true;\n          globalRedactedFields.push(...result.redactedFields);\n        }\n      } else if (typeof value === 'object' && value !== null) {\n        const result = this.redactPiiFromObject(value);\n        redactedObj[key] = result.obj;\n        if (result.piiFound) {\n          globalPiiFound = true;\n          globalRedactedFields.push(...result.redactedFields);\n        }\n      } else {\n        redactedObj[key] = value;\n      }\n    }\n\n    return {\n      obj: redactedObj,\n      piiFound: globalPiiFound,\n      redactedFields: [...new Set(globalRedactedFields)]\n    };\n  }\n\n  /**\n   * Check if text contains PII without redacting\n   */\n  containsPii(text: string): boolean {\n    if (!text || typeof text !== 'string') {\n      return false;\n    }\n\n    return Object.values(this.patterns).some(pattern => \n      pattern.regex.test(text)\n    );\n  }\n\n  /**\n   * Get PII detection statistics\n   */\n  getPiiStats(text: string): Record<string, number> {\n    const stats: Record<string, number> = {};\n\n    for (const [key, pattern] of Object.entries(this.patterns)) {\n      const matches = text.match(pattern.regex);\n      stats[pattern.name] = matches ? matches.length : 0;\n    }\n\n    return stats;\n  }\n\n  /**\n   * Add custom PII pattern\n   */\n  addPattern(name: string, regex: RegExp, replacement: string): void {\n    this.patterns[name] = {\n      regex,\n      replacement,\n      name\n    };\n  }\n\n  /**\n   * Remove PII pattern\n   */\n  removePattern(name: string): void {\n    delete this.patterns[name];\n  }\n\n  /**\n   * Get all configured patterns\n   */\n  getPatterns(): Record<string, { regex: RegExp; replacement: string; name: string }> {\n    return { ...this.patterns };\n  }\n}"],"version":3}