e0f337c04e6cea3fc65089dfa7cb6803
"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthService = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const core_supabase_1 = require("@visapi/core-supabase");
const core_config_1 = require("@visapi/core-config");
const bcrypt = tslib_1.__importStar(require("bcrypt"));
const crypto_1 = require("crypto");
let AuthService = class AuthService {
    constructor(supabase, config) {
        this.supabase = supabase;
        this.config = config;
    }
    createApiKey(name, scopes, createdBy) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Generate prefix and secret
            const prefix = this.config.apiKeyPrefix || 'vapi_';
            const secret = (0, crypto_1.randomBytes)(32).toString('hex');
            const fullKey = `${prefix}${secret}`;
            // Hash only the secret part for storage
            const hashedSecret = yield bcrypt.hash(secret, 12);
            // Calculate expiry date
            const expiresAt = new Date();
            expiresAt.setDate(expiresAt.getDate() + (this.config.apiKeyExpiryDays || 90));
            // Store in database
            const { data, error } = yield this.supabase.serviceClient
                .from('api_keys')
                .insert({
                name,
                prefix,
                hashed_secret: hashedSecret,
                scopes,
                expires_at: expiresAt.toISOString(),
                created_by: createdBy,
            })
                .select()
                .single();
            if (error) {
                throw new Error(`Failed to create API key: ${error.message}`);
            }
            return {
                key: fullKey,
                apiKey: data,
            };
        });
    }
    validateApiKey(apiKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { prefix, secret } = this.splitApiKey(apiKey);
            if (!prefix || !secret) {
                return null;
            }
            // Find the API key record by prefix
            const { data, error } = yield this.supabase.serviceClient
                .from('api_keys')
                .select('*')
                .eq('prefix', prefix)
                .single();
            if (error || !data) {
                return null;
            }
            // Check if expired
            if (data.expires_at && new Date(data.expires_at) < new Date()) {
                return null;
            }
            // Use bcrypt.compare to validate the secret
            const isValid = yield bcrypt.compare(secret, data.hashed_secret);
            if (!isValid) {
                return null;
            }
            // Update last_used_at timestamp
            yield this.supabase.serviceClient
                .from('api_keys')
                .update({ last_used_at: new Date().toISOString() })
                .eq('id', data.id);
            return data;
        });
    }
    listApiKeys(userId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let query = this.supabase.serviceClient
                .from('api_keys')
                .select('*')
                .order('created_at', { ascending: false });
            if (userId) {
                query = query.eq('created_by', userId);
            }
            const { data, error } = yield query;
            if (error) {
                throw new Error(`Failed to list API keys: ${error.message}`);
            }
            return data || [];
        });
    }
    revokeApiKey(keyId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { error } = yield this.supabase.serviceClient
                .from('api_keys')
                .delete()
                .eq('id', keyId);
            if (error) {
                throw new Error(`Failed to revoke API key: ${error.message}`);
            }
        });
    }
    splitApiKey(apiKey) {
        const prefixPattern = this.config.apiKeyPrefix || 'vapi_';
        if (!apiKey.startsWith(prefixPattern)) {
            return { prefix: '', secret: '' };
        }
        const prefix = prefixPattern;
        const secret = apiKey.slice(prefix.length);
        return { prefix, secret };
    }
    checkScopes(apiKey, requiredScopes) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!requiredScopes.length) {
                return true;
            }
            return requiredScopes.every((scope) => apiKey.scopes.includes(scope));
        });
    }
};
exports.AuthService = AuthService;
exports.AuthService = AuthService = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof core_supabase_1.SupabaseService !== "undefined" && core_supabase_1.SupabaseService) === "function" ? _a : Object, typeof (_b = typeof core_config_1.ConfigService !== "undefined" && core_config_1.ConfigService) === "function" ? _b : Object])
], AuthService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,