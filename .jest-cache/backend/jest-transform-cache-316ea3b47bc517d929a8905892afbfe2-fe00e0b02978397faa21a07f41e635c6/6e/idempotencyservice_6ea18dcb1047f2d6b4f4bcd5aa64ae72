04d22a5f8198dbd4060a13f4c8c52a63
"use strict";
var IdempotencyService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdempotencyService = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const common_2 = require("@nestjs/common");
const crypto_1 = require("crypto");
let IdempotencyService = IdempotencyService_1 = class IdempotencyService {
    constructor(redis) {
        this.redis = redis;
        this.logger = new common_2.Logger(IdempotencyService_1.name);
    }
    /**
     * Check if an idempotency key has already been processed and return cached result
     */
    checkIdempotency(key) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const cachedResult = yield this.redis.get(`idempotent:${key}`);
                return cachedResult ? JSON.parse(cachedResult) : null;
            }
            catch (error) {
                this.logger.warn(`Failed to check idempotency for key ${key}:`, error);
                return null;
            }
        });
    }
    /**
     * Store the result of an idempotent operation
     */
    storeResult(key_1, result_1) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (key, result, ttl = 3600) {
            try {
                yield this.redis.setex(`idempotent:${key}`, ttl, JSON.stringify({
                    result,
                    timestamp: Date.now(),
                    status: 'completed',
                }));
                this.logger.debug(`Stored idempotent result for key: ${key}`);
            }
            catch (error) {
                this.logger.warn(`Failed to store idempotent result for key ${key}:`, error);
            }
        });
    }
    /**
     * Execute an operation with idempotency protection
     */
    checkAndExecute(key_1, executor_1) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (key, executor, ttl = 3600) {
            const lockKey = `idempotent:${key}:lock`;
            const resultKey = `idempotent:${key}:result`;
            // Check if result already exists
            const existingResult = yield this.redis.get(resultKey);
            if (existingResult) {
                this.logger.debug(`Returning cached idempotent result for key: ${key}`);
                const parsed = JSON.parse(existingResult);
                return parsed.result;
            }
            // Try to acquire lock
            const lockId = (0, crypto_1.randomUUID)();
            const lockAcquired = yield this.redis.set(lockKey, lockId, 'PX', 300000, 'NX');
            if (lockAcquired !== 'OK') {
                // Another request is processing, wait and check for result
                yield this.waitForResult(resultKey, 30000); // Wait up to 30 seconds
                const result = yield this.redis.get(resultKey);
                if (result) {
                    const parsed = JSON.parse(result);
                    return parsed.result;
                }
                throw new Error('Idempotent operation failed - no result available');
            }
            try {
                // Execute the operation
                this.logger.debug(`Executing idempotent operation for key: ${key}`);
                const result = yield executor();
                // Store result
                yield this.storeResult(key, result, ttl);
                return result;
            }
            finally {
                // Release lock
                yield this.releaseLock(lockKey, lockId);
            }
        });
    }
    /**
     * Mark an operation as in progress to prevent concurrent execution
     */
    markInProgress(key_1) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (key, ttl = 300) {
            try {
                const success = yield this.redis.set(`idempotent:${key}:lock`, 'processing', 'PX', ttl * 1000, 'NX');
                return success === 'OK';
            }
            catch (error) {
                this.logger.warn(`Failed to mark operation as in progress for key ${key}:`, error);
                return false;
            }
        });
    }
    /**
     * Wait for a result to become available (polling with backoff)
     */
    waitForResult(resultKey, maxWaitMs) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const startTime = Date.now();
            let delay = 100; // Start with 100ms delay
            while (Date.now() - startTime < maxWaitMs) {
                const result = yield this.redis.get(resultKey);
                if (result) {
                    return;
                }
                yield new Promise((resolve) => setTimeout(resolve, delay));
                delay = Math.min(delay * 1.5, 2000); // Exponential backoff, max 2s
            }
        });
    }
    /**
     * Release a distributed lock using Lua script for atomicity
     */
    releaseLock(lockKey, lockId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const script = `
        if redis.call("get", KEYS[1]) == ARGV[1] then
          return redis.call("del", KEYS[1])
        else
          return 0
        end
      `;
                const result = yield this.redis.eval(script, 1, lockKey, lockId);
                return result === 1;
            }
            catch (error) {
                this.logger.warn(`Failed to release lock ${lockKey}:`, error);
                return false;
            }
        });
    }
    /**
     * Clear an idempotency key (for testing or manual cleanup)
     */
    clearIdempotencyKey(key) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.redis.del(`idempotent:${key}`);
                yield this.redis.del(`idempotent:${key}:lock`);
                yield this.redis.del(`idempotent:${key}:result`);
                this.logger.debug(`Cleared idempotency key: ${key}`);
            }
            catch (error) {
                this.logger.warn(`Failed to clear idempotency key ${key}:`, error);
            }
        });
    }
};
exports.IdempotencyService = IdempotencyService;
exports.IdempotencyService = IdempotencyService = IdempotencyService_1 = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__param(0, (0, common_1.Inject)('REDIS_CLIENT')),
    tslib_1.__metadata("design:paramtypes", [Object])
], IdempotencyService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,