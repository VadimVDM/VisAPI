{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/health/indicators/supabase.health.spec.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/health/indicators/supabase.health.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { HealthCheckError } from '@nestjs/terminus';\nimport { SupabaseHealthIndicator } from './supabase.health';\nimport { SupabaseService } from '@visapi/core-supabase';\n\ndescribe('SupabaseHealthIndicator', () => {\n  let indicator: SupabaseHealthIndicator;\n  let supabaseService: jest.Mocked<SupabaseService>;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const mockSupabaseService = {\n      checkConnection: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        SupabaseHealthIndicator,\n        {\n          provide: SupabaseService,\n          useValue: mockSupabaseService,\n        },\n      ],\n    }).compile();\n\n    indicator = module.get<SupabaseHealthIndicator>(SupabaseHealthIndicator);\n    supabaseService = module.get(SupabaseService) as jest.Mocked<SupabaseService>;\n  });\n\n  it('should be defined', () => {\n    expect(indicator).toBeDefined();\n  });\n\n  describe('isHealthy', () => {\n    const healthKey = 'supabase';\n\n    it('should return healthy status when Supabase connection is successful', async () => {\n      supabaseService.checkConnection.mockResolvedValue(true);\n\n      const result = await indicator.isHealthy(healthKey);\n\n      expect(result).toEqual({\n        supabase: {\n          status: 'up',\n        },\n      });\n      expect(supabaseService.checkConnection).toHaveBeenCalledTimes(1);\n    });\n\n    it('should throw HealthCheckError when Supabase connection fails', async () => {\n      supabaseService.checkConnection.mockResolvedValue(false);\n\n      await expect(indicator.isHealthy(healthKey)).rejects.toThrow(\n        HealthCheckError\n      );\n      expect(supabaseService.checkConnection).toHaveBeenCalledTimes(1);\n    });\n\n    it('should throw HealthCheckError when Supabase service throws an error', async () => {\n      const error = new Error('Network timeout');\n      supabaseService.checkConnection.mockRejectedValue(error);\n\n      await expect(indicator.isHealthy(healthKey)).rejects.toThrow(\n        HealthCheckError\n      );\n\n      try {\n        await indicator.isHealthy(healthKey);\n      } catch (err) {\n        expect(err).toBeInstanceOf(HealthCheckError);\n        expect(err.message).toBe('Supabase connection failed');\n        expect(err.causes).toEqual({\n          supabase: {\n            status: 'down',\n          },\n        });\n      }\n    });\n\n    it('should include the provided key in the health status', async () => {\n      const customKey = 'supabase_cluster';\n      supabaseService.checkConnection.mockResolvedValue(true);\n\n      const result = await indicator.isHealthy(customKey);\n\n      expect(result).toHaveProperty(customKey);\n      expect(result[customKey]).toEqual({\n        status: 'up',\n      });\n    });\n\n    it('should handle Supabase service timeout gracefully', async () => {\n      supabaseService.checkConnection.mockResolvedValue(false);\n\n      try {\n        await indicator.isHealthy(healthKey);\n      } catch (err) {\n        expect(err).toBeInstanceOf(HealthCheckError);\n        expect(err.message).toBe('Supabase connection failed');\n        expect(err.causes).toEqual({\n          supabase: {\n            status: 'down',\n          },\n        });\n      }\n    });\n  });\n});\n"],"version":3}