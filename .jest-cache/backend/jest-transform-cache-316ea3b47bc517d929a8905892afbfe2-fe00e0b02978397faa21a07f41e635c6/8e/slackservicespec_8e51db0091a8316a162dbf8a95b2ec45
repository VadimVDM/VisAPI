aa79dbf9ae5a1d0ffa32e495b2f7f455
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const testing_1 = require("@nestjs/testing");
const axios_1 = require("@nestjs/axios");
const core_config_1 = require("@visapi/core-config");
const slack_service_1 = require("./slack.service");
const rxjs_1 = require("rxjs");
describe('SlackService', () => {
    let service;
    let httpService;
    let configService;
    const mockPayload = {
        dashboardId: 1,
        evalMatches: [
            {
                value: 75.5,
                metric: 'cpu_usage',
                tags: { host: 'server-1' },
            },
        ],
        message: 'CPU usage is above threshold',
        orgId: 1,
        panelId: 2,
        ruleId: 3,
        ruleName: 'High CPU Usage',
        ruleUrl: 'https://grafana.example.com/d/dashboard/panel',
        state: 'alerting',
        tags: { severity: 'high' },
        title: 'High CPU Usage Alert',
    };
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        const module = yield testing_1.Test.createTestingModule({
            providers: [
                slack_service_1.SlackService,
                {
                    provide: axios_1.HttpService,
                    useValue: {
                        post: jest.fn().mockReturnValue((0, rxjs_1.of)({ data: { ok: true } })),
                    },
                },
                {
                    provide: core_config_1.ConfigService,
                    useValue: {
                        slackEnabled: true,
                        slackWebhookUrl: 'https://hooks.slack.com/services/test/webhook',
                        slackDefaultChannel: '#alerts',
                        slackSigningSecret: 'test-secret',
                    },
                },
                {
                    provide: `PinoLogger:${slack_service_1.SlackService.name}`,
                    useValue: {
                        debug: jest.fn(),
                        info: jest.fn(),
                        error: jest.fn(),
                        warn: jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(slack_service_1.SlackService);
        httpService = module.get(axios_1.HttpService);
        configService = module.get(core_config_1.ConfigService);
    }));
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('sendGrafanaAlert', () => {
        it('should send Grafana alert successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield service.sendGrafanaAlert(mockPayload);
            expect(httpService.post).toHaveBeenCalledWith('https://hooks.slack.com/services/test/webhook', expect.objectContaining({
                channel: '#alerts',
                username: 'VisAPI Monitoring',
                icon_emoji: ':chart_with_upwards_trend:',
                text: expect.stringContaining('ALERTING'),
                attachments: expect.arrayContaining([
                    expect.objectContaining({
                        color: 'danger',
                        title: 'High CPU Usage',
                        title_link: 'https://grafana.example.com/d/dashboard/panel',
                        text: 'CPU usage is above threshold',
                    }),
                ]),
            }), expect.objectContaining({
                headers: {
                    'Content-Type': 'application/json',
                },
                timeout: 10000,
            }));
        }));
        it('should skip alert when Slack is disabled', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock disabled
            configService.slackEnabled = false;
            yield service.sendGrafanaAlert(mockPayload);
            expect(httpService.post).not.toHaveBeenCalled();
        }));
        it('should handle missing webhook URL', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock empty webhook URL
            configService.slackWebhookUrl = '';
            yield service.sendGrafanaAlert(mockPayload);
            expect(httpService.post).not.toHaveBeenCalled();
        }));
        it('should handle HTTP errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const error = new Error('Network error');
            httpService.post.mockReturnValue((0, rxjs_1.throwError)(error));
            yield expect(service.sendGrafanaAlert(mockPayload)).rejects.toThrow('Network error');
        }));
        it('should format resolved alert correctly', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const resolvedPayload = Object.assign(Object.assign({}, mockPayload), { state: 'ok', message: 'CPU usage is back to normal' });
            yield service.sendGrafanaAlert(resolvedPayload);
            expect(httpService.post).toHaveBeenCalledWith(expect.any(String), expect.objectContaining({
                text: expect.stringContaining('OK'),
                attachments: expect.arrayContaining([
                    expect.objectContaining({
                        color: 'good',
                        pretext: expect.stringContaining('OK Alert'),
                    }),
                ]),
            }), expect.any(Object));
        }));
    });
    describe('sendCustomAlert', () => {
        it('should send custom alert successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield service.sendCustomAlert('Test message', 'warning', '#test');
            expect(httpService.post).toHaveBeenCalledWith('https://hooks.slack.com/services/test/webhook', expect.objectContaining({
                channel: '#test',
                username: 'VisAPI System',
                icon_emoji: ':robot_face:',
                text: ':warning: Test message',
                attachments: expect.arrayContaining([
                    expect.objectContaining({
                        color: 'warning',
                        text: 'Test message',
                    }),
                ]),
            }), expect.objectContaining({
                headers: {
                    'Content-Type': 'application/json',
                },
                timeout: 10000,
            }));
        }));
        it('should use default channel when none specified', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield service.sendCustomAlert('Test message');
            expect(httpService.post).toHaveBeenCalledWith(expect.any(String), expect.objectContaining({
                channel: '#alerts',
            }), expect.any(Object));
        }));
        it('should handle errors gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const error = new Error('Network error');
            httpService.post.mockReturnValue((0, rxjs_1.throwError)(error));
            yield expect(service.sendCustomAlert('Test message')).rejects.toThrow('Network error');
        }));
    });
    describe('validateWebhookSignature', () => {
        it('should return true for valid signature', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const payload = '{"test": "data"}';
            const timestamp = '1234567890';
            const crypto = require('crypto');
            const signature = 'v0=' + crypto
                .createHmac('sha256', 'test-secret')
                .update(`v0:${timestamp}:${payload}`)
                .digest('hex');
            const result = yield service.validateWebhookSignature(payload, timestamp, signature);
            expect(result).toBe(true);
        }));
        it('should return false for invalid signature', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const payload = '{"test": "data"}';
            const timestamp = '1234567890';
            const signature = 'v0=invalid_signature';
            const result = yield service.validateWebhookSignature(payload, timestamp, signature);
            expect(result).toBe(false);
        }));
        it('should return true when no signing secret is configured', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            configService.slackSigningSecret = '';
            const result = yield service.validateWebhookSignature('payload', '123', 'sig');
            expect(result).toBe(true);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,