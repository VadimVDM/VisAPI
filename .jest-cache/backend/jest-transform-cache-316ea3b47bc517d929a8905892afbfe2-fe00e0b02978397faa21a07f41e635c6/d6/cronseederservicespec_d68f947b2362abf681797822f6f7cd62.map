{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/cron/cron-seeder.service.spec.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/cron/cron-seeder.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { CronSeederService } from './cron-seeder.service';\nimport { SupabaseService } from '@visapi/core-supabase';\nimport { QueueService } from '../queue/queue.service';\nimport { getLoggerToken } from 'nestjs-pino';\nimport { QUEUE_NAMES, JOB_NAMES } from '@visapi/shared-types';\n\ndescribe('CronSeederService', () => {\n  let service: CronSeederService;\n  let supabaseService: jest.Mocked<SupabaseService>;\n  let queueService: jest.Mocked<QueueService>;\n\n  const mockLogger = {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n  };\n\n  const mockWorkflows = [\n    {\n      id: 'workflow-1',\n      name: 'Daily Status Update',\n      enabled: true,\n      schema: {\n        triggers: [\n          {\n            type: 'cron',\n            config: {\n              schedule: '0 9 * * *', // Daily at 9 AM\n              timezone: 'America/New_York',\n            },\n          },\n        ],\n        steps: [],\n      },\n    },\n    {\n      id: 'workflow-2',\n      name: 'Weekly Report',\n      enabled: true,\n      schema: {\n        triggers: [\n          {\n            type: 'cron',\n            config: {\n              schedule: '0 10 * * 1', // Weekly on Monday at 10 AM\n            },\n          },\n        ],\n        steps: [],\n      },\n    },\n    {\n      id: 'workflow-3',\n      name: 'Webhook Only',\n      enabled: true,\n      schema: {\n        triggers: [\n          {\n            type: 'webhook',\n            config: {\n              endpoint: '/webhook/test',\n            },\n          },\n        ],\n        steps: [],\n      },\n    },\n  ];\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        CronSeederService,\n        {\n          provide: getLoggerToken(CronSeederService.name),\n          useValue: mockLogger,\n        },\n        {\n          provide: SupabaseService,\n          useValue: {\n            client: {\n              from: jest.fn().mockReturnValue({\n                select: jest.fn().mockReturnValue({\n                  eq: jest.fn().mockReturnValue({\n                    data: null,\n                    error: null,\n                  }),\n                  single: jest.fn().mockReturnValue({\n                    data: null,\n                    error: null,\n                  }),\n                }),\n              }),\n            },\n          },\n        },\n        {\n          provide: QueueService,\n          useValue: {\n            addRepeatableJob: jest.fn(),\n            removeRepeatableJob: jest.fn(),\n            getRepeatableJobs: jest.fn(),\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<CronSeederService>(CronSeederService);\n    supabaseService = module.get(SupabaseService);\n    queueService = module.get(QueueService);\n\n    // Reset mocks\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('onModuleInit', () => {\n    it('should seed cron jobs on module initialization', async () => {\n      const mockFrom = {\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockResolvedValue({\n            data: mockWorkflows,\n            error: null,\n          }),\n        }),\n      };\n      \n      supabaseService.client.from = jest.fn().mockReturnValue(mockFrom);\n      queueService.getRepeatableJobs.mockResolvedValue([]);\n\n      await service.onModuleInit();\n\n      expect(mockLogger.info).toHaveBeenCalledWith('Starting cron job seeding');\n      expect(queueService.addRepeatableJob).toHaveBeenCalledTimes(3); // 2 workflow jobs + 1 log pruning job\n      expect(mockLogger.info).toHaveBeenCalledWith(\n        'Cron job seeding completed successfully',\n      );\n    });\n\n    it('should handle no workflows with cron triggers', async () => {\n      const mockFrom = {\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockResolvedValue({\n            data: [mockWorkflows[2]], // Only webhook workflow\n            error: null,\n          }),\n        }),\n      };\n      \n      supabaseService.client.from = jest.fn().mockReturnValue(mockFrom);\n\n      await service.onModuleInit();\n\n      expect(mockLogger.info).toHaveBeenCalledWith(\n        'No workflows with cron triggers found',\n      );\n      expect(queueService.addRepeatableJob).toHaveBeenCalledTimes(1); // Only log pruning job\n    });\n\n    it('should handle database errors', async () => {\n      const error = new Error('Database connection failed');\n      const mockFrom = {\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockResolvedValue({\n            data: null,\n            error: { message: error.message },\n          }),\n        }),\n      };\n      \n      supabaseService.client.from = jest.fn().mockReturnValue(mockFrom);\n\n      await expect(service.onModuleInit()).rejects.toThrow(\n        'Failed to fetch workflows: Database connection failed',\n      );\n    });\n  });\n\n  describe('seedCronJobs', () => {\n    it('should schedule workflows with cron triggers', async () => {\n      const mockFrom = {\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockResolvedValue({\n            data: mockWorkflows,\n            error: null,\n          }),\n        }),\n      };\n      \n      supabaseService.client.from = jest.fn().mockReturnValue(mockFrom);\n      queueService.getRepeatableJobs.mockResolvedValue([]);\n\n      await service.seedCronJobs();\n\n      expect(queueService.addRepeatableJob).toHaveBeenCalledWith(\n        QUEUE_NAMES.DEFAULT,\n        JOB_NAMES.PROCESS_WORKFLOW,\n        {\n          workflowId: 'workflow-1',\n          trigger: {\n            type: 'cron',\n            schedule: '0 9 * * *',\n          },\n          metadata: {\n            workflowName: 'Daily Status Update',\n            scheduledBy: 'cron-seeder',\n          },\n        },\n        {\n          pattern: '0 9 * * *',\n          tz: 'America/New_York',\n        },\n      );\n\n      expect(queueService.addRepeatableJob).toHaveBeenCalledWith(\n        QUEUE_NAMES.DEFAULT,\n        JOB_NAMES.PROCESS_WORKFLOW,\n        {\n          workflowId: 'workflow-2',\n          trigger: {\n            type: 'cron',\n            schedule: '0 10 * * 1',\n          },\n          metadata: {\n            workflowName: 'Weekly Report',\n            scheduledBy: 'cron-seeder',\n          },\n        },\n        {\n          pattern: '0 10 * * 1',\n          tz: 'UTC',\n        },\n      );\n\n      // Verify log pruning job is scheduled\n      expect(queueService.addRepeatableJob).toHaveBeenCalledWith(\n        QUEUE_NAMES.DEFAULT,\n        JOB_NAMES.PRUNE_LOGS,\n        {\n          olderThanDays: 90,\n        },\n        {\n          pattern: '0 2 * * *',\n          tz: 'UTC',\n        },\n      );\n    });\n\n    it('should clear existing cron jobs before seeding', async () => {\n      const existingJobs = [\n        { id: 'cron-workflow-1', key: 'key1' },\n        { id: 'cron-workflow-2', key: 'key2' },\n        { id: 'log-pruning', key: 'key3' },\n        { id: 'other-job', key: 'key4' },\n      ];\n\n      const mockFrom = {\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockResolvedValue({\n            data: mockWorkflows,\n            error: null,\n          }),\n        }),\n      };\n      \n      supabaseService.client.from = jest.fn().mockReturnValue(mockFrom);\n      queueService.getRepeatableJobs.mockResolvedValue(existingJobs);\n\n      await service.seedCronJobs();\n\n      expect(queueService.removeRepeatableJob).toHaveBeenCalledWith(\n        QUEUE_NAMES.DEFAULT,\n        'workflow-1',\n      );\n      expect(queueService.removeRepeatableJob).toHaveBeenCalledWith(\n        QUEUE_NAMES.DEFAULT,\n        'workflow-2',\n      );\n      expect(queueService.removeRepeatableJob).toHaveBeenCalledWith(\n        QUEUE_NAMES.DEFAULT,\n        'log-pruning',\n      );\n      expect(queueService.removeRepeatableJob).toHaveBeenCalledTimes(3);\n    });\n  });\n\n  describe('updateWorkflowCronJobs', () => {\n    it('should update cron jobs for an enabled workflow', async () => {\n      const updatedWorkflow = {\n        ...mockWorkflows[0],\n        schema: {\n          triggers: [\n            {\n              type: 'cron',\n              config: {\n                schedule: '0 15 * * *', // Updated schedule\n                timezone: 'UTC',\n              },\n            },\n          ],\n          steps: [],\n        },\n      };\n\n      const mockFrom = {\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: updatedWorkflow,\n              error: null,\n            }),\n          }),\n        }),\n      };\n      \n      supabaseService.client.from = jest.fn().mockReturnValue(mockFrom);\n\n      await service.updateWorkflowCronJobs('workflow-1');\n\n      expect(queueService.removeRepeatableJob).toHaveBeenCalledWith(\n        QUEUE_NAMES.DEFAULT,\n        'workflow-1',\n      );\n      expect(queueService.addRepeatableJob).toHaveBeenCalledWith(\n        QUEUE_NAMES.DEFAULT,\n        JOB_NAMES.PROCESS_WORKFLOW,\n        expect.objectContaining({\n          workflowId: 'workflow-1',\n        }),\n        {\n          pattern: '0 15 * * *',\n          tz: 'UTC',\n        },\n      );\n    });\n\n    it('should not reschedule disabled workflows', async () => {\n      const disabledWorkflow = {\n        ...mockWorkflows[0],\n        enabled: false,\n      };\n\n      const mockFrom = {\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: disabledWorkflow,\n              error: null,\n            }),\n          }),\n        }),\n      };\n      \n      supabaseService.client.from = jest.fn().mockReturnValue(mockFrom);\n\n      await service.updateWorkflowCronJobs('workflow-1');\n\n      expect(queueService.removeRepeatableJob).toHaveBeenCalled();\n      expect(queueService.addRepeatableJob).not.toHaveBeenCalled();\n    });\n\n    it('should handle workflow not found', async () => {\n      const mockFrom = {\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: null,\n              error: { message: 'Not found' },\n            }),\n          }),\n        }),\n      };\n      \n      supabaseService.client.from = jest.fn().mockReturnValue(mockFrom);\n\n      await service.updateWorkflowCronJobs('non-existent');\n\n      expect(mockLogger.warn).toHaveBeenCalledWith(\n        expect.objectContaining({\n          workflowId: 'non-existent',\n        }),\n        'Workflow not found for cron update',\n      );\n    });\n  });\n\n  describe('removeWorkflowCronJobs', () => {\n    it('should remove cron jobs for a workflow', async () => {\n      await service.removeWorkflowCronJobs('workflow-1');\n\n      expect(queueService.removeRepeatableJob).toHaveBeenCalledWith(\n        QUEUE_NAMES.DEFAULT,\n        'workflow-1',\n      );\n      expect(mockLogger.info).toHaveBeenCalledWith(\n        { workflowId: 'workflow-1' },\n        'Removed cron jobs for workflow',\n      );\n    });\n\n    it('should handle errors when removing cron jobs', async () => {\n      const error = new Error('Failed to remove');\n      queueService.removeRepeatableJob.mockRejectedValue(error);\n\n      await service.removeWorkflowCronJobs('workflow-1');\n\n      expect(mockLogger.error).toHaveBeenCalledWith(\n        { error, workflowId: 'workflow-1' },\n        'Failed to remove workflow cron jobs',\n      );\n    });\n  });\n\n  describe('getCronDriftMetrics', () => {\n    it('should calculate cron drift metrics', async () => {\n      const now = new Date();\n      const futureDate = new Date(now.getTime() + 300000); // 5 minutes from now\n\n      const repeatableJobs = [\n        {\n          id: 'cron-workflow-1',\n          pattern: '0 9 * * *',\n          next: futureDate.getTime(),\n        },\n        {\n          id: 'other-job',\n          pattern: '*/5 * * * *',\n          next: futureDate.getTime(),\n        },\n      ];\n\n      queueService.getRepeatableJobs.mockResolvedValue(repeatableJobs);\n\n      const metrics = await service.getCronDriftMetrics();\n\n      expect(metrics).toHaveLength(1);\n      expect(metrics[0]).toMatchObject({\n        workflowId: 'workflow-1',\n        schedule: '0 9 * * *',\n        nextRun: futureDate,\n      });\n      expect(metrics[0].drift).toBeGreaterThan(0);\n    });\n\n    it('should handle errors when getting drift metrics', async () => {\n      const error = new Error('Redis connection failed');\n      queueService.getRepeatableJobs.mockRejectedValue(error);\n\n      const metrics = await service.getCronDriftMetrics();\n\n      expect(metrics).toEqual([]);\n      expect(mockLogger.error).toHaveBeenCalledWith(\n        { error },\n        'Failed to get cron drift metrics',\n      );\n    });\n  });\n\n  describe('cron drift detection', () => {\n    it('should detect significant drift in cron execution', async () => {\n      const now = new Date();\n      const pastDate = new Date(now.getTime() - 600000); // 10 minutes ago (significant drift)\n\n      const repeatableJobs = [\n        {\n          id: 'cron-workflow-1',\n          pattern: '0 9 * * *',\n          next: pastDate.getTime(),\n        },\n      ];\n\n      queueService.getRepeatableJobs.mockResolvedValue(repeatableJobs);\n\n      const metrics = await service.getCronDriftMetrics();\n\n      expect(metrics[0].drift).toBeGreaterThanOrEqual(600000); // At least 10 minutes drift\n    });\n  });\n});"],"version":3}