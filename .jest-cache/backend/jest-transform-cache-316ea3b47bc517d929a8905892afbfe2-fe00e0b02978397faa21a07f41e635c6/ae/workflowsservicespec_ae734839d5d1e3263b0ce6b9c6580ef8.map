{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/workflows/workflows.service.spec.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/workflows/workflows.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { NotFoundException } from '@nestjs/common';\nimport { WorkflowsService } from './workflows.service';\nimport { SupabaseService } from '@visapi/core-supabase';\nimport { CreateWorkflowDto, UpdateWorkflowDto } from './dto';\n\ndescribe('WorkflowsService', () => {\n  let service: WorkflowsService;\n  let supabaseService: jest.Mocked<SupabaseService>;\n\n  const mockSupabaseClient = {\n    from: jest.fn(),\n  };\n\n  const mockWorkflowData = {\n    id: '123e4567-e89b-12d3-a456-426614174000',\n    name: 'Test Workflow',\n    description: 'A test workflow',\n    enabled: true,\n    schema: {\n      triggers: [\n        {\n          type: 'cron',\n          config: {\n            schedule: '0 9 * * *',\n          },\n        },\n      ],\n      steps: [\n        {\n          id: 'step-1',\n          type: 'whatsapp.send',\n          config: {\n            contact: '+1234567890',\n            template: 'test_template',\n          },\n          retries: 3,\n        },\n      ],\n      variables: { testVar: 'value' },\n    },\n    created_at: '2025-07-15T10:30:00Z',\n    updated_at: '2025-07-15T10:30:00Z',\n  };\n\n  beforeEach(async () => {\n    const mockSupabaseService = {\n      getClient: jest.fn().mockReturnValue(mockSupabaseClient),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        WorkflowsService,\n        {\n          provide: SupabaseService,\n          useValue: mockSupabaseService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<WorkflowsService>(WorkflowsService);\n    supabaseService = module.get(SupabaseService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('create', () => {\n    it('should create a new workflow', async () => {\n      const createDto: CreateWorkflowDto = {\n        name: 'Test Workflow',\n        description: 'A test workflow',\n        enabled: true,\n        variables: { testVar: 'value' },\n        schema: {\n          triggers: [\n            {\n              type: 'cron',\n              config: {\n                schedule: '0 9 * * *',\n              },\n            },\n          ],\n          steps: [\n            {\n              id: 'step-1',\n              type: 'whatsapp.send',\n              config: {\n                contact: '+1234567890',\n                template: 'test_template',\n              },\n              retries: 3,\n            },\n          ],\n        },\n      };\n\n      const mockQuery = {\n        insert: jest.fn().mockReturnThis(),\n        select: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: mockWorkflowData,\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      const result = await service.create(createDto);\n\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('workflows');\n      expect(mockQuery.insert).toHaveBeenCalledWith({\n        name: createDto.name,\n        description: createDto.description,\n        enabled: createDto.enabled,\n        schema: {\n          ...createDto.schema,\n          variables: createDto.variables,\n        },\n      });\n      expect(result).toEqual({\n        id: mockWorkflowData.id,\n        name: mockWorkflowData.name,\n        description: mockWorkflowData.description,\n        enabled: mockWorkflowData.enabled,\n        variables: mockWorkflowData.schema.variables,\n        schema: mockWorkflowData.schema,\n        created_at: mockWorkflowData.created_at,\n        updated_at: mockWorkflowData.updated_at,\n      });\n    });\n\n    it('should throw error when database operation fails', async () => {\n      const createDto: CreateWorkflowDto = {\n        name: 'Test Workflow',\n        enabled: true,\n        schema: {\n          triggers: [{ type: 'cron', config: { schedule: '0 9 * * *' } }],\n          steps: [\n            {\n              id: 'step-1',\n              type: 'whatsapp.send',\n              config: { contact: '+1234567890' },\n            },\n          ],\n        },\n      };\n\n      const mockQuery = {\n        insert: jest.fn().mockReturnThis(),\n        select: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'Database error' },\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      await expect(service.create(createDto)).rejects.toThrow('Failed to create workflow');\n    });\n  });\n\n  describe('findAll', () => {\n    it('should return all workflows', async () => {\n      const mockQuery = {\n        select: jest.fn().mockReturnThis(),\n        order: jest.fn().mockResolvedValue({\n          data: [mockWorkflowData],\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      const result = await service.findAll();\n\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('workflows');\n      expect(mockQuery.select).toHaveBeenCalledWith('*');\n      expect(mockQuery.order).toHaveBeenCalledWith('created_at', { ascending: false });\n      expect(result).toHaveLength(1);\n      expect(result[0].id).toBe(mockWorkflowData.id);\n    });\n\n    it('should throw error when database operation fails', async () => {\n      const mockQuery = {\n        select: jest.fn().mockReturnThis(),\n        order: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'Database error' },\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      await expect(service.findAll()).rejects.toThrow('Failed to fetch workflows');\n    });\n  });\n\n  describe('findOne', () => {\n    it('should return a workflow by ID', async () => {\n      const mockQuery = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: mockWorkflowData,\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      const result = await service.findOne(mockWorkflowData.id);\n\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('workflows');\n      expect(mockQuery.select).toHaveBeenCalledWith('*');\n      expect(mockQuery.eq).toHaveBeenCalledWith('id', mockWorkflowData.id);\n      expect(result.id).toBe(mockWorkflowData.id);\n    });\n\n    it('should throw NotFoundException when workflow not found', async () => {\n      const mockQuery = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'Not found' },\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      await expect(service.findOne('nonexistent-id')).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('update', () => {\n    it('should update a workflow', async () => {\n      const updateDto: UpdateWorkflowDto = {\n        name: 'Updated Workflow',\n        enabled: false,\n      };\n\n      const updatedWorkflowData = {\n        ...mockWorkflowData,\n        name: 'Updated Workflow',\n        enabled: false,\n      };\n\n      const mockQuery = {\n        update: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        select: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: updatedWorkflowData,\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      const result = await service.update(mockWorkflowData.id, updateDto);\n\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('workflows');\n      expect(mockQuery.update).toHaveBeenCalledWith({\n        name: updateDto.name,\n        enabled: updateDto.enabled,\n      });\n      expect(mockQuery.eq).toHaveBeenCalledWith('id', mockWorkflowData.id);\n      expect(result.name).toBe('Updated Workflow');\n      expect(result.enabled).toBe(false);\n    });\n\n    it('should throw NotFoundException when workflow not found', async () => {\n      const updateDto: UpdateWorkflowDto = {\n        name: 'Updated Workflow',\n      };\n\n      const mockQuery = {\n        update: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        select: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'Not found' },\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      await expect(service.update('nonexistent-id', updateDto)).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('remove', () => {\n    it('should delete a workflow', async () => {\n      const mockQuery = {\n        delete: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockResolvedValue({\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      await service.remove(mockWorkflowData.id);\n\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('workflows');\n      expect(mockQuery.delete).toHaveBeenCalled();\n      expect(mockQuery.eq).toHaveBeenCalledWith('id', mockWorkflowData.id);\n    });\n\n    it('should throw NotFoundException when workflow not found', async () => {\n      const mockQuery = {\n        delete: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockResolvedValue({\n          error: { message: 'Not found' },\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      await expect(service.remove('nonexistent-id')).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('findEnabled', () => {\n    it('should return only enabled workflows', async () => {\n      const mockQuery = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        order: jest.fn().mockResolvedValue({\n          data: [mockWorkflowData],\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      const result = await service.findEnabled();\n\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('workflows');\n      expect(mockQuery.select).toHaveBeenCalledWith('*');\n      expect(mockQuery.eq).toHaveBeenCalledWith('enabled', true);\n      expect(mockQuery.order).toHaveBeenCalledWith('created_at', { ascending: false });\n      expect(result).toHaveLength(1);\n      expect(result[0].enabled).toBe(true);\n    });\n\n    it('should throw error when database operation fails', async () => {\n      const mockQuery = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        order: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'Database error' },\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQuery);\n\n      await expect(service.findEnabled()).rejects.toThrow('Failed to fetch enabled workflows');\n    });\n  });\n});"],"version":3}