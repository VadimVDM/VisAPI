b7a067e4d411323acadaffeb0455dbba
"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiKeyGuard = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const auth_service_1 = require("../auth.service");
const scopes_decorator_1 = require("../decorators/scopes.decorator");
const metrics_service_1 = require("../../metrics/metrics.service");
let ApiKeyGuard = class ApiKeyGuard {
    constructor(authService, reflector, metricsService) {
        this.authService = authService;
        this.reflector = reflector;
        this.metricsService = metricsService;
    }
    canActivate(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const request = context.switchToHttp().getRequest();
            const apiKey = this.extractApiKey(request);
            if (!apiKey) {
                throw new common_1.UnauthorizedException('API key is required');
            }
            // Start timing API key validation
            const startTime = Date.now();
            let isValid = false;
            try {
                const validatedKey = yield this.authService.validateApiKey(apiKey);
                if (!validatedKey) {
                    throw new common_1.UnauthorizedException('Invalid or expired API key');
                }
                isValid = true;
                // Check scopes if specified
                const requiredScopes = this.reflector.getAllAndOverride(scopes_decorator_1.SCOPES_KEY, [
                    context.getHandler(),
                    context.getClass(),
                ]) || [];
                if (requiredScopes.length > 0) {
                    const hasScopes = yield this.authService.checkScopes(validatedKey, requiredScopes);
                    if (!hasScopes) {
                        throw new common_1.UnauthorizedException(`Insufficient permissions. Required scopes: ${requiredScopes.join(', ')}`);
                    }
                }
                // Attach the validated key to the request
                request.apiKey = validatedKey;
                return true;
            }
            finally {
                // Record the validation duration regardless of success or failure
                const duration = Date.now() - startTime;
                this.metricsService.recordApiKeyValidation(duration, isValid);
            }
        });
    }
    extractApiKey(request) {
        // Check X-API-Key header
        const apiKey = request.headers['x-api-key'];
        if (apiKey) {
            return apiKey;
        }
        // Check Authorization Bearer token
        const authHeader = request.headers.authorization;
        if (authHeader === null || authHeader === void 0 ? void 0 : authHeader.startsWith('Bearer ')) {
            return authHeader.substring(7);
        }
        return null;
    }
};
exports.ApiKeyGuard = ApiKeyGuard;
exports.ApiKeyGuard = ApiKeyGuard = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _a : Object, typeof (_b = typeof core_1.Reflector !== "undefined" && core_1.Reflector) === "function" ? _b : Object, typeof (_c = typeof metrics_service_1.MetricsService !== "undefined" && metrics_service_1.MetricsService) === "function" ? _c : Object])
], ApiKeyGuard);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZhZGltL1Byb2plY3RzL1Zpc0FQSS9hcHBzL2JhY2tlbmQvc3JjL2F1dGgvZ3VhcmRzL2FwaS1rZXkuZ3VhcmQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FLd0I7QUFDeEIsdUNBQXlDO0FBQ3pDLGtEQUE4QztBQUM5QyxxRUFBNEQ7QUFDNUQsbUVBQStEO0FBR3hELElBQU0sV0FBVyxHQUFqQixNQUFNLFdBQVc7SUFDdEIsWUFDbUIsV0FBd0IsRUFDeEIsU0FBb0IsRUFDcEIsY0FBOEI7UUFGOUIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFDOUMsQ0FBQztJQUVFLFdBQVcsQ0FBQyxPQUF5Qjs7WUFDekMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3BELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFM0MsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNaLE1BQU0sSUFBSSw4QkFBcUIsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ3pELENBQUM7WUFFRCxrQ0FBa0M7WUFDbEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQzdCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztZQUVwQixJQUFJLENBQUM7Z0JBQ0gsTUFBTSxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDbkUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO29CQUNsQixNQUFNLElBQUksOEJBQXFCLENBQUMsNEJBQTRCLENBQUMsQ0FBQztnQkFDaEUsQ0FBQztnQkFDRCxPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUVmLDRCQUE0QjtnQkFDNUIsTUFBTSxjQUFjLEdBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQVcsNkJBQVUsRUFBRTtvQkFDckQsT0FBTyxDQUFDLFVBQVUsRUFBRTtvQkFDcEIsT0FBTyxDQUFDLFFBQVEsRUFBRTtpQkFDbkIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFFWCxJQUFJLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7b0JBQzlCLE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQ2xELFlBQVksRUFDWixjQUFjLENBQ2YsQ0FBQztvQkFFRixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7d0JBQ2YsTUFBTSxJQUFJLDhCQUFxQixDQUM3Qiw4Q0FBOEMsY0FBYyxDQUFDLElBQUksQ0FDL0QsSUFBSSxDQUNMLEVBQUUsQ0FDSixDQUFDO29CQUNKLENBQUM7Z0JBQ0gsQ0FBQztnQkFFRCwwQ0FBMEM7Z0JBQzFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDO2dCQUU5QixPQUFPLElBQUksQ0FBQztZQUNkLENBQUM7b0JBQVMsQ0FBQztnQkFDVCxrRUFBa0U7Z0JBQ2xFLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxTQUFTLENBQUM7Z0JBQ3hDLElBQUksQ0FBQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2hFLENBQUM7UUFDSCxDQUFDO0tBQUE7SUFFTyxhQUFhLENBQUMsT0FBWTtRQUNoQyx5QkFBeUI7UUFDekIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM1QyxJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQ1gsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQztRQUVELG1DQUFtQztRQUNuQyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUNqRCxJQUFJLFVBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUN0QyxPQUFPLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUE7QUExRVksa0NBQVc7c0JBQVgsV0FBVztJQUR2QixJQUFBLG1CQUFVLEdBQUU7aUVBR3FCLDBCQUFXLG9CQUFYLDBCQUFXLG9EQUNiLGdCQUFTLG9CQUFULGdCQUFTLG9EQUNKLGdDQUFjLG9CQUFkLGdDQUFjO0dBSnRDLFdBQVcsQ0EwRXZCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy92YWRpbS9Qcm9qZWN0cy9WaXNBUEkvYXBwcy9iYWNrZW5kL3NyYy9hdXRoL2d1YXJkcy9hcGkta2V5Lmd1YXJkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEluamVjdGFibGUsXG4gIENhbkFjdGl2YXRlLFxuICBFeGVjdXRpb25Db250ZXh0LFxuICBVbmF1dGhvcml6ZWRFeGNlcHRpb24sXG59IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7IFJlZmxlY3RvciB9IGZyb20gJ0BuZXN0anMvY29yZSc7XG5pbXBvcnQgeyBBdXRoU2VydmljZSB9IGZyb20gJy4uL2F1dGguc2VydmljZSc7XG5pbXBvcnQgeyBTQ09QRVNfS0VZIH0gZnJvbSAnLi4vZGVjb3JhdG9ycy9zY29wZXMuZGVjb3JhdG9yJztcbmltcG9ydCB7IE1ldHJpY3NTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vbWV0cmljcy9tZXRyaWNzLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXBpS2V5R3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVmbGVjdG9yOiBSZWZsZWN0b3IsXG4gICAgcHJpdmF0ZSByZWFkb25seSBtZXRyaWNzU2VydmljZTogTWV0cmljc1NlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIGNhbkFjdGl2YXRlKGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gY29udGV4dC5zd2l0Y2hUb0h0dHAoKS5nZXRSZXF1ZXN0KCk7XG4gICAgY29uc3QgYXBpS2V5ID0gdGhpcy5leHRyYWN0QXBpS2V5KHJlcXVlc3QpO1xuXG4gICAgaWYgKCFhcGlLZXkpIHtcbiAgICAgIHRocm93IG5ldyBVbmF1dGhvcml6ZWRFeGNlcHRpb24oJ0FQSSBrZXkgaXMgcmVxdWlyZWQnKTtcbiAgICB9XG5cbiAgICAvLyBTdGFydCB0aW1pbmcgQVBJIGtleSB2YWxpZGF0aW9uXG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBsZXQgaXNWYWxpZCA9IGZhbHNlO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHZhbGlkYXRlZEtleSA9IGF3YWl0IHRoaXMuYXV0aFNlcnZpY2UudmFsaWRhdGVBcGlLZXkoYXBpS2V5KTtcbiAgICAgIGlmICghdmFsaWRhdGVkS2V5KSB7XG4gICAgICAgIHRocm93IG5ldyBVbmF1dGhvcml6ZWRFeGNlcHRpb24oJ0ludmFsaWQgb3IgZXhwaXJlZCBBUEkga2V5Jyk7XG4gICAgICB9XG4gICAgICBpc1ZhbGlkID0gdHJ1ZTtcblxuICAgICAgLy8gQ2hlY2sgc2NvcGVzIGlmIHNwZWNpZmllZFxuICAgICAgY29uc3QgcmVxdWlyZWRTY29wZXMgPVxuICAgICAgICB0aGlzLnJlZmxlY3Rvci5nZXRBbGxBbmRPdmVycmlkZTxzdHJpbmdbXT4oU0NPUEVTX0tFWSwgW1xuICAgICAgICAgIGNvbnRleHQuZ2V0SGFuZGxlcigpLFxuICAgICAgICAgIGNvbnRleHQuZ2V0Q2xhc3MoKSxcbiAgICAgICAgXSkgfHwgW107XG5cbiAgICAgIGlmIChyZXF1aXJlZFNjb3Blcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGhhc1Njb3BlcyA9IGF3YWl0IHRoaXMuYXV0aFNlcnZpY2UuY2hlY2tTY29wZXMoXG4gICAgICAgICAgdmFsaWRhdGVkS2V5LFxuICAgICAgICAgIHJlcXVpcmVkU2NvcGVzXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKCFoYXNTY29wZXMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVW5hdXRob3JpemVkRXhjZXB0aW9uKFxuICAgICAgICAgICAgYEluc3VmZmljaWVudCBwZXJtaXNzaW9ucy4gUmVxdWlyZWQgc2NvcGVzOiAke3JlcXVpcmVkU2NvcGVzLmpvaW4oXG4gICAgICAgICAgICAgICcsICdcbiAgICAgICAgICAgICl9YFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQXR0YWNoIHRoZSB2YWxpZGF0ZWQga2V5IHRvIHRoZSByZXF1ZXN0XG4gICAgICByZXF1ZXN0LmFwaUtleSA9IHZhbGlkYXRlZEtleTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIFJlY29yZCB0aGUgdmFsaWRhdGlvbiBkdXJhdGlvbiByZWdhcmRsZXNzIG9mIHN1Y2Nlc3Mgb3IgZmFpbHVyZVxuICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgICAgdGhpcy5tZXRyaWNzU2VydmljZS5yZWNvcmRBcGlLZXlWYWxpZGF0aW9uKGR1cmF0aW9uLCBpc1ZhbGlkKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RBcGlLZXkocmVxdWVzdDogYW55KTogc3RyaW5nIHwgbnVsbCB7XG4gICAgLy8gQ2hlY2sgWC1BUEktS2V5IGhlYWRlclxuICAgIGNvbnN0IGFwaUtleSA9IHJlcXVlc3QuaGVhZGVyc1sneC1hcGkta2V5J107XG4gICAgaWYgKGFwaUtleSkge1xuICAgICAgcmV0dXJuIGFwaUtleTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBBdXRob3JpemF0aW9uIEJlYXJlciB0b2tlblxuICAgIGNvbnN0IGF1dGhIZWFkZXIgPSByZXF1ZXN0LmhlYWRlcnMuYXV0aG9yaXphdGlvbjtcbiAgICBpZiAoYXV0aEhlYWRlcj8uc3RhcnRzV2l0aCgnQmVhcmVyICcpKSB7XG4gICAgICByZXR1cm4gYXV0aEhlYWRlci5zdWJzdHJpbmcoNyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==