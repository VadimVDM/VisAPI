{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/auth/guards/api-key.guard.ts","mappings":";;;;;AAAA,2CAKwB;AACxB,uCAAyC;AACzC,kDAA8C;AAC9C,qEAA4D;AAC5D,mEAA+D;AAGxD,IAAM,WAAW,GAAjB,MAAM,WAAW;IACtB,YACmB,WAAwB,EACxB,SAAoB,EACpB,cAA8B;QAF9B,gBAAW,GAAX,WAAW,CAAa;QACxB,cAAS,GAAT,SAAS,CAAW;QACpB,mBAAc,GAAd,cAAc,CAAgB;IAC9C,CAAC;IAEE,WAAW,CAAC,OAAyB;;YACzC,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC;YACpD,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAE3C,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,8BAAqB,CAAC,qBAAqB,CAAC,CAAC;YACzD,CAAC;YAED,kCAAkC;YAClC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC7B,IAAI,OAAO,GAAG,KAAK,CAAC;YAEpB,IAAI,CAAC;gBACH,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;gBACnE,IAAI,CAAC,YAAY,EAAE,CAAC;oBAClB,MAAM,IAAI,8BAAqB,CAAC,4BAA4B,CAAC,CAAC;gBAChE,CAAC;gBACD,OAAO,GAAG,IAAI,CAAC;gBAEf,4BAA4B;gBAC5B,MAAM,cAAc,GAClB,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAW,6BAAU,EAAE;oBACrD,OAAO,CAAC,UAAU,EAAE;oBACpB,OAAO,CAAC,QAAQ,EAAE;iBACnB,CAAC,IAAI,EAAE,CAAC;gBAEX,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAC9B,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAClD,YAAY,EACZ,cAAc,CACf,CAAC;oBAEF,IAAI,CAAC,SAAS,EAAE,CAAC;wBACf,MAAM,IAAI,8BAAqB,CAC7B,8CAA8C,cAAc,CAAC,IAAI,CAC/D,IAAI,CACL,EAAE,CACJ,CAAC;oBACJ,CAAC;gBACH,CAAC;gBAED,0CAA0C;gBAC1C,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC;gBAE9B,OAAO,IAAI,CAAC;YACd,CAAC;oBAAS,CAAC;gBACT,kEAAkE;gBAClE,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;gBACxC,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAChE,CAAC;QACH,CAAC;KAAA;IAEO,aAAa,CAAC,OAAY;QAChC,yBAAyB;QACzB,MAAM,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC5C,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,mCAAmC;QACnC,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC;QACjD,IAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACtC,OAAO,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AA1EY,kCAAW;sBAAX,WAAW;IADvB,IAAA,mBAAU,GAAE;iEAGqB,0BAAW,oBAAX,0BAAW,oDACb,gBAAS,oBAAT,gBAAS,oDACJ,gCAAc,oBAAd,gCAAc;GAJtC,WAAW,CA0EvB","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/auth/guards/api-key.guard.ts"],"sourcesContent":["import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthService } from '../auth.service';\nimport { SCOPES_KEY } from '../decorators/scopes.decorator';\nimport { MetricsService } from '../../metrics/metrics.service';\n\n@Injectable()\nexport class ApiKeyGuard implements CanActivate {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly reflector: Reflector,\n    private readonly metricsService: MetricsService\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest();\n    const apiKey = this.extractApiKey(request);\n\n    if (!apiKey) {\n      throw new UnauthorizedException('API key is required');\n    }\n\n    // Start timing API key validation\n    const startTime = Date.now();\n    let isValid = false;\n\n    try {\n      const validatedKey = await this.authService.validateApiKey(apiKey);\n      if (!validatedKey) {\n        throw new UnauthorizedException('Invalid or expired API key');\n      }\n      isValid = true;\n\n      // Check scopes if specified\n      const requiredScopes =\n        this.reflector.getAllAndOverride<string[]>(SCOPES_KEY, [\n          context.getHandler(),\n          context.getClass(),\n        ]) || [];\n\n      if (requiredScopes.length > 0) {\n        const hasScopes = await this.authService.checkScopes(\n          validatedKey,\n          requiredScopes\n        );\n\n        if (!hasScopes) {\n          throw new UnauthorizedException(\n            `Insufficient permissions. Required scopes: ${requiredScopes.join(\n              ', '\n            )}`\n          );\n        }\n      }\n\n      // Attach the validated key to the request\n      request.apiKey = validatedKey;\n\n      return true;\n    } finally {\n      // Record the validation duration regardless of success or failure\n      const duration = Date.now() - startTime;\n      this.metricsService.recordApiKeyValidation(duration, isValid);\n    }\n  }\n\n  private extractApiKey(request: any): string | null {\n    // Check X-API-Key header\n    const apiKey = request.headers['x-api-key'];\n    if (apiKey) {\n      return apiKey;\n    }\n\n    // Check Authorization Bearer token\n    const authHeader = request.headers.authorization;\n    if (authHeader?.startsWith('Bearer ')) {\n      return authHeader.substring(7);\n    }\n\n    return null;\n  }\n}\n"],"version":3}