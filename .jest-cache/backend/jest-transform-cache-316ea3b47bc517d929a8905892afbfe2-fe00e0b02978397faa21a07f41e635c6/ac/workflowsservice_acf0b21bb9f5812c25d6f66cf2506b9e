a4e0b7473cb3e22fb2f678bc3c446054
"use strict";
var WorkflowsService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowsService = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const core_supabase_1 = require("@visapi/core-supabase");
let WorkflowsService = WorkflowsService_1 = class WorkflowsService {
    constructor(supabase) {
        this.supabase = supabase;
        this.logger = new common_1.Logger(WorkflowsService_1.name);
    }
    create(createWorkflowDto) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { name, description, enabled, variables, schema } = createWorkflowDto;
            // Combine the base fields with the schema for storage
            const workflowData = {
                name,
                description,
                enabled,
                schema: Object.assign(Object.assign({}, schema), { variables }),
            };
            const { data, error } = yield this.supabase
                .client
                .from('workflows')
                .insert(workflowData)
                .select()
                .single();
            if (error) {
                this.logger.error('Failed to create workflow:', error);
                throw new Error('Failed to create workflow');
            }
            this.logger.log(`Created workflow: ${data.id}`);
            return this.mapToResponseDto(data);
        });
    }
    findAll() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { data, error } = yield this.supabase
                .client
                .from('workflows')
                .select('*')
                .order('created_at', { ascending: false });
            if (error) {
                this.logger.error('Failed to fetch workflows:', error);
                throw new Error('Failed to fetch workflows');
            }
            return data.map(workflow => this.mapToResponseDto(workflow));
        });
    }
    findOne(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { data, error } = yield this.supabase
                .client
                .from('workflows')
                .select('*')
                .eq('id', id)
                .single();
            if (error || !data) {
                this.logger.warn(`Workflow not found: ${id}`);
                throw new common_1.NotFoundException(`Workflow with id ${id} not found`);
            }
            return this.mapToResponseDto(data);
        });
    }
    update(id, updateWorkflowDto) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { name, description, enabled, variables, schema } = updateWorkflowDto;
            // Build update data, only including fields that are provided
            const updateData = {};
            if (name !== undefined)
                updateData.name = name;
            if (description !== undefined)
                updateData.description = description;
            if (enabled !== undefined)
                updateData.enabled = enabled;
            if (schema !== undefined) {
                updateData.schema = Object.assign(Object.assign({}, schema), { variables });
            }
            const { data, error } = yield this.supabase
                .client
                .from('workflows')
                .update(updateData)
                .eq('id', id)
                .select()
                .single();
            if (error || !data) {
                this.logger.error(`Failed to update workflow ${id}:`, error);
                throw new common_1.NotFoundException(`Workflow with id ${id} not found`);
            }
            this.logger.log(`Updated workflow: ${id}`);
            return this.mapToResponseDto(data);
        });
    }
    remove(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { error } = yield this.supabase
                .client
                .from('workflows')
                .delete()
                .eq('id', id);
            if (error) {
                this.logger.error(`Failed to delete workflow ${id}:`, error);
                throw new common_1.NotFoundException(`Workflow with id ${id} not found`);
            }
            this.logger.log(`Deleted workflow: ${id}`);
        });
    }
    findEnabled() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { data, error } = yield this.supabase
                .client
                .from('workflows')
                .select('*')
                .eq('enabled', true)
                .order('created_at', { ascending: false });
            if (error) {
                this.logger.error('Failed to fetch enabled workflows:', error);
                throw new Error('Failed to fetch enabled workflows');
            }
            return data.map(workflow => this.mapToResponseDto(workflow));
        });
    }
    mapToResponseDto(workflow) {
        var _a;
        return {
            id: workflow.id,
            name: workflow.name,
            description: workflow.description,
            enabled: workflow.enabled,
            variables: (_a = workflow.schema) === null || _a === void 0 ? void 0 : _a.variables,
            schema: workflow.schema,
            created_at: workflow.created_at,
            updated_at: workflow.updated_at,
        };
    }
};
exports.WorkflowsService = WorkflowsService;
exports.WorkflowsService = WorkflowsService = WorkflowsService_1 = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof core_supabase_1.SupabaseService !== "undefined" && core_supabase_1.SupabaseService) === "function" ? _a : Object])
], WorkflowsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,