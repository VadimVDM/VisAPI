0e6adc5cc3ca0a9b6358c7b4218ccdf1
"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiKeyGuard = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const auth_service_1 = require("../auth.service");
const scopes_decorator_1 = require("../decorators/scopes.decorator");
const metrics_service_1 = require("../../metrics/metrics.service");
let ApiKeyGuard = class ApiKeyGuard {
    constructor(authService, reflector, metricsService) {
        this.authService = authService;
        this.reflector = reflector;
        this.metricsService = metricsService;
    }
    canActivate(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const request = context.switchToHttp().getRequest();
            const apiKey = this.extractApiKey(request);
            if (!apiKey) {
                throw new common_1.UnauthorizedException('API key is required');
            }
            // Start timing API key validation
            const startTime = Date.now();
            let isValid = false;
            try {
                const validatedKey = yield this.authService.validateApiKey(apiKey);
                if (!validatedKey) {
                    throw new common_1.UnauthorizedException('Invalid or expired API key');
                }
                isValid = true;
                // Check scopes if specified
                const requiredScopes = this.reflector.getAllAndOverride(scopes_decorator_1.SCOPES_KEY, [
                    context.getHandler(),
                    context.getClass(),
                ]) || [];
                if (requiredScopes.length > 0) {
                    const hasScopes = yield this.authService.checkScopes(validatedKey, requiredScopes);
                    if (!hasScopes) {
                        throw new common_1.UnauthorizedException(`Insufficient permissions. Required scopes: ${requiredScopes.join(', ')}`);
                    }
                }
                // Attach the validated key to the request
                request.apiKey = validatedKey;
                return true;
            }
            finally {
                // Record the validation duration regardless of success or failure
                const duration = Date.now() - startTime;
                if (this.metricsService) {
                    this.metricsService.recordApiKeyValidation(duration, isValid);
                }
            }
        });
    }
    extractApiKey(request) {
        // Check X-API-Key header
        const apiKey = request.headers['x-api-key'];
        if (apiKey) {
            return apiKey;
        }
        // Check Authorization Bearer token
        const authHeader = request.headers.authorization;
        if (authHeader === null || authHeader === void 0 ? void 0 : authHeader.startsWith('Bearer ')) {
            return authHeader.substring(7);
        }
        return null;
    }
};
exports.ApiKeyGuard = ApiKeyGuard;
exports.ApiKeyGuard = ApiKeyGuard = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__param(2, (0, common_1.Optional)()),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _a : Object, typeof (_b = typeof core_1.Reflector !== "undefined" && core_1.Reflector) === "function" ? _b : Object, typeof (_c = typeof metrics_service_1.MetricsService !== "undefined" && metrics_service_1.MetricsService) === "function" ? _c : Object])
], ApiKeyGuard);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZhZGltL1Byb2plY3RzL1Zpc0FQSS9hcHBzL2JhY2tlbmQvc3JjL2F1dGgvZ3VhcmRzL2FwaS1rZXkuZ3VhcmQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FNd0I7QUFDeEIsdUNBQXlDO0FBQ3pDLGtEQUE4QztBQUM5QyxxRUFBNEQ7QUFDNUQsbUVBQStEO0FBR3hELElBQU0sV0FBVyxHQUFqQixNQUFNLFdBQVc7SUFDdEIsWUFDbUIsV0FBd0IsRUFDeEIsU0FBb0IsRUFDUixjQUErQjtRQUYzQyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ1IsbUJBQWMsR0FBZCxjQUFjLENBQWlCO0lBQzNELENBQUM7SUFFRSxXQUFXLENBQUMsT0FBeUI7O1lBQ3pDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNwRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRTNDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDWixNQUFNLElBQUksOEJBQXFCLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUN6RCxDQUFDO1lBRUQsa0NBQWtDO1lBQ2xDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUM3QixJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFFcEIsSUFBSSxDQUFDO2dCQUNILE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ25FLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztvQkFDbEIsTUFBTSxJQUFJLDhCQUFxQixDQUFDLDRCQUE0QixDQUFDLENBQUM7Z0JBQ2hFLENBQUM7Z0JBQ0QsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFFZiw0QkFBNEI7Z0JBQzVCLE1BQU0sY0FBYyxHQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFXLDZCQUFVLEVBQUU7b0JBQ3JELE9BQU8sQ0FBQyxVQUFVLEVBQUU7b0JBQ3BCLE9BQU8sQ0FBQyxRQUFRLEVBQUU7aUJBQ25CLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBRVgsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO29CQUM5QixNQUFNLFNBQVMsR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUNsRCxZQUFZLEVBQ1osY0FBYyxDQUNmLENBQUM7b0JBRUYsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO3dCQUNmLE1BQU0sSUFBSSw4QkFBcUIsQ0FDN0IsOENBQThDLGNBQWMsQ0FBQyxJQUFJLENBQy9ELElBQUksQ0FDTCxFQUFFLENBQ0osQ0FBQztvQkFDSixDQUFDO2dCQUNILENBQUM7Z0JBRUQsMENBQTBDO2dCQUMxQyxPQUFPLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQztnQkFFOUIsT0FBTyxJQUFJLENBQUM7WUFDZCxDQUFDO29CQUFTLENBQUM7Z0JBQ1Qsa0VBQWtFO2dCQUNsRSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsU0FBUyxDQUFDO2dCQUN4QyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDeEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ2hFLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQztLQUFBO0lBRU8sYUFBYSxDQUFDLE9BQVk7UUFDaEMseUJBQXlCO1FBQ3pCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDNUMsSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUNYLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUM7UUFFRCxtQ0FBbUM7UUFDbkMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDakQsSUFBSSxVQUFVLGFBQVYsVUFBVSx1QkFBVixVQUFVLENBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7WUFDdEMsT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFBO0FBNUVZLGtDQUFXO3NCQUFYLFdBQVc7SUFEdkIsSUFBQSxtQkFBVSxHQUFFO0lBS1IsbUJBQUEsSUFBQSxpQkFBUSxHQUFFLENBQUE7aUVBRm1CLDBCQUFXLG9CQUFYLDBCQUFXLG9EQUNiLGdCQUFTLG9CQUFULGdCQUFTLG9EQUNTLGdDQUFjLG9CQUFkLGdDQUFjO0dBSm5ELFdBQVcsQ0E0RXZCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy92YWRpbS9Qcm9qZWN0cy9WaXNBUEkvYXBwcy9iYWNrZW5kL3NyYy9hdXRoL2d1YXJkcy9hcGkta2V5Lmd1YXJkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEluamVjdGFibGUsXG4gIENhbkFjdGl2YXRlLFxuICBFeGVjdXRpb25Db250ZXh0LFxuICBVbmF1dGhvcml6ZWRFeGNlcHRpb24sXG4gIE9wdGlvbmFsLFxufSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5pbXBvcnQgeyBSZWZsZWN0b3IgfSBmcm9tICdAbmVzdGpzL2NvcmUnO1xuaW1wb3J0IHsgQXV0aFNlcnZpY2UgfSBmcm9tICcuLi9hdXRoLnNlcnZpY2UnO1xuaW1wb3J0IHsgU0NPUEVTX0tFWSB9IGZyb20gJy4uL2RlY29yYXRvcnMvc2NvcGVzLmRlY29yYXRvcic7XG5pbXBvcnQgeyBNZXRyaWNzU2VydmljZSB9IGZyb20gJy4uLy4uL21ldHJpY3MvbWV0cmljcy5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFwaUtleUd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGF1dGhTZXJ2aWNlOiBBdXRoU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlZmxlY3RvcjogUmVmbGVjdG9yLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgcmVhZG9ubHkgbWV0cmljc1NlcnZpY2U/OiBNZXRyaWNzU2VydmljZVxuICApIHt9XG5cbiAgYXN5bmMgY2FuQWN0aXZhdGUoY29udGV4dDogRXhlY3V0aW9uQ29udGV4dCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBjb250ZXh0LnN3aXRjaFRvSHR0cCgpLmdldFJlcXVlc3QoKTtcbiAgICBjb25zdCBhcGlLZXkgPSB0aGlzLmV4dHJhY3RBcGlLZXkocmVxdWVzdCk7XG5cbiAgICBpZiAoIWFwaUtleSkge1xuICAgICAgdGhyb3cgbmV3IFVuYXV0aG9yaXplZEV4Y2VwdGlvbignQVBJIGtleSBpcyByZXF1aXJlZCcpO1xuICAgIH1cblxuICAgIC8vIFN0YXJ0IHRpbWluZyBBUEkga2V5IHZhbGlkYXRpb25cbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgdmFsaWRhdGVkS2V5ID0gYXdhaXQgdGhpcy5hdXRoU2VydmljZS52YWxpZGF0ZUFwaUtleShhcGlLZXkpO1xuICAgICAgaWYgKCF2YWxpZGF0ZWRLZXkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVuYXV0aG9yaXplZEV4Y2VwdGlvbignSW52YWxpZCBvciBleHBpcmVkIEFQSSBrZXknKTtcbiAgICAgIH1cbiAgICAgIGlzVmFsaWQgPSB0cnVlO1xuXG4gICAgICAvLyBDaGVjayBzY29wZXMgaWYgc3BlY2lmaWVkXG4gICAgICBjb25zdCByZXF1aXJlZFNjb3BlcyA9XG4gICAgICAgIHRoaXMucmVmbGVjdG9yLmdldEFsbEFuZE92ZXJyaWRlPHN0cmluZ1tdPihTQ09QRVNfS0VZLCBbXG4gICAgICAgICAgY29udGV4dC5nZXRIYW5kbGVyKCksXG4gICAgICAgICAgY29udGV4dC5nZXRDbGFzcygpLFxuICAgICAgICBdKSB8fCBbXTtcblxuICAgICAgaWYgKHJlcXVpcmVkU2NvcGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgaGFzU2NvcGVzID0gYXdhaXQgdGhpcy5hdXRoU2VydmljZS5jaGVja1Njb3BlcyhcbiAgICAgICAgICB2YWxpZGF0ZWRLZXksXG4gICAgICAgICAgcmVxdWlyZWRTY29wZXNcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoIWhhc1Njb3Blcykge1xuICAgICAgICAgIHRocm93IG5ldyBVbmF1dGhvcml6ZWRFeGNlcHRpb24oXG4gICAgICAgICAgICBgSW5zdWZmaWNpZW50IHBlcm1pc3Npb25zLiBSZXF1aXJlZCBzY29wZXM6ICR7cmVxdWlyZWRTY29wZXMuam9pbihcbiAgICAgICAgICAgICAgJywgJ1xuICAgICAgICAgICAgKX1gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBBdHRhY2ggdGhlIHZhbGlkYXRlZCBrZXkgdG8gdGhlIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QuYXBpS2V5ID0gdmFsaWRhdGVkS2V5O1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gUmVjb3JkIHRoZSB2YWxpZGF0aW9uIGR1cmF0aW9uIHJlZ2FyZGxlc3Mgb2Ygc3VjY2VzcyBvciBmYWlsdXJlXG4gICAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gICAgICBpZiAodGhpcy5tZXRyaWNzU2VydmljZSkge1xuICAgICAgICB0aGlzLm1ldHJpY3NTZXJ2aWNlLnJlY29yZEFwaUtleVZhbGlkYXRpb24oZHVyYXRpb24sIGlzVmFsaWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdEFwaUtleShyZXF1ZXN0OiBhbnkpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAvLyBDaGVjayBYLUFQSS1LZXkgaGVhZGVyXG4gICAgY29uc3QgYXBpS2V5ID0gcmVxdWVzdC5oZWFkZXJzWyd4LWFwaS1rZXknXTtcbiAgICBpZiAoYXBpS2V5KSB7XG4gICAgICByZXR1cm4gYXBpS2V5O1xuICAgIH1cblxuICAgIC8vIENoZWNrIEF1dGhvcml6YXRpb24gQmVhcmVyIHRva2VuXG4gICAgY29uc3QgYXV0aEhlYWRlciA9IHJlcXVlc3QuaGVhZGVycy5hdXRob3JpemF0aW9uO1xuICAgIGlmIChhdXRoSGVhZGVyPy5zdGFydHNXaXRoKCdCZWFyZXIgJykpIHtcbiAgICAgIHJldHVybiBhdXRoSGVhZGVyLnN1YnN0cmluZyg3KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9