{"file":"/Users/vadim/Projects/VisAPI/libs/backend/util-redis/src/lib/redis.service.ts","mappings":";;;;;;AAAA,2CAAoD;AACpD,qCAAgC;AAChC,qDAAoD;AAG7C,IAAM,YAAY,oBAAlB,MAAM,YAAY;IAIvB,YAA6B,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;QAFjC,WAAM,GAAG,IAAI,eAAM,CAAC,cAAY,CAAC,IAAI,CAAC,CAAC;QAGtD,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QAEtC,IAAI,CAAC,QAAQ,IAAI,QAAQ,KAAK,GAAG,EAAE,CAAC;YAClC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mDAAmD,CAAC,CAAC;YACvE,uDAAuD;YACvD,IAAI,CAAC,KAAK,GAAG,IAAI,eAAK,CAAC;gBACrB,IAAI,EAAE,WAAW;gBACjB,IAAI,EAAE,IAAI;gBACV,oBAAoB,EAAE,CAAC;gBACvB,WAAW,EAAE,IAAI;gBACjB,kBAAkB,EAAE,KAAK;gBACzB,aAAa,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,cAAc;aAC1C,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,KAAK,GAAG,IAAI,eAAK,CAAC,QAAQ,EAAE;gBAC/B,oBAAoB,EAAE,CAAC;gBACvB,WAAW,EAAE,IAAI;aAClB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEK,eAAe;;YACnB,IAAI,CAAC;gBACH,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBACzB,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;gBACxB,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;gBACxC,OAAO,YAAY,GAAG,IAAI,CAAC,CAAC,gCAAgC;YAC9D,CAAC;YAAC,WAAM,CAAC;gBACP,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;KAAA;IAEK,UAAU;;YACd,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;QAChC,CAAC;KAAA;CACF,CAAA;AA5CY,oCAAY;uBAAZ,YAAY;IADxB,IAAA,mBAAU,GAAE;iEAK0B,2BAAa,oBAAb,2BAAa;GAJvC,YAAY,CA4CxB","names":[],"sources":["/Users/vadim/Projects/VisAPI/libs/backend/util-redis/src/lib/redis.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { Redis } from 'ioredis';\nimport { ConfigService } from '@visapi/core-config';\n\n@Injectable()\nexport class RedisService {\n  private redis: Redis;\n  private readonly logger = new Logger(RedisService.name);\n\n  constructor(private readonly config: ConfigService) {\n    const redisUrl = this.config.redisUrl;\n    \n    if (!redisUrl || redisUrl === 'h') {\n      this.logger.error('Invalid or missing REDIS_URL environment variable');\n      // Use a dummy Redis instance that will fail gracefully\n      this.redis = new Redis({\n        host: 'localhost',\n        port: 6379,\n        maxRetriesPerRequest: 0,\n        lazyConnect: true,\n        enableOfflineQueue: false,\n        retryStrategy: () => null, // Don't retry\n      });\n    } else {\n      this.redis = new Redis(redisUrl, {\n        maxRetriesPerRequest: 3,\n        lazyConnect: true,\n      });\n    }\n  }\n\n  getClient(): Redis {\n    return this.redis;\n  }\n\n  async checkConnection(): Promise<boolean> {\n    try {\n      const start = Date.now();\n      await this.redis.ping();\n      const responseTime = Date.now() - start;\n      return responseTime < 1000; // Consider healthy if ping < 1s\n    } catch {\n      return false;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    await this.redis.disconnect();\n  }\n}\n"],"version":3}