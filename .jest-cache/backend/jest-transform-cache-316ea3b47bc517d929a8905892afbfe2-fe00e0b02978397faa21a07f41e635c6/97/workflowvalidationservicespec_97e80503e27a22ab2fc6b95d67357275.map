{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/workflows/services/workflow-validation.service.spec.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/workflows/services/workflow-validation.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { WorkflowValidationService } from './workflow-validation.service';\nimport { WorkflowSchema } from '@visapi/shared-types';\n\ndescribe('WorkflowValidationService', () => {\n  let service: WorkflowValidationService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [WorkflowValidationService],\n    }).compile();\n\n    service = module.get<WorkflowValidationService>(WorkflowValidationService);\n    // Initialize the service (normally called by NestJS)\n    service.onModuleInit();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('validateWorkflowDefinition', () => {\n    it('should validate a correct workflow schema', () => {\n      const validWorkflow: WorkflowSchema = {\n        id: '550e8400-e29b-41d4-a716-446655440000',\n        name: 'Test Workflow',\n        description: 'A test workflow',\n        enabled: true,\n        variables: { testVar: 'value' },\n        triggers: [\n          {\n            type: 'cron',\n            config: {\n              schedule: '0 9 * * *',\n            },\n          },\n        ],\n        steps: [\n          {\n            id: 'step-1',\n            type: 'whatsapp.send',\n            config: {\n              contact: '+1234567890',\n              template: 'test_template',\n            },\n            retries: 3,\n          },\n        ],\n      };\n\n      const result = service.validateWorkflowDefinition(validWorkflow);\n\n      expect(result.valid).toBe(true);\n      expect(result.errors).toBeUndefined();\n    });\n\n    it('should reject workflow with missing required fields', () => {\n      const invalidWorkflow = {\n        name: 'Test Workflow',\n        // Missing required fields: triggers, steps, enabled\n      };\n\n      const result = service.validateWorkflowDefinition(invalidWorkflow);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toBeDefined();\n      expect(result.errors!.length).toBeGreaterThan(0);\n    });\n\n    it('should reject workflow with invalid step type', () => {\n      const invalidWorkflow = {\n        name: 'Test Workflow',\n        enabled: true,\n        triggers: [\n          {\n            type: 'cron',\n            config: {\n              schedule: '0 9 * * *',\n            },\n          },\n        ],\n        steps: [\n          {\n            id: 'step-1',\n            type: 'invalid.type',\n            config: {},\n          },\n        ],\n      };\n\n      const result = service.validateWorkflowDefinition(invalidWorkflow);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toBeDefined();\n      expect(result.errors!.some(error => error.includes('invalid.type'))).toBe(true);\n    });\n\n    it('should reject workflow with invalid phone number format', () => {\n      const invalidWorkflow = {\n        name: 'Test Workflow',\n        enabled: true,\n        triggers: [\n          {\n            type: 'cron',\n            config: {\n              schedule: '0 9 * * *',\n            },\n          },\n        ],\n        steps: [\n          {\n            id: 'step-1',\n            type: 'whatsapp.send',\n            config: {\n              contact: 'invalid-phone',\n              template: 'test_template',\n            },\n          },\n        ],\n      };\n\n      const result = service.validateWorkflowDefinition(invalidWorkflow);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toBeDefined();\n    });\n\n    it('should reject workflow with empty steps array', () => {\n      const invalidWorkflow = {\n        name: 'Test Workflow',\n        enabled: true,\n        triggers: [\n          {\n            type: 'cron',\n            config: {\n              schedule: '0 9 * * *',\n            },\n          },\n        ],\n        steps: [],\n      };\n\n      const result = service.validateWorkflowDefinition(invalidWorkflow);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toBeDefined();\n      expect(result.errors!.some(error => error.includes('minItems'))).toBe(true);\n    });\n  });\n\n  describe('validateStepConfig', () => {\n    it('should validate slack.send step config', () => {\n      const config = {\n        channel: '#general',\n        message: 'Test message',\n      };\n\n      const result = service.validateStepConfig('slack.send', config);\n\n      expect(result.valid).toBe(true);\n    });\n\n    it('should validate whatsapp.send step config', () => {\n      const config = {\n        contact: '+1234567890',\n        template: 'test_template',\n      };\n\n      const result = service.validateStepConfig('whatsapp.send', config);\n\n      expect(result.valid).toBe(true);\n    });\n\n    it('should validate pdf.generate step config', () => {\n      const config = {\n        template: 'visa_certificate',\n        data: { name: 'John Doe' },\n      };\n\n      const result = service.validateStepConfig('pdf.generate', config);\n\n      expect(result.valid).toBe(true);\n    });\n\n    it('should validate email.send step config', () => {\n      const config = {\n        recipient: 'test@example.com',\n        subject: 'Test Email',\n      };\n\n      const result = service.validateStepConfig('email.send', config);\n\n      expect(result.valid).toBe(true);\n    });\n\n    it('should reject unknown step type', () => {\n      const config = {};\n\n      const result = service.validateStepConfig('unknown.type', config);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toBeDefined();\n      expect(result.errors![0]).toContain('Unknown step type');\n    });\n\n    it('should reject whatsapp.send with missing contact', () => {\n      const config = {\n        template: 'test_template',\n      };\n\n      const result = service.validateStepConfig('whatsapp.send', config);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toBeDefined();\n      expect(result.errors![0]).toContain('contact');\n    });\n\n    it('should reject whatsapp.send with invalid phone format', () => {\n      const config = {\n        contact: 'invalid-phone',\n        template: 'test_template',\n      };\n\n      const result = service.validateStepConfig('whatsapp.send', config);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toBeDefined();\n      expect(result.errors![0]).toContain('phone number format');\n    });\n\n    it('should reject email.send with invalid email format', () => {\n      const config = {\n        recipient: 'invalid-email',\n        subject: 'Test',\n      };\n\n      const result = service.validateStepConfig('email.send', config);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toBeDefined();\n      expect(result.errors![0]).toContain('email format');\n    });\n  });\n\n  describe('validateCronExpression', () => {\n    it('should validate correct cron expressions', () => {\n      const validCronExpressions = [\n        '0 9 * * *',\n        '0 9 * * 1-5',\n        '*/15 * * * *',\n        '0 0 1 * *',\n        '0 9,17 * * *',\n      ];\n\n      validCronExpressions.forEach(expression => {\n        const result = service.validateCronExpression(expression);\n        expect(result.valid).toBe(true);\n      });\n    });\n\n    it('should reject invalid cron expressions', () => {\n      const invalidCronExpressions = [\n        'invalid',\n        '0 9',\n        '0 9 * * * * *',\n        '60 9 * * *',\n        '',\n      ];\n\n      invalidCronExpressions.forEach(expression => {\n        const result = service.validateCronExpression(expression);\n        expect(result.valid).toBe(false);\n      });\n    });\n  });\n\n  describe('validateUniqueStepIds', () => {\n    it('should validate unique step IDs', () => {\n      const steps = [\n        { id: 'step-1' },\n        { id: 'step-2' },\n        { id: 'step-3' },\n      ];\n\n      const result = service.validateUniqueStepIds(steps);\n\n      expect(result.valid).toBe(true);\n    });\n\n    it('should reject duplicate step IDs', () => {\n      const steps = [\n        { id: 'step-1' },\n        { id: 'step-2' },\n        { id: 'step-1' },\n      ];\n\n      const result = service.validateUniqueStepIds(steps);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toBeDefined();\n      expect(result.errors![0]).toContain('Duplicate step IDs');\n    });\n  });\n\n  describe('validateCompleteWorkflow', () => {\n    it('should validate a complete valid workflow', async () => {\n      const validWorkflow: WorkflowSchema = {\n        id: '550e8400-e29b-41d4-a716-446655440000',\n        name: 'Test Workflow',\n        description: 'A test workflow',\n        enabled: true,\n        variables: { testVar: 'value' },\n        triggers: [\n          {\n            type: 'cron',\n            config: {\n              schedule: '0 9 * * *',\n            },\n          },\n        ],\n        steps: [\n          {\n            id: 'step-1',\n            type: 'whatsapp.send',\n            config: {\n              contact: '+1234567890',\n              template: 'test_template',\n            },\n            retries: 3,\n          },\n        ],\n      };\n\n      const result = await service.validateCompleteWorkflow(validWorkflow);\n\n      expect(result.valid).toBe(true);\n    });\n\n    it('should reject workflow with duplicate step IDs', async () => {\n      const invalidWorkflow = {\n        name: 'Test Workflow',\n        enabled: true,\n        triggers: [\n          {\n            type: 'cron',\n            config: {\n              schedule: '0 9 * * *',\n            },\n          },\n        ],\n        steps: [\n          {\n            id: 'step-1',\n            type: 'whatsapp.send',\n            config: {\n              contact: '+1234567890',\n              template: 'test_template',\n            },\n          },\n          {\n            id: 'step-1',\n            type: 'slack.send',\n            config: {\n              channel: '#general',\n              message: 'Test',\n            },\n          },\n        ],\n      };\n\n      const result = await service.validateCompleteWorkflow(invalidWorkflow);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toBeDefined();\n      expect(result.errors![0]).toContain('Duplicate step IDs');\n    });\n\n    it('should reject workflow with invalid cron schedule', async () => {\n      const invalidWorkflow = {\n        name: 'Test Workflow',\n        enabled: true,\n        triggers: [\n          {\n            type: 'cron',\n            config: {\n              schedule: 'invalid-cron',\n            },\n          },\n        ],\n        steps: [\n          {\n            id: 'step-1',\n            type: 'whatsapp.send',\n            config: {\n              contact: '+1234567890',\n              template: 'test_template',\n            },\n          },\n        ],\n      };\n\n      const result = await service.validateCompleteWorkflow(invalidWorkflow);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toBeDefined();\n      expect(result.errors![0]).toContain('Cron trigger');\n    });\n\n    it('should reject workflow with invalid step configuration', async () => {\n      const invalidWorkflow = {\n        name: 'Test Workflow',\n        enabled: true,\n        triggers: [\n          {\n            type: 'cron',\n            config: {\n              schedule: '0 9 * * *',\n            },\n          },\n        ],\n        steps: [\n          {\n            id: 'step-1',\n            type: 'whatsapp.send',\n            config: {\n              contact: 'invalid-phone',\n              template: 'test_template',\n            },\n          },\n        ],\n      };\n\n      const result = await service.validateCompleteWorkflow(invalidWorkflow);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toBeDefined();\n      expect(result.errors![0]).toContain('contact');\n    });\n  });\n});"],"version":3}