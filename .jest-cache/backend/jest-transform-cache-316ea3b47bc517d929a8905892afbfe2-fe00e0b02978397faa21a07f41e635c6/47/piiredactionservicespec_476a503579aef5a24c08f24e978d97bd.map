{"file":"/Users/vadim/Projects/VisAPI/apps/backend/src/logs/services/pii-redaction.service.spec.ts","mappings":"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","names":[],"sources":["/Users/vadim/Projects/VisAPI/apps/backend/src/logs/services/pii-redaction.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { PiiRedactionService } from './pii-redaction.service';\n\ndescribe('PiiRedactionService', () => {\n  let service: PiiRedactionService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [PiiRedactionService],\n    }).compile();\n\n    service = module.get<PiiRedactionService>(PiiRedactionService);\n  });\n\n  describe('redactPii', () => {\n    it('should redact phone numbers', () => {\n      const testCases = [\n        '+1234567890',\n        '123-456-7890',\n        '(123) 456-7890',\n        '123.456.7890',\n        '1234567890',\n      ];\n\n      testCases.forEach(phone => {\n        const result = service.redactPii(`Call me at ${phone}`);\n        expect(result.text).toBe('Call me at [PHONE_REDACTED]');\n        expect(result.piiFound).toBe(true);\n        expect(result.redactedFields).toContain('phone_number');\n      });\n    });\n\n    it('should redact email addresses', () => {\n      const testCases = [\n        'user@example.com',\n        'test.email+tag@domain.co.uk',\n        'user123@test-domain.org',\n      ];\n\n      testCases.forEach(email => {\n        const result = service.redactPii(`Contact us at ${email}`);\n        expect(result.text).toBe('Contact us at [EMAIL_REDACTED]');\n        expect(result.piiFound).toBe(true);\n        expect(result.redactedFields).toContain('email');\n      });\n    });\n\n    it('should redact credit card numbers', () => {\n      const testCases = [\n        '1234 5678 9012 3456',\n        '1234-5678-9012-3456',\n        '1234.5678.9012.3456',\n        '1234567890123456',\n      ];\n\n      testCases.forEach(card => {\n        const result = service.redactPii(`Card: ${card}`);\n        expect(result.text).toBe('Card: [CARD_REDACTED]');\n        expect(result.piiFound).toBe(true);\n        expect(result.redactedFields).toContain('credit_card');\n      });\n    });\n\n    it('should redact SSN numbers', () => {\n      const testCases = [\n        '123-45-6789',\n        '123456789',\n      ];\n\n      testCases.forEach(ssn => {\n        const result = service.redactPii(`SSN: ${ssn}`);\n        expect(result.text).toBe('SSN: [SSN_REDACTED]');\n        expect(result.piiFound).toBe(true);\n        expect(result.redactedFields).toContain('ssn');\n      });\n    });\n\n    it('should redact IP addresses', () => {\n      const testCases = [\n        '192.168.1.1',\n        '10.0.0.1',\n        '172.16.0.1',\n      ];\n\n      testCases.forEach(ip => {\n        const result = service.redactPii(`Server IP: ${ip}`);\n        expect(result.text).toBe('Server IP: [IP_REDACTED]');\n        expect(result.piiFound).toBe(true);\n        expect(result.redactedFields).toContain('ip_address');\n      });\n    });\n\n    it('should redact multiple PII types in one text', () => {\n      const text = 'Contact John at john@example.com or call +1234567890. IP: 192.168.1.1';\n      const result = service.redactPii(text);\n      \n      expect(result.text).toBe('Contact John at [EMAIL_REDACTED] or call [PHONE_REDACTED]. IP: [IP_REDACTED]');\n      expect(result.piiFound).toBe(true);\n      expect(result.redactedFields).toContain('email');\n      expect(result.redactedFields).toContain('phone_number');\n      expect(result.redactedFields).toContain('ip_address');\n    });\n\n    it('should handle empty or null input', () => {\n      expect(service.redactPii('')).toEqual({\n        text: '',\n        piiFound: false,\n        redactedFields: [],\n      });\n\n      expect(service.redactPii(null as any)).toEqual({\n        text: '',\n        piiFound: false,\n        redactedFields: [],\n      });\n\n      expect(service.redactPii(undefined as any)).toEqual({\n        text: '',\n        piiFound: false,\n        redactedFields: [],\n      });\n    });\n\n    it('should handle non-string input', () => {\n      const result = service.redactPii(123 as any);\n      expect(result.text).toBe('');\n      expect(result.piiFound).toBe(false);\n    });\n\n    it('should not modify text without PII', () => {\n      const text = 'This is a normal message without sensitive data';\n      const result = service.redactPii(text);\n      \n      expect(result.text).toBe(text);\n      expect(result.piiFound).toBe(false);\n      expect(result.redactedFields).toEqual([]);\n    });\n  });\n\n  describe('redactPiiFromObject', () => {\n    it('should redact PII from object properties', () => {\n      const obj = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        phone: '+1234567890',\n        metadata: {\n          ip: '192.168.1.1',\n          notes: 'Contact at jane@test.com',\n        },\n      };\n\n      const result = service.redactPiiFromObject(obj);\n\n      expect(result.obj.name).toBe('John Doe');\n      expect(result.obj.email).toBe('[EMAIL_REDACTED]');\n      expect(result.obj.phone).toBe('[PHONE_REDACTED]');\n      expect(result.obj.metadata.ip).toBe('[IP_REDACTED]');\n      expect(result.obj.metadata.notes).toBe('Contact at [EMAIL_REDACTED]');\n      expect(result.piiFound).toBe(true);\n      expect(result.redactedFields).toContain('email');\n      expect(result.redactedFields).toContain('phone_number');\n      expect(result.redactedFields).toContain('ip_address');\n    });\n\n    it('should handle arrays', () => {\n      const arr = [\n        'john@example.com',\n        '+1234567890',\n        'normal text',\n      ];\n\n      const result = service.redactPiiFromObject(arr);\n\n      expect(result.obj[0]).toBe('[EMAIL_REDACTED]');\n      expect(result.obj[1]).toBe('[PHONE_REDACTED]');\n      expect(result.obj[2]).toBe('normal text');\n      expect(result.piiFound).toBe(true);\n    });\n\n    it('should handle nested objects', () => {\n      const obj = {\n        level1: {\n          level2: {\n            level3: {\n              email: 'deep@example.com',\n            },\n          },\n        },\n      };\n\n      const result = service.redactPiiFromObject(obj);\n\n      expect(result.obj.level1.level2.level3.email).toBe('[EMAIL_REDACTED]');\n      expect(result.piiFound).toBe(true);\n    });\n\n    it('should handle non-object input', () => {\n      const result = service.redactPiiFromObject('test@example.com');\n      expect(result.obj).toBe('[EMAIL_REDACTED]');\n      expect(result.piiFound).toBe(true);\n    });\n\n    it('should handle null and undefined', () => {\n      expect(service.redactPiiFromObject(null).obj).toBe(null);\n      expect(service.redactPiiFromObject(undefined).obj).toBe(undefined);\n    });\n  });\n\n  describe('containsPii', () => {\n    it('should detect PII presence', () => {\n      expect(service.containsPii('Contact: john@example.com')).toBe(true);\n      expect(service.containsPii('Call +1234567890')).toBe(true);\n      expect(service.containsPii('Normal text')).toBe(false);\n      expect(service.containsPii('')).toBe(false);\n      expect(service.containsPii(null as any)).toBe(false);\n    });\n  });\n\n  describe('getPiiStats', () => {\n    it('should return PII statistics', () => {\n      const text = 'Contact john@example.com or jane@test.com, call +1234567890 or +0987654321';\n      const stats = service.getPiiStats(text);\n\n      expect(stats.email).toBe(2);\n      expect(stats.phone_number).toBe(2);\n      expect(stats.credit_card).toBe(0);\n      expect(stats.ssn).toBe(0);\n    });\n\n    it('should handle empty text', () => {\n      const stats = service.getPiiStats('');\n      expect(Object.values(stats).every(count => count === 0)).toBe(true);\n    });\n  });\n\n  describe('pattern management', () => {\n    it('should allow adding custom patterns', () => {\n      const customRegex = /CUSTOM-\\d{4}/g;\n      service.addPattern('custom', customRegex, '[CUSTOM_REDACTED]');\n\n      const result = service.redactPii('Code: CUSTOM-1234');\n      expect(result.text).toBe('Code: [CUSTOM_REDACTED]');\n      expect(result.piiFound).toBe(true);\n    });\n\n    it('should allow removing patterns', () => {\n      service.removePattern('email');\n      \n      const result = service.redactPii('Contact: john@example.com');\n      expect(result.text).toBe('Contact: john@example.com');\n      expect(result.piiFound).toBe(false);\n    });\n\n    it('should return all patterns', () => {\n      const patterns = service.getPatterns();\n      expect(patterns).toHaveProperty('email');\n      expect(patterns).toHaveProperty('phone');\n      expect(patterns).toHaveProperty('creditCard');\n    });\n  });\n});"],"version":3}