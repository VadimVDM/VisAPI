7cad1860704b722a659437e419104cd4
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisHealthIndicator = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@nestjs/common");
const terminus_1 = require("@nestjs/terminus");
const util_redis_1 = require("@visapi/util-redis");
let RedisHealthIndicator = class RedisHealthIndicator extends terminus_1.HealthIndicator {
    constructor(redisService) {
        super();
        this.redisService = redisService;
    }
    isHealthy(key) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const isHealthy = yield this.redisService.checkConnection();
                if (isHealthy) {
                    return this.getStatus(key, true, {
                        message: 'Redis is accessible and responsive',
                    });
                }
                throw new terminus_1.HealthCheckError('Redis connection failed', this.getStatus(key, false, {
                    message: 'Redis ping exceeded timeout (1s)',
                }));
            }
            catch (error) {
                throw new terminus_1.HealthCheckError('Redis connection failed', this.getStatus(key, false, {
                    message: 'Unable to connect to Redis',
                    error: error.message,
                }));
            }
        });
    }
};
exports.RedisHealthIndicator = RedisHealthIndicator;
exports.RedisHealthIndicator = RedisHealthIndicator = tslib_1.__decorate([
    (0, common_1.Injectable)(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof util_redis_1.RedisService !== "undefined" && util_redis_1.RedisService) === "function" ? _a : Object])
], RedisHealthIndicator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZhZGltL1Byb2plY3RzL1Zpc0FQSS9hcHBzL2JhY2tlbmQvc3JjL2hlYWx0aC9pbmRpY2F0b3JzL3JlZGlzLmhlYWx0aC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUE0QztBQUM1QywrQ0FJMEI7QUFDMUIsbURBQWtEO0FBRzNDLElBQU0sb0JBQW9CLEdBQTFCLE1BQU0sb0JBQXFCLFNBQVEsMEJBQWU7SUFDdkQsWUFBNkIsWUFBMEI7UUFDckQsS0FBSyxFQUFFLENBQUM7UUFEbUIsaUJBQVksR0FBWixZQUFZLENBQWM7SUFFdkQsQ0FBQztJQUVLLFNBQVMsQ0FBQyxHQUFXOztZQUN6QixJQUFJLENBQUM7Z0JBQ0gsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxDQUFDO2dCQUU1RCxJQUFJLFNBQVMsRUFBRSxDQUFDO29CQUNkLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFO3dCQUMvQixPQUFPLEVBQUUsb0NBQW9DO3FCQUM5QyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQztnQkFFRCxNQUFNLElBQUksMkJBQWdCLENBQ3hCLHlCQUF5QixFQUN6QixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUU7b0JBQ3pCLE9BQU8sRUFBRSxrQ0FBa0M7aUJBQzVDLENBQUMsQ0FDSCxDQUFDO1lBQ0osQ0FBQztZQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7Z0JBQ2YsTUFBTSxJQUFJLDJCQUFnQixDQUN4Qix5QkFBeUIsRUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFO29CQUN6QixPQUFPLEVBQUUsNEJBQTRCO29CQUNyQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU87aUJBQ3JCLENBQUMsQ0FDSCxDQUFDO1lBQ0osQ0FBQztRQUNILENBQUM7S0FBQTtDQUNGLENBQUE7QUEvQlksb0RBQW9COytCQUFwQixvQkFBb0I7SUFEaEMsSUFBQSxtQkFBVSxHQUFFO2lFQUVnQyx5QkFBWSxvQkFBWix5QkFBWTtHQUQ1QyxvQkFBb0IsQ0ErQmhDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy92YWRpbS9Qcm9qZWN0cy9WaXNBUEkvYXBwcy9iYWNrZW5kL3NyYy9oZWFsdGgvaW5kaWNhdG9ycy9yZWRpcy5oZWFsdGgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7XG4gIEhlYWx0aEluZGljYXRvcixcbiAgSGVhbHRoSW5kaWNhdG9yUmVzdWx0LFxuICBIZWFsdGhDaGVja0Vycm9yLFxufSBmcm9tICdAbmVzdGpzL3Rlcm1pbnVzJztcbmltcG9ydCB7IFJlZGlzU2VydmljZSB9IGZyb20gJ0B2aXNhcGkvdXRpbC1yZWRpcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSZWRpc0hlYWx0aEluZGljYXRvciBleHRlbmRzIEhlYWx0aEluZGljYXRvciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcmVkaXNTZXJ2aWNlOiBSZWRpc1NlcnZpY2UpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgYXN5bmMgaXNIZWFsdGh5KGtleTogc3RyaW5nKTogUHJvbWlzZTxIZWFsdGhJbmRpY2F0b3JSZXN1bHQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgaXNIZWFsdGh5ID0gYXdhaXQgdGhpcy5yZWRpc1NlcnZpY2UuY2hlY2tDb25uZWN0aW9uKCk7XG5cbiAgICAgIGlmIChpc0hlYWx0aHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhdHVzKGtleSwgdHJ1ZSwge1xuICAgICAgICAgIG1lc3NhZ2U6ICdSZWRpcyBpcyBhY2Nlc3NpYmxlIGFuZCByZXNwb25zaXZlJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBIZWFsdGhDaGVja0Vycm9yKFxuICAgICAgICAnUmVkaXMgY29ubmVjdGlvbiBmYWlsZWQnLFxuICAgICAgICB0aGlzLmdldFN0YXR1cyhrZXksIGZhbHNlLCB7XG4gICAgICAgICAgbWVzc2FnZTogJ1JlZGlzIHBpbmcgZXhjZWVkZWQgdGltZW91dCAoMXMpJyxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBIZWFsdGhDaGVja0Vycm9yKFxuICAgICAgICAnUmVkaXMgY29ubmVjdGlvbiBmYWlsZWQnLFxuICAgICAgICB0aGlzLmdldFN0YXR1cyhrZXksIGZhbHNlLCB7XG4gICAgICAgICAgbWVzc2FnZTogJ1VuYWJsZSB0byBjb25uZWN0IHRvIFJlZGlzJyxcbiAgICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iXSwidmVyc2lvbiI6M30=