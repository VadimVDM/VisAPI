name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      affected-frontend: ${{ steps.affected.outputs.frontend }}
      affected-backend: ${{ steps.affected.outputs.backend }}
      affected-worker: ${{ steps.affected.outputs.worker }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v2
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Derive affected projects
        id: affected
        run: |
          # Simplified: always run all projects for now
          echo "frontend=true" >> $GITHUB_OUTPUT
          echo "backend=true" >> $GITHUB_OUTPUT
          echo "worker=true" >> $GITHUB_OUTPUT

  lint:
    name: Lint
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run linting
        run: pnpm lint:ci
        timeout-minutes: 10
        continue-on-error: true

  test:
    name: Test
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [frontend, backend, worker]
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        if: |
          (matrix.project == 'frontend' && needs.setup.outputs.affected-frontend == 'true') ||
          (matrix.project == 'backend' && needs.setup.outputs.affected-backend == 'true') ||
          (matrix.project == 'worker' && needs.setup.outputs.affected-worker == 'true')
        run: |
          if [ "${{ matrix.project }}" = "frontend" ]; then
            pnpm nx test frontend --passWithNoTests
          elif [ "${{ matrix.project }}" = "backend" ]; then
            pnpm test:backend:serial
          else
            pnpm nx test ${{ matrix.project }}
          fi
        env:
          NODE_ENV: test

      - name: Upload coverage
        if: |
          (matrix.project == 'frontend' && needs.setup.outputs.affected-frontend == 'true') ||
          (matrix.project == 'backend' && needs.setup.outputs.affected-backend == 'true') ||
          (matrix.project == 'worker' && needs.setup.outputs.affected-worker == 'true')
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.project }}

  build:
    name: Build
    needs: [setup, lint, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [frontend, backend, worker]
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        if: |
          (matrix.project == 'frontend' && needs.setup.outputs.affected-frontend == 'true') ||
          (matrix.project == 'backend' && needs.setup.outputs.affected-backend == 'true') ||
          (matrix.project == 'worker' && needs.setup.outputs.affected-worker == 'true')
        run: pnpm nx build ${{ matrix.project }}
        env:
          # Frontend build environment variables
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_ENV: production
          NODE_ENV: production
          CI: true

      - name: Upload build artifacts
        if: |
          (matrix.project == 'frontend' && needs.setup.outputs.affected-frontend == 'true') ||
          (matrix.project == 'backend' && needs.setup.outputs.affected-backend == 'true') ||
          (matrix.project == 'worker' && needs.setup.outputs.affected-worker == 'true')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project }}-build
          path: |
            dist/${{ matrix.project }}
            ${{ matrix.project == 'frontend' && 'apps/frontend/.next' || '' }}
          retention-days: 7

  security:
    name: Security Scan
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  lighthouse:
    name: Lighthouse CI
    needs: [setup, build]
    if: needs.setup.outputs.affected-frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build frontend
        run: pnpm nx build frontend
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_ENV: production
          NODE_ENV: production
          CI: true

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  notify:
    name: Notify
    needs: [lint, test, build, security]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notification
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            CI Pipeline ${{ job.status == 'success' && 'passed ✅' || 'failed ❌' }}
            Commit: ${{ github.event.head_commit.message }}
            Author: ${{ github.event.head_commit.author.name }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
