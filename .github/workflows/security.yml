name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload Snyk results
        if: always() && hashFiles('snyk.sarif') != ''
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile:
          - path: ./worker/Dockerfile
            context: .
            name: worker
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t visapi-${{ matrix.dockerfile.name }}:scan \
            -f ${{ matrix.dockerfile.path }} \
            ${{ matrix.dockerfile.context }}
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: visapi-${{ matrix.dockerfile.name }}:scan
          format: 'sarif'
          output: 'trivy-${{ matrix.dockerfile.name }}.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.dockerfile.name }}.sarif'

      - name: Generate container SBOM
        uses: anchore/sbom-action@v0
        with:
          image: visapi-${{ matrix.dockerfile.name }}:scan
          format: cyclonedx-json
          output-file: container-sbom-${{ matrix.dockerfile.name }}.json

      - name: Upload container SBOM
        uses: actions/upload-artifact@v4
        with:
          name: container-sbom-${{ matrix.dockerfile.name }}
          path: container-sbom-${{ matrix.dockerfile.name }}.json

      - name: Verify secure base image
        run: |
          echo "Verifying secure base image usage..."
          if docker history visapi-${{ matrix.dockerfile.name }}:scan | grep -q "alpine"; then
            echo "✓ Alpine base image detected"
          else
            echo "✗ Alpine base image not found"
            exit 1
          fi

      - name: Check container security best practices
        run: |
          echo "Checking container security configurations..."
          # Check for non-root user
          if docker inspect visapi-${{ matrix.dockerfile.name }}:scan | jq -e '.[]|.Config.User' | grep -q "1001"; then
            echo "✓ Non-root user configured"
          else
            echo "✗ Root user detected"
            exit 1
          fi
          
          # Check for minimal attack surface
          layers=$(docker history visapi-${{ matrix.dockerfile.name }}:scan --format "table {{.Size}}" | tail -n +2 | wc -l)
          if [ "$layers" -lt 20 ]; then
            echo "✓ Minimal layer count: $layers"
          else
            echo "⚠ High layer count detected: $layers"
          fi

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          extra_args: --debug --only-verified

  license-scan:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: License Checker
        run: |
          npx license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0' > licenses.txt

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.txt

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          format: cyclonedx-json
          output-file: sbom.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

  security-summary:
    name: Security Summary
    needs:
      [
        dependency-scan,
        container-scan,
        secrets-scan,
        license-scan,
        codeql,
        sbom,
      ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send Security Report
        if: github.event_name == 'schedule'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Daily Security Scan Summary:
            - Dependency Scan: ${{ needs.dependency-scan.result }}
            - Container Scan: ${{ needs.container-scan.result }}
            - Secrets Scan: ${{ needs.secrets-scan.result }}
            - License Check: ${{ needs.license-scan.result }}
            - CodeQL: ${{ needs.codeql.result }}

            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
